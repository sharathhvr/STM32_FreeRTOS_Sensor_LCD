
STM32_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800739c  0800739c  0001739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800744c  0800744c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800744c  0800744c  0001744c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007454  08007454  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007454  08007454  00017454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007458  08007458  00017458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800745c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000418c  20000078  080074d4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004204  080074d4  00024204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016400  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e5c  00000000  00000000  000364a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b0  00000000  00000000  00039308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001268  00000000  00000000  0003a6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000244b8  00000000  00000000  0003b920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f5e4  00000000  00000000  0005fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db0ec  00000000  00000000  0006f3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a4a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f0  00000000  00000000  0014a524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007384 	.word	0x08007384

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08007384 	.word	0x08007384

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <HCSR04_Read>:
/*
 * Function to Read HCSR04 Data
 * htim- Timer Handler ex:htim1,htim2
 */
void HCSR04_Read (TIM_HandleTypeDef* htim)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000daa:	480c      	ldr	r0, [pc, #48]	; (8000ddc <HCSR04_Read+0x40>)
 8000dac:	f001 fadc 	bl	8002368 <HAL_GPIO_WritePin>
	delay_us(100,htim);  // wait for 10 us
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	2064      	movs	r0, #100	; 0x64
 8000db4:	f000 f814 	bl	8000de0 <delay_us>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbe:	4807      	ldr	r0, [pc, #28]	; (8000ddc <HCSR04_Read+0x40>)
 8000dc0:	f001 fad2 	bl	8002368 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0202 	orr.w	r2, r2, #2
 8000dd2:	60da      	str	r2, [r3, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020000 	.word	0x40020000

08000de0 <delay_us>:

void delay_us(uint16_t time,TIM_HandleTypeDef* htim)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	80fb      	strh	r3, [r7, #6]
	//timer 2 is set for 1us counting period
	__HAL_TIM_SET_COUNTER(htim,0);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim) < time );
 8000df4:	bf00      	nop
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3f9      	bcc.n	8000df6 <delay_us+0x16>
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1>:

void HAL_TIM_IC_CaptureCallback_HCSR04_Ch1(TIM_HandleTypeDef *htim,uint8_t* Distance)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
	static uint32_t IC_Val1 = 0;
	static uint32_t IC_Val2 = 0;
	static uint32_t Difference = 0;
	static uint8_t Is_First_Captured = 0;
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7f1b      	ldrb	r3, [r3, #28]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	f040 8083 	bne.w	8000f2a <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x11a>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 8000e24:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x130>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d11a      	bne.n	8000e62 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x52>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f003 fc94 	bl	800475c <HAL_TIM_ReadCapturedValue>
 8000e34:	4602      	mov	r2, r0
 8000e36:	4b43      	ldr	r3, [pc, #268]	; (8000f44 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x134>)
 8000e38:	601a      	str	r2, [r3, #0]
				Is_First_Captured = 1;  // set the first captured as true
 8000e3a:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x130>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6a1a      	ldr	r2, [r3, #32]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 020a 	bic.w	r2, r2, #10
 8000e4e:	621a      	str	r2, [r3, #32]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6a1a      	ldr	r2, [r3, #32]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0202 	orr.w	r2, r2, #2
 8000e5e:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
			}
		}

}
 8000e60:	e063      	b.n	8000f2a <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x11a>
			else if (Is_First_Captured==1)   // if the first is already captured
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x130>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d15f      	bne.n	8000f2a <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x11a>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f003 fc75 	bl	800475c <HAL_TIM_ReadCapturedValue>
 8000e72:	4602      	mov	r2, r0
 8000e74:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x138>)
 8000e76:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 8000e80:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x138>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x134>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d907      	bls.n	8000e9c <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x8c>
					Difference = IC_Val2-IC_Val1;
 8000e8c:	4b2e      	ldr	r3, [pc, #184]	; (8000f48 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x138>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x134>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x13c>)
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e00f      	b.n	8000ebc <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0xac>
				else if (IC_Val1 > IC_Val2)
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x134>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x138>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d909      	bls.n	8000ebc <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0xac>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8000ea8:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x138>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x134>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000eb6:	33ff      	adds	r3, #255	; 0xff
 8000eb8:	4a24      	ldr	r2, [pc, #144]	; (8000f4c <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x13c>)
 8000eba:	6013      	str	r3, [r2, #0]
				*(Distance) =(uint8_t) (Difference * .034/2);
 8000ebc:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x13c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fb3f 	bl	8000544 <__aeabi_ui2d>
 8000ec6:	a31c      	add	r3, pc, #112	; (adr r3, 8000f38 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x128>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff fbb4 	bl	8000638 <__aeabi_dmul>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	4621      	mov	r1, r4
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee0:	f7ff fcd4 	bl	800088c <__aeabi_ddiv>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	460c      	mov	r4, r1
 8000ee8:	4618      	mov	r0, r3
 8000eea:	4621      	mov	r1, r4
 8000eec:	f7ff fdb6 	bl	8000a5c <__aeabi_d2uiz>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1+0x130>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6a1a      	ldr	r2, [r3, #32]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 020a 	bic.w	r2, r2, #10
 8000f0c:	621a      	str	r2, [r3, #32]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6a12      	ldr	r2, [r2, #32]
 8000f18:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0202 	bic.w	r2, r2, #2
 8000f28:	60da      	str	r2, [r3, #12]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	f3af 8000 	nop.w
 8000f38:	b020c49c 	.word	0xb020c49c
 8000f3c:	3fa16872 	.word	0x3fa16872
 8000f40:	20000094 	.word	0x20000094
 8000f44:	20000098 	.word	0x20000098
 8000f48:	2000009c 	.word	0x2000009c
 8000f4c:	200000a0 	.word	0x200000a0

08000f50 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8000f58:	2254      	movs	r2, #84	; 0x54
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <MPU6050_Init+0x1c>)
 8000f5e:	f005 fe01 	bl	8006b64 <memcpy>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000a4 	.word	0x200000a4

08000f70 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8000f80:	23d0      	movs	r3, #208	; 0xd0
 8000f82:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	f107 020c 	add.w	r2, r7, #12
 8000f90:	230a      	movs	r3, #10
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <I2C_Read+0x4c>)
 8000f98:	f001 fb38 	bl	800260c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	b299      	uxth	r1, r3
 8000fa0:	79bb      	ldrb	r3, [r7, #6]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	2364      	movs	r3, #100	; 0x64
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <I2C_Read+0x4c>)
 8000fae:	f001 fc2b 	bl	8002808 <HAL_I2C_Master_Receive>
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000a4 	.word	0x200000a4

08000fc0 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460a      	mov	r2, r1
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8000fd4:	79bb      	ldrb	r3, [r7, #6]
 8000fd6:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8000fd8:	23d0      	movs	r3, #208	; 0xd0
 8000fda:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	b299      	uxth	r1, r3
 8000fe0:	f107 020c 	add.w	r2, r7, #12
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <I2C_Write8+0x38>)
 8000fec:	f001 fb0e 	bl	800260c <HAL_I2C_Master_Transmit>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200000a4 	.word	0x200000a4

08000ffc <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	206b      	movs	r0, #107	; 0x6b
 800100c:	f7ff ffd8 	bl	8000fc0 <I2C_Write8>
	HAL_Delay(100);
 8001010:	2064      	movs	r0, #100	; 0x64
 8001012:	f000 fee3 	bl	8001ddc <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	791b      	ldrb	r3, [r3, #4]
 8001024:	019b      	lsls	r3, r3, #6
 8001026:	b25b      	sxtb	r3, r3
 8001028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102c:	b25a      	sxtb	r2, r3
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4313      	orrs	r3, r2
 8001034:	b25b      	sxtb	r3, r3
 8001036:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	4619      	mov	r1, r3
 800103c:	206b      	movs	r0, #107	; 0x6b
 800103e:	f7ff ffbf 	bl	8000fc0 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001042:	2064      	movs	r0, #100	; 0x64
 8001044:	f000 feca 	bl	8001ddc <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	78db      	ldrb	r3, [r3, #3]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	4619      	mov	r1, r3
 800105a:	201a      	movs	r0, #26
 800105c:	f7ff ffb0 	bl	8000fc0 <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f003 0318 	and.w	r3, r3, #24
 8001070:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	4619      	mov	r1, r3
 8001076:	201b      	movs	r0, #27
 8001078:	f7ff ffa2 	bl	8000fc0 <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	789b      	ldrb	r3, [r3, #2]
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	f003 0318 	and.w	r3, r3, #24
 800108c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	4619      	mov	r1, r3
 8001092:	201c      	movs	r0, #28
 8001094:	f7ff ff94 	bl	8000fc0 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001098:	2004      	movs	r0, #4
 800109a:	f000 f857 	bl	800114c <MPU6050_Set_SMPRT_DIV>


	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	789b      	ldrb	r3, [r3, #2]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d81a      	bhi.n	80010dc <MPU6050_Config+0xe0>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <MPU6050_Config+0xb0>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	080010bd 	.word	0x080010bd
 80010b0:	080010c5 	.word	0x080010c5
 80010b4:	080010cd 	.word	0x080010cd
 80010b8:	080010d5 	.word	0x080010d5
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MPU6050_Config+0x12c>)
 80010be:	4a1b      	ldr	r2, [pc, #108]	; (800112c <MPU6050_Config+0x130>)
 80010c0:	601a      	str	r2, [r3, #0]
			break;
 80010c2:	e00c      	b.n	80010de <MPU6050_Config+0xe2>

		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MPU6050_Config+0x12c>)
 80010c6:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <MPU6050_Config+0x134>)
 80010c8:	601a      	str	r2, [r3, #0]
				break;
 80010ca:	e008      	b.n	80010de <MPU6050_Config+0xe2>

		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MPU6050_Config+0x12c>)
 80010ce:	4a19      	ldr	r2, [pc, #100]	; (8001134 <MPU6050_Config+0x138>)
 80010d0:	601a      	str	r2, [r3, #0]
			break;
 80010d2:	e004      	b.n	80010de <MPU6050_Config+0xe2>

		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MPU6050_Config+0x12c>)
 80010d6:	4a18      	ldr	r2, [pc, #96]	; (8001138 <MPU6050_Config+0x13c>)
 80010d8:	601a      	str	r2, [r3, #0]
			break;
 80010da:	e000      	b.n	80010de <MPU6050_Config+0xe2>

		default:
			break;
 80010dc:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d81a      	bhi.n	800111c <MPU6050_Config+0x120>
 80010e6:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <MPU6050_Config+0xf0>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	080010fd 	.word	0x080010fd
 80010f0:	08001105 	.word	0x08001105
 80010f4:	0800110d 	.word	0x0800110d
 80010f8:	08001115 	.word	0x08001115
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MPU6050_Config+0x140>)
 80010fe:	4a10      	ldr	r2, [pc, #64]	; (8001140 <MPU6050_Config+0x144>)
 8001100:	601a      	str	r2, [r3, #0]
			break;
 8001102:	e00c      	b.n	800111e <MPU6050_Config+0x122>

		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <MPU6050_Config+0x140>)
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <MPU6050_Config+0x148>)
 8001108:	601a      	str	r2, [r3, #0]
				break;
 800110a:	e008      	b.n	800111e <MPU6050_Config+0x122>

		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MPU6050_Config+0x140>)
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <MPU6050_Config+0x14c>)
 8001110:	601a      	str	r2, [r3, #0]
			break;
 8001112:	e004      	b.n	800111e <MPU6050_Config+0x122>

		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MPU6050_Config+0x140>)
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <MPU6050_Config+0x130>)
 8001118:	601a      	str	r2, [r3, #0]
			break;
 800111a:	e000      	b.n	800111e <MPU6050_Config+0x122>

		default:
			break;
 800111c:	bf00      	nop
	}

}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000f8 	.word	0x200000f8
 800112c:	3d7a0000 	.word	0x3d7a0000
 8001130:	3dfa0000 	.word	0x3dfa0000
 8001134:	3e7a0000 	.word	0x3e7a0000
 8001138:	3efa0000 	.word	0x3efa0000
 800113c:	200000fc 	.word	0x200000fc
 8001140:	3bfa0000 	.word	0x3bfa0000
 8001144:	3c7a0000 	.word	0x3c7a0000
 8001148:	3cfa0000 	.word	0x3cfa0000

0800114c <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4619      	mov	r1, r3
 800115a:	2019      	movs	r0, #25
 800115c:	f7ff ff30 	bl	8000fc0 <I2C_Write8>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <MPU6050_Get_Accel_RawData>:

}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	3301      	adds	r3, #1
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	203a      	movs	r0, #58	; 0x3a
 800117c:	f7ff fef8 	bl	8000f70 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8001180:	7f7b      	ldrb	r3, [r7, #29]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d04f      	beq.n	8001226 <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2206      	movs	r2, #6
 800118c:	4619      	mov	r1, r3
 800118e:	203b      	movs	r0, #59	; 0x3b
 8001190:	f7ff feee 	bl	8000f70 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001194:	7d3b      	ldrb	r3, [r7, #20]
 8001196:	b29b      	uxth	r3, r3
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b29a      	uxth	r2, r3
 800119c:	7d7b      	ldrb	r3, [r7, #21]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4413      	add	r3, r2
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 80011aa:	7dbb      	ldrb	r3, [r7, #22]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 80011c0:	7e3b      	ldrb	r3, [r7, #24]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	7e7b      	ldrb	r3, [r7, #25]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	2206      	movs	r2, #6
 80011dc:	4619      	mov	r1, r3
 80011de:	2043      	movs	r0, #67	; 0x43
 80011e0:	f7ff fec6 	bl	8000f70 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 80011e4:	7b3b      	ldrb	r3, [r7, #12]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	7b7b      	ldrb	r3, [r7, #13]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MPU6050_Get_Accel_RawData+0xc8>)
 80011f8:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b29a      	uxth	r2, r3
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	b29b      	uxth	r3, r3
 8001206:	4413      	add	r3, r2
 8001208:	b29b      	uxth	r3, r3
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MPU6050_Get_Accel_RawData+0xc8>)
 800120e:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8001210:	7c3b      	ldrb	r3, [r7, #16]
 8001212:	b29b      	uxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b29a      	uxth	r2, r3
 8001218:	7c7b      	ldrb	r3, [r7, #17]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b03      	ldr	r3, [pc, #12]	; (8001230 <MPU6050_Get_Accel_RawData+0xc8>)
 8001224:	809a      	strh	r2, [r3, #4]
	}
}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000100 	.word	0x20000100

08001234 <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff91 	bl	8001168 <MPU6050_Get_Accel_RawData>

	//Accel Scale data
	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
 8001246:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001252:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012bc <MPU6050_Get_Accel_Scale+0x88>
 8001256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MPU6050_Get_Accel_Scale+0x8c>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
 800126a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001276:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80012bc <MPU6050_Get_Accel_Scale+0x88>
 800127a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MPU6050_Get_Accel_Scale+0x8c>)
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
 800128e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80012bc <MPU6050_Get_Accel_Scale+0x88>
 800129e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MPU6050_Get_Accel_Scale+0x8c>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	00000000 	.word	0x00000000
 80012c0:	200000f8 	.word	0x200000f8

080012c4 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

	//Accel Raw Data
	rawDef->x = GyroRW[0];
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MPU6050_Get_Gyro_RawData+0x34>)
 80012ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MPU6050_Get_Gyro_RawData+0x34>)
 80012d8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <MPU6050_Get_Gyro_RawData+0x34>)
 80012e2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	809a      	strh	r2, [r3, #4]

}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000100 	.word	0x20000100

080012fc <MPU6050_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU6050_Get_Gyro_Scale(ScaledData_Def *scaledDef)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ffdb 	bl	80012c4 <MPU6050_Get_Gyro_RawData>

	//Gyro Scale data
	scaledDef->x = (myGyroRaw.x)*gyroScalingFactor; // x-Axis
 800130e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MPU6050_Get_Gyro_Scale+0x70>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = (myGyroRaw.y)*gyroScalingFactor; // y-Axis
 800132a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <MPU6050_Get_Gyro_Scale+0x70>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = (myGyroRaw.z)*gyroScalingFactor; // z-Axis
 8001346:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <MPU6050_Get_Gyro_Scale+0x70>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200000fc 	.word	0x200000fc

08001370 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a07      	ldr	r2, [pc, #28]	; (800139c <vApplicationGetIdleTaskMemory+0x2c>)
 8001380:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <vApplicationGetIdleTaskMemory+0x30>)
 8001386:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000108 	.word	0x20000108
 80013a0:	2000015c 	.word	0x2000015c

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b5b0      	push	{r4, r5, r7, lr}
 80013a6:	b094      	sub	sp, #80	; 0x50
 80013a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013aa:	f000 fca5 	bl	8001cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ae:	f000 f869 	bl	8001484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b2:	f000 f9a9 	bl	8001708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013b6:	f000 f97d 	bl	80016b4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013ba:	f000 f8d1 	bl	8001560 <MX_I2C1_Init>
  MX_TIM2_Init();
 80013be:	f000 f8fd 	bl	80015bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80013c2:	f000 f94d 	bl	8001660 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   HAL_I2C_Mem_Read(&hi2c1, DevAddress, 0x75,1, &check,1,1000);
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <main+0xc4>)
 80013c8:	8819      	ldrh	r1, [r3, #0]
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	2275      	movs	r2, #117	; 0x75
 80013de:	4823      	ldr	r0, [pc, #140]	; (800146c <main+0xc8>)
 80013e0:	f001 fc38 	bl	8002c54 <HAL_I2C_Mem_Read>

   //1. Initialise the MPU6050 module and I2C
   	MPU6050_Init(&hi2c1);
 80013e4:	4821      	ldr	r0, [pc, #132]	; (800146c <main+0xc8>)
 80013e6:	f7ff fdb3 	bl	8000f50 <MPU6050_Init>
   	//2. Configure Accel and Gyro parameters
   	myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 80013ea:	2301      	movs	r3, #1
 80013ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
   	myMpuConfig.ClockSource = Internal_8MHz;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
   	myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 80013f6:	2301      	movs	r3, #1
 80013f8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   	myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 80013fc:	2301      	movs	r3, #1
 80013fe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
   	myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 8001402:	2300      	movs	r3, #0
 8001404:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   	MPU6050_Config(&myMpuConfig);
 8001408:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fdf5 	bl	8000ffc <MPU6050_Config>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <main+0xcc>)
 8001414:	f107 041c 	add.w	r4, r7, #28
 8001418:	461d      	mov	r5, r3
 800141a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001422:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f004 f94c 	bl	80056ca <osThreadCreate>
 8001432:	4602      	mov	r2, r0
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <main+0xd0>)
 8001436:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(MPU6050Task, StartMPU6050Task, osPriorityNormal, 0, 128);
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <main+0xd4>)
 800143a:	463c      	mov	r4, r7
 800143c:	461d      	mov	r5, r3
 800143e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001442:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001446:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MPU6050TaskHandle = osThreadCreate(osThread(MPU6050Task), NULL);
 800144a:	463b      	mov	r3, r7
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f004 f93b 	bl	80056ca <osThreadCreate>
 8001454:	4602      	mov	r2, r0
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <main+0xd8>)
 8001458:	601a      	str	r2, [r3, #0]


  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800145a:	2100      	movs	r1, #0
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <main+0xdc>)
 800145e:	f002 ff71 	bl	8004344 <HAL_TIM_IC_Start_IT>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001462:	f004 f92b 	bl	80056bc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001466:	e7fe      	b.n	8001466 <main+0xc2>
 8001468:	20000000 	.word	0x20000000
 800146c:	200040bc 	.word	0x200040bc
 8001470:	080073a8 	.word	0x080073a8
 8001474:	200040b8 	.word	0x200040b8
 8001478:	080073d0 	.word	0x080073d0
 800147c:	20004164 	.word	0x20004164
 8001480:	20004168 	.word	0x20004168

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b094      	sub	sp, #80	; 0x50
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	2234      	movs	r2, #52	; 0x34
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f005 fb71 	bl	8006b7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <SystemClock_Config+0xd4>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a29      	ldr	r2, [pc, #164]	; (8001558 <SystemClock_Config+0xd4>)
 80014b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <SystemClock_Config+0xd4>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014c4:	2300      	movs	r3, #0
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <SystemClock_Config+0xd8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014d0:	4a22      	ldr	r2, [pc, #136]	; (800155c <SystemClock_Config+0xd8>)
 80014d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <SystemClock_Config+0xd8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e8:	2301      	movs	r3, #1
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ec:	2310      	movs	r3, #16
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f0:	2302      	movs	r3, #2
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014f4:	2300      	movs	r3, #0
 80014f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014f8:	2310      	movs	r3, #16
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001502:	2304      	movs	r3, #4
 8001504:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001506:	2302      	movs	r3, #2
 8001508:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800150a:	2302      	movs	r3, #2
 800150c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fc90 	bl	8003e38 <HAL_RCC_OscConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800151e:	f000 f9e7 	bl	80018f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001522:	230f      	movs	r3, #15
 8001524:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001526:	2302      	movs	r3, #2
 8001528:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	2102      	movs	r1, #2
 800153e:	4618      	mov	r0, r3
 8001540:	f002 f9c0 	bl	80038c4 <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800154a:	f000 f9d1 	bl	80018f0 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3750      	adds	r7, #80	; 0x50
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000

08001560 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001566:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <MX_I2C1_Init+0x58>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x54>)
 800156c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001570:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_I2C1_Init+0x54>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001580:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001584:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_I2C1_Init+0x54>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001594:	2200      	movs	r2, #0
 8001596:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_I2C1_Init+0x54>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_I2C1_Init+0x54>)
 80015a0:	f000 fefc 	bl	800239c <HAL_I2C_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80015aa:	f000 f9a1 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200040bc 	.word	0x200040bc
 80015b8:	40005400 	.word	0x40005400

080015bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <MX_TIM2_Init+0xa0>)
 80015da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_TIM2_Init+0xa0>)
 80015e2:	2253      	movs	r2, #83	; 0x53
 80015e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_TIM2_Init+0xa0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_TIM2_Init+0xa0>)
 80015ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_TIM2_Init+0xa0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_TIM2_Init+0xa0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001600:	4816      	ldr	r0, [pc, #88]	; (800165c <MX_TIM2_Init+0xa0>)
 8001602:	f002 fe73 	bl	80042ec <HAL_TIM_IC_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800160c:	f000 f970 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4619      	mov	r1, r3
 800161e:	480f      	ldr	r0, [pc, #60]	; (800165c <MX_TIM2_Init+0xa0>)
 8001620:	f003 faf8 	bl	8004c14 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800162a:	f000 f961 	bl	80018f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001632:	2301      	movs	r3, #1
 8001634:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_TIM2_Init+0xa0>)
 8001646:	f002 ffed 	bl	8004624 <HAL_TIM_IC_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001650:	f000 f94e 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20004168 	.word	0x20004168

08001660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <MX_USART1_UART_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800166c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001698:	f003 fb4c 	bl	8004d34 <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016a2:	f000 f925 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20004124 	.word	0x20004124
 80016b0:	40011000 	.word	0x40011000

080016b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_USART2_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ec:	f003 fb22 	bl	8004d34 <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016f6:	f000 f8fb 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200041a8 	.word	0x200041a8
 8001704:	40004400 	.word	0x40004400

08001708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <MX_GPIO_Init+0xd4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a2d      	ldr	r2, [pc, #180]	; (80017dc <MX_GPIO_Init+0xd4>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <MX_GPIO_Init+0xd4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <MX_GPIO_Init+0xd4>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a26      	ldr	r2, [pc, #152]	; (80017dc <MX_GPIO_Init+0xd4>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <MX_GPIO_Init+0xd4>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <MX_GPIO_Init+0xd4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <MX_GPIO_Init+0xd4>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MX_GPIO_Init+0xd4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <MX_GPIO_Init+0xd4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a18      	ldr	r2, [pc, #96]	; (80017dc <MX_GPIO_Init+0xd4>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <MX_GPIO_Init+0xd4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001794:	4812      	ldr	r0, [pc, #72]	; (80017e0 <MX_GPIO_Init+0xd8>)
 8001796:	f000 fde7 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800179a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <MX_GPIO_Init+0xdc>)
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	480e      	ldr	r0, [pc, #56]	; (80017e8 <MX_GPIO_Init+0xe0>)
 80017b0:	f000 fc48 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80017b4:	f44f 7308 	mov.w	r3, #544	; 0x220
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_GPIO_Init+0xd8>)
 80017ce:	f000 fc39 	bl	8002044 <HAL_GPIO_Init>

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	10210000 	.word	0x10210000
 80017e8:	40020800 	.word	0x40020800

080017ec <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_CaptureCallback_HCSR04_Ch1(htim,&Distance);
 80017f4:	4903      	ldr	r1, [pc, #12]	; (8001804 <HAL_TIM_IC_CaptureCallback+0x18>)
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fb0a 	bl	8000e10 <HAL_TIM_IC_CaptureCallback_HCSR04_Ch1>

}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000035c 	.word	0x2000035c

08001808 <StartMPU6050Task>:


void StartMPU6050Task(void const * argument)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	  for(;;)
	  {
		  //Raw data
		  MPU6050_Get_Accel_RawData(&myAccelRaw);
 8001810:	4807      	ldr	r0, [pc, #28]	; (8001830 <StartMPU6050Task+0x28>)
 8001812:	f7ff fca9 	bl	8001168 <MPU6050_Get_Accel_RawData>
		  MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8001816:	4807      	ldr	r0, [pc, #28]	; (8001834 <StartMPU6050Task+0x2c>)
 8001818:	f7ff fd54 	bl	80012c4 <MPU6050_Get_Gyro_RawData>
		  //scaled
		 MPU6050_Get_Accel_Scale(&myAccelScaled);
 800181c:	4806      	ldr	r0, [pc, #24]	; (8001838 <StartMPU6050Task+0x30>)
 800181e:	f7ff fd09 	bl	8001234 <MPU6050_Get_Accel_Scale>
		  MPU6050_Get_Gyro_Scale(&myGyroScaled);
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <StartMPU6050Task+0x34>)
 8001824:	f7ff fd6a 	bl	80012fc <MPU6050_Get_Gyro_Scale>
		  osDelay(1);
 8001828:	2001      	movs	r0, #1
 800182a:	f003 ff9a 	bl	8005762 <osDelay>
		  MPU6050_Get_Accel_RawData(&myAccelRaw);
 800182e:	e7ef      	b.n	8001810 <StartMPU6050Task+0x8>
 8001830:	200041f4 	.word	0x200041f4
 8001834:	20004110 	.word	0x20004110
 8001838:	20004118 	.word	0x20004118
 800183c:	200041e8 	.word	0x200041e8

08001840 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char pData[20];
	memset(pData,0,sizeof(pData));
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2214      	movs	r2, #20
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f005 f992 	bl	8006b7a <memset>
	uint8_t Hexa[1]={0xFF};
 8001856:	23ff      	movs	r3, #255	; 0xff
 8001858:	723b      	strb	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	HCSR04_Read (&htim2);
 800185a:	4820      	ldr	r0, [pc, #128]	; (80018dc <StartDefaultTask+0x9c>)
 800185c:	f7ff fa9e 	bl	8000d9c <HCSR04_Read>
//	HAL_Delay(1);
	//Send Distance to Nextion display
	sprintf(pData,"n0.val=%d",Distance%400);
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <StartDefaultTask+0xa0>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <StartDefaultTask+0xa4>)
 8001868:	fb83 1302 	smull	r1, r3, r3, r2
 800186c:	11d9      	asrs	r1, r3, #7
 800186e:	17d3      	asrs	r3, r2, #31
 8001870:	1acb      	subs	r3, r1, r3
 8001872:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f107 000c 	add.w	r0, r7, #12
 8001880:	461a      	mov	r2, r3
 8001882:	4919      	ldr	r1, [pc, #100]	; (80018e8 <StartDefaultTask+0xa8>)
 8001884:	f005 f982 	bl	8006b8c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, strlen(pData), 3000);
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fcbf 	bl	8000210 <strlen>
 8001892:	4603      	mov	r3, r0
 8001894:	b29a      	uxth	r2, r3
 8001896:	f107 010c 	add.w	r1, r7, #12
 800189a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800189e:	4813      	ldr	r0, [pc, #76]	; (80018ec <StartDefaultTask+0xac>)
 80018a0:	f003 fa95 	bl	8004dce <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1,Hexa, sizeof(Hexa), 3000);
 80018a4:	f107 0108 	add.w	r1, r7, #8
 80018a8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018ac:	2201      	movs	r2, #1
 80018ae:	480f      	ldr	r0, [pc, #60]	; (80018ec <StartDefaultTask+0xac>)
 80018b0:	f003 fa8d 	bl	8004dce <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,Hexa, sizeof(Hexa), 3000);
 80018b4:	f107 0108 	add.w	r1, r7, #8
 80018b8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018bc:	2201      	movs	r2, #1
 80018be:	480b      	ldr	r0, [pc, #44]	; (80018ec <StartDefaultTask+0xac>)
 80018c0:	f003 fa85 	bl	8004dce <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,Hexa, sizeof(Hexa), 3000);
 80018c4:	f107 0108 	add.w	r1, r7, #8
 80018c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018cc:	2201      	movs	r2, #1
 80018ce:	4807      	ldr	r0, [pc, #28]	; (80018ec <StartDefaultTask+0xac>)
 80018d0:	f003 fa7d 	bl	8004dce <HAL_UART_Transmit>

    osDelay(1);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f003 ff44 	bl	8005762 <osDelay>
	HCSR04_Read (&htim2);
 80018da:	e7be      	b.n	800185a <StartDefaultTask+0x1a>
 80018dc:	20004168 	.word	0x20004168
 80018e0:	2000035c 	.word	0x2000035c
 80018e4:	51eb851f 	.word	0x51eb851f
 80018e8:	080073ec 	.word	0x080073ec
 80018ec:	20004124 	.word	0x20004124

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_MspInit+0x54>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_MspInit+0x54>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_MspInit+0x54>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_MspInit+0x54>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_MspInit+0x54>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <HAL_MspInit+0x54>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	210f      	movs	r1, #15
 8001942:	f06f 0001 	mvn.w	r0, #1
 8001946:	f000 fb46 	bl	8001fd6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_I2C_MspInit+0x84>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d12c      	bne.n	80019d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001996:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199c:	2312      	movs	r3, #18
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019a8:	2304      	movs	r3, #4
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	480c      	ldr	r0, [pc, #48]	; (80019e4 <HAL_I2C_MspInit+0x8c>)
 80019b4:	f000 fb46 	bl	8002044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 80019c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40005400 	.word	0x40005400
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020400 	.word	0x40020400

080019e8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a08:	d133      	bne.n	8001a72 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_TIM_IC_MspInit+0x94>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a1a      	ldr	r2, [pc, #104]	; (8001a7c <HAL_TIM_IC_MspInit+0x94>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_TIM_IC_MspInit+0x94>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_TIM_IC_MspInit+0x94>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <HAL_TIM_IC_MspInit+0x94>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_TIM_IC_MspInit+0x94>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a42:	2301      	movs	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a52:	2301      	movs	r3, #1
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <HAL_TIM_IC_MspInit+0x98>)
 8001a5e:	f000 faf1 	bl	8002044 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2105      	movs	r1, #5
 8001a66:	201c      	movs	r0, #28
 8001a68:	f000 fab5 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a6c:	201c      	movs	r0, #28
 8001a6e:	f000 face 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000

08001a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a41      	ldr	r2, [pc, #260]	; (8001ba8 <HAL_UART_MspInit+0x124>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d14b      	bne.n	8001b3e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	4b40      	ldr	r3, [pc, #256]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a3f      	ldr	r2, [pc, #252]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001ab0:	f043 0310 	orr.w	r3, r3, #16
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a38      	ldr	r2, [pc, #224]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b36      	ldr	r3, [pc, #216]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a31      	ldr	r2, [pc, #196]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	4826      	ldr	r0, [pc, #152]	; (8001bb0 <HAL_UART_MspInit+0x12c>)
 8001b18:	f000 fa94 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b1c:	2340      	movs	r3, #64	; 0x40
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b30:	f107 031c 	add.w	r3, r7, #28
 8001b34:	4619      	mov	r1, r3
 8001b36:	481f      	ldr	r0, [pc, #124]	; (8001bb4 <HAL_UART_MspInit+0x130>)
 8001b38:	f000 fa84 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b3c:	e030      	b.n	8001ba0 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1d      	ldr	r2, [pc, #116]	; (8001bb8 <HAL_UART_MspInit+0x134>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d12b      	bne.n	8001ba0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	4a16      	ldr	r2, [pc, #88]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b56:	6413      	str	r3, [r2, #64]	; 0x40
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6313      	str	r3, [r2, #48]	; 0x30
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_UART_MspInit+0x128>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b80:	230c      	movs	r3, #12
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b90:	2307      	movs	r3, #7
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <HAL_UART_MspInit+0x12c>)
 8001b9c:	f000 fa52 	bl	8002044 <HAL_GPIO_Init>
}
 8001ba0:	bf00      	nop
 8001ba2:	3730      	adds	r7, #48	; 0x30
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40011000 	.word	0x40011000
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020400 	.word	0x40020400
 8001bb8:	40004400 	.word	0x40004400

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf4:	f000 f8d2 	bl	8001d9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001bf8:	f004 fb2a 	bl	8006250 <xTaskGetSchedulerState>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d001      	beq.n	8001c06 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c02:	f004 fd61 	bl	80066c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <TIM2_IRQHandler+0x10>)
 8001c12:	f002 fbff 	bl	8004414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20004168 	.word	0x20004168

08001c20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <_sbrk+0x50>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x16>
		heap_end = &end;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <_sbrk+0x50>)
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <_sbrk+0x54>)
 8001c34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <_sbrk+0x50>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <_sbrk+0x50>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	466a      	mov	r2, sp
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d907      	bls.n	8001c5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c4a:	f004 ff61 	bl	8006b10 <__errno>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	230c      	movs	r3, #12
 8001c52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295
 8001c58:	e006      	b.n	8001c68 <_sbrk+0x48>
	}

	heap_end += incr;
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <_sbrk+0x50>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a03      	ldr	r2, [pc, #12]	; (8001c70 <_sbrk+0x50>)
 8001c64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000360 	.word	0x20000360
 8001c74:	20004208 	.word	0x20004208

08001c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <SystemInit+0x28>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <SystemInit+0x28>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SystemInit+0x28>)
 8001c8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c92:	609a      	str	r2, [r3, #8]
#endif
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ca8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001caa:	e003      	b.n	8001cb4 <LoopCopyDataInit>

08001cac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cb2:	3104      	adds	r1, #4

08001cb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cb4:	480b      	ldr	r0, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cbc:	d3f6      	bcc.n	8001cac <CopyDataInit>
  ldr  r2, =_sbss
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cc0:	e002      	b.n	8001cc8 <LoopFillZerobss>

08001cc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cc4:	f842 3b04 	str.w	r3, [r2], #4

08001cc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ccc:	d3f9      	bcc.n	8001cc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cce:	f7ff ffd3 	bl	8001c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f004 ff23 	bl	8006b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd6:	f7ff fb65 	bl	80013a4 <main>
  bx  lr    
 8001cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cdc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ce0:	0800745c 	.word	0x0800745c
  ldr  r0, =_sdata
 8001ce4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ce8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001cec:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001cf0:	20004204 	.word	0x20004204

08001cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC_IRQHandler>
	...

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <HAL_Init+0x40>)
 8001d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_Init+0x40>)
 8001d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_Init+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_Init+0x40>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 f94d 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	200f      	movs	r0, #15
 8001d28:	f000 f808 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2c:	f7ff fde8 	bl	8001900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00

08001d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_InitTick+0x54>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_InitTick+0x58>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f965 	bl	800202a <HAL_SYSTICK_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00e      	b.n	8001d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b0f      	cmp	r3, #15
 8001d6e:	d80a      	bhi.n	8001d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d70:	2200      	movs	r2, #0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f000 f92d 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <HAL_InitTick+0x5c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e000      	b.n	8001d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000004 	.word	0x20000004
 8001d94:	2000000c 	.word	0x2000000c
 8001d98:	20000008 	.word	0x20000008

08001d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_IncTick+0x20>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x24>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_IncTick+0x24>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	2000000c 	.word	0x2000000c
 8001dc0:	200041fc 	.word	0x200041fc

08001dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_GetTick+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	200041fc 	.word	0x200041fc

08001ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff ffee 	bl	8001dc4 <HAL_GetTick>
 8001de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d005      	beq.n	8001e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_Delay+0x40>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e02:	bf00      	nop
 8001e04:	f7ff ffde 	bl	8001dc4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d8f7      	bhi.n	8001e04 <HAL_Delay+0x28>
  {
  }
}
 8001e14:	bf00      	nop
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	2000000c 	.word	0x2000000c

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff3e 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff8e 	bl	8001f14 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5d 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff31 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e165      	b.n	800232c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 8154 	bne.w	8002326 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d00b      	beq.n	800209e <HAL_GPIO_Init+0x5a>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d007      	beq.n	800209e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002092:	2b11      	cmp	r3, #17
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b12      	cmp	r3, #18
 800209c:	d130      	bne.n	8002100 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 0201 	and.w	r2, r3, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0xfc>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b12      	cmp	r3, #18
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80ae 	beq.w	8002326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b5c      	ldr	r3, [pc, #368]	; (8002340 <HAL_GPIO_Init+0x2fc>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	4a5b      	ldr	r2, [pc, #364]	; (8002340 <HAL_GPIO_Init+0x2fc>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d8:	6453      	str	r3, [r2, #68]	; 0x44
 80021da:	4b59      	ldr	r3, [pc, #356]	; (8002340 <HAL_GPIO_Init+0x2fc>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e6:	4a57      	ldr	r2, [pc, #348]	; (8002344 <HAL_GPIO_Init+0x300>)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3302      	adds	r3, #2
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4e      	ldr	r2, [pc, #312]	; (8002348 <HAL_GPIO_Init+0x304>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d025      	beq.n	800225e <HAL_GPIO_Init+0x21a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4d      	ldr	r2, [pc, #308]	; (800234c <HAL_GPIO_Init+0x308>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01f      	beq.n	800225a <HAL_GPIO_Init+0x216>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4c      	ldr	r2, [pc, #304]	; (8002350 <HAL_GPIO_Init+0x30c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d019      	beq.n	8002256 <HAL_GPIO_Init+0x212>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4b      	ldr	r2, [pc, #300]	; (8002354 <HAL_GPIO_Init+0x310>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0x20e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4a      	ldr	r2, [pc, #296]	; (8002358 <HAL_GPIO_Init+0x314>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00d      	beq.n	800224e <HAL_GPIO_Init+0x20a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a49      	ldr	r2, [pc, #292]	; (800235c <HAL_GPIO_Init+0x318>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x206>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a48      	ldr	r2, [pc, #288]	; (8002360 <HAL_GPIO_Init+0x31c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_GPIO_Init+0x202>
 8002242:	2306      	movs	r3, #6
 8002244:	e00c      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 8002246:	2307      	movs	r3, #7
 8002248:	e00a      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 800224a:	2305      	movs	r3, #5
 800224c:	e008      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 800224e:	2304      	movs	r3, #4
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 8002252:	2303      	movs	r3, #3
 8002254:	e004      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 8002256:	2302      	movs	r3, #2
 8002258:	e002      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x21c>
 800225e:	2300      	movs	r3, #0
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	f002 0203 	and.w	r2, r2, #3
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	4093      	lsls	r3, r2
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002270:	4934      	ldr	r1, [pc, #208]	; (8002344 <HAL_GPIO_Init+0x300>)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227e:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_GPIO_Init+0x320>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a2:	4a30      	ldr	r2, [pc, #192]	; (8002364 <HAL_GPIO_Init+0x320>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <HAL_GPIO_Init+0x320>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022cc:	4a25      	ldr	r2, [pc, #148]	; (8002364 <HAL_GPIO_Init+0x320>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_GPIO_Init+0x320>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022f6:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_GPIO_Init+0x320>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <HAL_GPIO_Init+0x320>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002320:	4a10      	ldr	r2, [pc, #64]	; (8002364 <HAL_GPIO_Init+0x320>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3301      	adds	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b0f      	cmp	r3, #15
 8002330:	f67f ae96 	bls.w	8002060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002334:	bf00      	nop
 8002336:	3724      	adds	r7, #36	; 0x24
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40023800 	.word	0x40023800
 8002344:	40013800 	.word	0x40013800
 8002348:	40020000 	.word	0x40020000
 800234c:	40020400 	.word	0x40020400
 8002350:	40020800 	.word	0x40020800
 8002354:	40020c00 	.word	0x40020c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40021400 	.word	0x40021400
 8002360:	40021800 	.word	0x40021800
 8002364:	40013c00 	.word	0x40013c00

08002368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
 8002374:	4613      	mov	r3, r2
 8002376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002378:	787b      	ldrb	r3, [r7, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002384:	e003      	b.n	800238e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	041a      	lsls	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	619a      	str	r2, [r3, #24]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e11f      	b.n	80025ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fac8 	bl	8001958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	; 0x24
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002400:	f001 fb52 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 8002404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a7b      	ldr	r2, [pc, #492]	; (80025f8 <HAL_I2C_Init+0x25c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d807      	bhi.n	8002420 <HAL_I2C_Init+0x84>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a7a      	ldr	r2, [pc, #488]	; (80025fc <HAL_I2C_Init+0x260>)
 8002414:	4293      	cmp	r3, r2
 8002416:	bf94      	ite	ls
 8002418:	2301      	movls	r3, #1
 800241a:	2300      	movhi	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e006      	b.n	800242e <HAL_I2C_Init+0x92>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a77      	ldr	r2, [pc, #476]	; (8002600 <HAL_I2C_Init+0x264>)
 8002424:	4293      	cmp	r3, r2
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0db      	b.n	80025ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a72      	ldr	r2, [pc, #456]	; (8002604 <HAL_I2C_Init+0x268>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9b      	lsrs	r3, r3, #18
 8002440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a64      	ldr	r2, [pc, #400]	; (80025f8 <HAL_I2C_Init+0x25c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d802      	bhi.n	8002470 <HAL_I2C_Init+0xd4>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3301      	adds	r3, #1
 800246e:	e009      	b.n	8002484 <HAL_I2C_Init+0xe8>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	4a63      	ldr	r2, [pc, #396]	; (8002608 <HAL_I2C_Init+0x26c>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	3301      	adds	r3, #1
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002496:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4956      	ldr	r1, [pc, #344]	; (80025f8 <HAL_I2C_Init+0x25c>)
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d80d      	bhi.n	80024c0 <HAL_I2C_Init+0x124>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1e59      	subs	r1, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	bf38      	it	cc
 80024bc:	2304      	movcc	r3, #4
 80024be:	e04f      	b.n	8002560 <HAL_I2C_Init+0x1c4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d111      	bne.n	80024ec <HAL_I2C_Init+0x150>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e58      	subs	r0, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e012      	b.n	8002512 <HAL_I2C_Init+0x176>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e58      	subs	r0, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	0099      	lsls	r1, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Init+0x17e>
 8002516:	2301      	movs	r3, #1
 8002518:	e022      	b.n	8002560 <HAL_I2C_Init+0x1c4>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10e      	bne.n	8002540 <HAL_I2C_Init+0x1a4>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1e58      	subs	r0, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	440b      	add	r3, r1
 8002530:	fbb0 f3f3 	udiv	r3, r0, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800253e:	e00f      	b.n	8002560 <HAL_I2C_Init+0x1c4>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1e58      	subs	r0, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	0099      	lsls	r1, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	fbb0 f3f3 	udiv	r3, r0, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	6809      	ldr	r1, [r1, #0]
 8002564:	4313      	orrs	r3, r2
 8002566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800258e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6911      	ldr	r1, [r2, #16]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	4311      	orrs	r1, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	000186a0 	.word	0x000186a0
 80025fc:	001e847f 	.word	0x001e847f
 8002600:	003d08ff 	.word	0x003d08ff
 8002604:	431bde83 	.word	0x431bde83
 8002608:	10624dd3 	.word	0x10624dd3

0800260c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	461a      	mov	r2, r3
 8002618:	460b      	mov	r3, r1
 800261a:	817b      	strh	r3, [r7, #10]
 800261c:	4613      	mov	r3, r2
 800261e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff fbd0 	bl	8001dc4 <HAL_GetTick>
 8002624:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b20      	cmp	r3, #32
 8002630:	f040 80e0 	bne.w	80027f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2319      	movs	r3, #25
 800263a:	2201      	movs	r2, #1
 800263c:	4970      	ldr	r1, [pc, #448]	; (8002800 <HAL_I2C_Master_Transmit+0x1f4>)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 ff62 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800264a:	2302      	movs	r3, #2
 800264c:	e0d3      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_I2C_Master_Transmit+0x50>
 8002658:	2302      	movs	r3, #2
 800265a:	e0cc      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x1ea>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b01      	cmp	r3, #1
 8002670:	d007      	beq.n	8002682 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002690:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2221      	movs	r2, #33	; 0x21
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2210      	movs	r2, #16
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	893a      	ldrh	r2, [r7, #8]
 80026b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4a50      	ldr	r2, [pc, #320]	; (8002804 <HAL_I2C_Master_Transmit+0x1f8>)
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026c4:	8979      	ldrh	r1, [r7, #10]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fce8 	bl	80030a0 <I2C_MasterRequestWrite>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e08d      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026f0:	e066      	b.n	80027c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	6a39      	ldr	r1, [r7, #32]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 ffdc 	bl	80036b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	2b04      	cmp	r3, #4
 8002708:	d107      	bne.n	800271a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002718:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06b      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b04      	cmp	r3, #4
 800275a:	d11b      	bne.n	8002794 <HAL_I2C_Master_Transmit+0x188>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	d017      	beq.n	8002794 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	6a39      	ldr	r1, [r7, #32]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 ffcc 	bl	8003736 <I2C_WaitOnBTFFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00d      	beq.n	80027c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d107      	bne.n	80027bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e01a      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d194      	bne.n	80026f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e000      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
  }
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	00100002 	.word	0x00100002
 8002804:	ffff0000 	.word	0xffff0000

08002808 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	461a      	mov	r2, r3
 8002814:	460b      	mov	r3, r1
 8002816:	817b      	strh	r3, [r7, #10]
 8002818:	4613      	mov	r3, r2
 800281a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff fad2 	bl	8001dc4 <HAL_GetTick>
 8002820:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b20      	cmp	r3, #32
 800282c:	f040 820b 	bne.w	8002c46 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2319      	movs	r3, #25
 8002836:	2201      	movs	r2, #1
 8002838:	497c      	ldr	r1, [pc, #496]	; (8002a2c <HAL_I2C_Master_Receive+0x224>)
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 fe64 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002846:	2302      	movs	r3, #2
 8002848:	e1fe      	b.n	8002c48 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_I2C_Master_Receive+0x50>
 8002854:	2302      	movs	r3, #2
 8002856:	e1f7      	b.n	8002c48 <HAL_I2C_Master_Receive+0x440>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d007      	beq.n	800287e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2222      	movs	r2, #34	; 0x22
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2210      	movs	r2, #16
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	893a      	ldrh	r2, [r7, #8]
 80028ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4a5c      	ldr	r2, [pc, #368]	; (8002a30 <HAL_I2C_Master_Receive+0x228>)
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028c0:	8979      	ldrh	r1, [r7, #10]
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fc6c 	bl	80031a4 <I2C_MasterRequestRead>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e1b8      	b.n	8002c48 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d113      	bne.n	8002906 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028de:	2300      	movs	r3, #0
 80028e0:	623b      	str	r3, [r7, #32]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	623b      	str	r3, [r7, #32]
 80028f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e18c      	b.n	8002c20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	2b01      	cmp	r3, #1
 800290c:	d11b      	bne.n	8002946 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e16c      	b.n	8002c20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	2b02      	cmp	r3, #2
 800294c:	d11b      	bne.n	8002986 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800296c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	e14c      	b.n	8002c20 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002994:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029ac:	e138      	b.n	8002c20 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	f200 80f1 	bhi.w	8002b9a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d123      	bne.n	8002a08 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fef7 	bl	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e139      	b.n	8002c48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a06:	e10b      	b.n	8002c20 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d14e      	bne.n	8002aae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	2200      	movs	r2, #0
 8002a18:	4906      	ldr	r1, [pc, #24]	; (8002a34 <HAL_I2C_Master_Receive+0x22c>)
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fd74 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e10e      	b.n	8002c48 <HAL_I2C_Master_Receive+0x440>
 8002a2a:	bf00      	nop
 8002a2c:	00100002 	.word	0x00100002
 8002a30:	ffff0000 	.word	0xffff0000
 8002a34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aac:	e0b8      	b.n	8002c20 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4966      	ldr	r1, [pc, #408]	; (8002c50 <HAL_I2C_Master_Receive+0x448>)
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fd25 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0bf      	b.n	8002c48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	2200      	movs	r2, #0
 8002b12:	494f      	ldr	r1, [pc, #316]	; (8002c50 <HAL_I2C_Master_Receive+0x448>)
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fcf7 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e091      	b.n	8002c48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b98:	e042      	b.n	8002c20 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fe0a 	bl	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e04c      	b.n	8002c48 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d118      	bne.n	8002c20 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f aec2 	bne.w	80029ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e000      	b.n	8002c48 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c46:	2302      	movs	r3, #2
  }
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3728      	adds	r7, #40	; 0x28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	00010004 	.word	0x00010004

08002c54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08c      	sub	sp, #48	; 0x30
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4603      	mov	r3, r0
 8002c64:	817b      	strh	r3, [r7, #10]
 8002c66:	460b      	mov	r3, r1
 8002c68:	813b      	strh	r3, [r7, #8]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c6e:	f7ff f8a9 	bl	8001dc4 <HAL_GetTick>
 8002c72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	f040 8208 	bne.w	8003092 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2319      	movs	r3, #25
 8002c88:	2201      	movs	r2, #1
 8002c8a:	497b      	ldr	r1, [pc, #492]	; (8002e78 <HAL_I2C_Mem_Read+0x224>)
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fc3b 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e1fb      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_I2C_Mem_Read+0x56>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e1f4      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d007      	beq.n	8002cd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2222      	movs	r2, #34	; 0x22
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4a5b      	ldr	r2, [pc, #364]	; (8002e7c <HAL_I2C_Mem_Read+0x228>)
 8002d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d12:	88f8      	ldrh	r0, [r7, #6]
 8002d14:	893a      	ldrh	r2, [r7, #8]
 8002d16:	8979      	ldrh	r1, [r7, #10]
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	4603      	mov	r3, r0
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fb0a 	bl	800333c <I2C_RequestMemoryRead>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1b0      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d113      	bne.n	8002d62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	623b      	str	r3, [r7, #32]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	623b      	str	r3, [r7, #32]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	623b      	str	r3, [r7, #32]
 8002d4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e184      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d11b      	bne.n	8002da2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e164      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d11b      	bne.n	8002de2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	e144      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002df8:	e138      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	f200 80f1 	bhi.w	8002fe6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d123      	bne.n	8002e54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fcd1 	bl	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e139      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e52:	e10b      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d14e      	bne.n	8002efa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	2200      	movs	r2, #0
 8002e64:	4906      	ldr	r1, [pc, #24]	; (8002e80 <HAL_I2C_Mem_Read+0x22c>)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fb4e 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e10e      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
 8002e76:	bf00      	nop
 8002e78:	00100002 	.word	0x00100002
 8002e7c:	ffff0000 	.word	0xffff0000
 8002e80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ef8:	e0b8      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	2200      	movs	r2, #0
 8002f02:	4966      	ldr	r1, [pc, #408]	; (800309c <HAL_I2C_Mem_Read+0x448>)
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 faff 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0bf      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	494f      	ldr	r1, [pc, #316]	; (800309c <HAL_I2C_Mem_Read+0x448>)
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fad1 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e091      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fe4:	e042      	b.n	800306c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fbe4 	bl	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e04c      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d118      	bne.n	800306c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	f47f aec2 	bne.w	8002dfa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3728      	adds	r7, #40	; 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	00010004 	.word	0x00010004

080030a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	460b      	mov	r3, r1
 80030ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d006      	beq.n	80030ca <I2C_MasterRequestWrite+0x2a>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d003      	beq.n	80030ca <I2C_MasterRequestWrite+0x2a>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030c8:	d108      	bne.n	80030dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e00b      	b.n	80030f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	2b12      	cmp	r3, #18
 80030e2:	d107      	bne.n	80030f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fa01 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00c      	beq.n	8003126 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e035      	b.n	8003192 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800312e:	d108      	bne.n	8003142 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003130:	897b      	ldrh	r3, [r7, #10]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800313e:	611a      	str	r2, [r3, #16]
 8003140:	e01b      	b.n	800317a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003142:	897b      	ldrh	r3, [r7, #10]
 8003144:	11db      	asrs	r3, r3, #7
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f003 0306 	and.w	r3, r3, #6
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f063 030f 	orn	r3, r3, #15
 8003152:	b2da      	uxtb	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	490f      	ldr	r1, [pc, #60]	; (800319c <I2C_MasterRequestWrite+0xfc>)
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 fa28 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e010      	b.n	8003192 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003170:	897b      	ldrh	r3, [r7, #10]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4908      	ldr	r1, [pc, #32]	; (80031a0 <I2C_MasterRequestWrite+0x100>)
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 fa18 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	00010008 	.word	0x00010008
 80031a0:	00010002 	.word	0x00010002

080031a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	460b      	mov	r3, r1
 80031b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d006      	beq.n	80031de <I2C_MasterRequestRead+0x3a>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d003      	beq.n	80031de <I2C_MasterRequestRead+0x3a>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031dc:	d108      	bne.n	80031f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	e00b      	b.n	8003208 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	2b11      	cmp	r3, #17
 80031f6:	d107      	bne.n	8003208 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003206:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f977 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00c      	beq.n	800323a <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e078      	b.n	800332c <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003242:	d108      	bne.n	8003256 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003244:	897b      	ldrh	r3, [r7, #10]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	611a      	str	r2, [r3, #16]
 8003254:	e05e      	b.n	8003314 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	11db      	asrs	r3, r3, #7
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f003 0306 	and.w	r3, r3, #6
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f063 030f 	orn	r3, r3, #15
 8003266:	b2da      	uxtb	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4930      	ldr	r1, [pc, #192]	; (8003334 <I2C_MasterRequestRead+0x190>)
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f99e 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e053      	b.n	800332c <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003284:	897b      	ldrh	r3, [r7, #10]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4929      	ldr	r1, [pc, #164]	; (8003338 <I2C_MasterRequestRead+0x194>)
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f98e 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e043      	b.n	800332c <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c8:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f916 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00c      	beq.n	80032fc <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e017      	b.n	800332c <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80032fc:	897b      	ldrh	r3, [r7, #10]
 80032fe:	11db      	asrs	r3, r3, #7
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f003 0306 	and.w	r3, r3, #6
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f063 030e 	orn	r3, r3, #14
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4907      	ldr	r1, [pc, #28]	; (8003338 <I2C_MasterRequestRead+0x194>)
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f94b 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	00010008 	.word	0x00010008
 8003338:	00010002 	.word	0x00010002

0800333c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	4608      	mov	r0, r1
 8003346:	4611      	mov	r1, r2
 8003348:	461a      	mov	r2, r3
 800334a:	4603      	mov	r3, r0
 800334c:	817b      	strh	r3, [r7, #10]
 800334e:	460b      	mov	r3, r1
 8003350:	813b      	strh	r3, [r7, #8]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003364:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003374:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	2200      	movs	r2, #0
 800337e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f8c0 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00c      	beq.n	80033a8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0a9      	b.n	80034fc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033a8:	897b      	ldrh	r3, [r7, #10]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	6a3a      	ldr	r2, [r7, #32]
 80033bc:	4951      	ldr	r1, [pc, #324]	; (8003504 <I2C_RequestMemoryRead+0x1c8>)
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f8f9 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e096      	b.n	80034fc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e6:	6a39      	ldr	r1, [r7, #32]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f963 	bl	80036b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00d      	beq.n	8003410 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d107      	bne.n	800340c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e075      	b.n	80034fc <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d105      	bne.n	8003422 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003416:	893b      	ldrh	r3, [r7, #8]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	611a      	str	r2, [r3, #16]
 8003420:	e021      	b.n	8003466 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003422:	893b      	ldrh	r3, [r7, #8]
 8003424:	0a1b      	lsrs	r3, r3, #8
 8003426:	b29b      	uxth	r3, r3
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003432:	6a39      	ldr	r1, [r7, #32]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f93d 	bl	80036b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00d      	beq.n	800345c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	2b04      	cmp	r3, #4
 8003446:	d107      	bne.n	8003458 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003456:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e04f      	b.n	80034fc <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800345c:	893b      	ldrh	r3, [r7, #8]
 800345e:	b2da      	uxtb	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	6a39      	ldr	r1, [r7, #32]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f922 	bl	80036b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b04      	cmp	r3, #4
 800347c:	d107      	bne.n	800348e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e034      	b.n	80034fc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f82a 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e013      	b.n	80034fc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034d4:	897b      	ldrh	r3, [r7, #10]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	6a3a      	ldr	r2, [r7, #32]
 80034e8:	4906      	ldr	r1, [pc, #24]	; (8003504 <I2C_RequestMemoryRead+0x1c8>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f863 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	00010002 	.word	0x00010002

08003508 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003518:	e025      	b.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d021      	beq.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003522:	f7fe fc4f 	bl	8001dc4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d116      	bne.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e023      	b.n	80035ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10d      	bne.n	800358c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	43da      	mvns	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4013      	ands	r3, r2
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf0c      	ite	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	2300      	movne	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	e00c      	b.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	43da      	mvns	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4013      	ands	r3, r2
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d0b6      	beq.n	800351a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c4:	e051      	b.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d4:	d123      	bne.n	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f043 0204 	orr.w	r2, r3, #4
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e046      	b.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d021      	beq.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fe fbcd 	bl	8001dc4 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d116      	bne.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f043 0220 	orr.w	r2, r3, #32
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e020      	b.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d10c      	bne.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	43da      	mvns	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4013      	ands	r3, r2
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	e00b      	b.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	43da      	mvns	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4013      	ands	r3, r2
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d18d      	bne.n	80035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c0:	e02d      	b.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f8ce 	bl	8003864 <I2C_IsAcknowledgeFailed>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e02d      	b.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d021      	beq.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fe fb73 	bl	8001dc4 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d116      	bne.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e007      	b.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d1ca      	bne.n	80036c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003742:	e02d      	b.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f88d 	bl	8003864 <I2C_IsAcknowledgeFailed>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e02d      	b.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d021      	beq.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375c:	f7fe fb32 	bl	8001dc4 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	d302      	bcc.n	8003772 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d116      	bne.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f043 0220 	orr.w	r2, r3, #32
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e007      	b.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d1ca      	bne.n	8003744 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037c4:	e042      	b.n	800384c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d119      	bne.n	8003808 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0210 	mvn.w	r2, #16
 80037dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e029      	b.n	800385c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7fe fadc 	bl	8001dc4 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d116      	bne.n	800384c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e007      	b.n	800385c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d1b5      	bne.n	80037c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387a:	d11b      	bne.n	80038b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003884:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f043 0204 	orr.w	r2, r3, #4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0cc      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d8:	4b68      	ldr	r3, [pc, #416]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d90c      	bls.n	8003900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b65      	ldr	r3, [pc, #404]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b63      	ldr	r3, [pc, #396]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0b8      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d020      	beq.n	800394e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003918:	4b59      	ldr	r3, [pc, #356]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a58      	ldr	r2, [pc, #352]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003930:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a52      	ldr	r2, [pc, #328]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800393a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800393c:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	494d      	ldr	r1, [pc, #308]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d044      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d119      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e07f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d003      	beq.n	8003982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397e:	2b03      	cmp	r3, #3
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003982:	4b3f      	ldr	r3, [pc, #252]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003992:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e067      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a2:	4b37      	ldr	r3, [pc, #220]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 0203 	bic.w	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4934      	ldr	r1, [pc, #208]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b4:	f7fe fa06 	bl	8001dc4 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039bc:	f7fe fa02 	bl	8001dc4 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e04f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 020c 	and.w	r2, r3, #12
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d1eb      	bne.n	80039bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e4:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d20c      	bcs.n	8003a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e032      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a18:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4916      	ldr	r1, [pc, #88]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	490e      	ldr	r1, [pc, #56]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a4a:	f000 f855 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003a4e:	4601      	mov	r1, r0
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	5cd3      	ldrb	r3, [r2, r3]
 8003a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a62:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe f966 	bl	8001d3c <HAL_InitTick>

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40023c00 	.word	0x40023c00
 8003a80:	40023800 	.word	0x40023800
 8003a84:	08007400 	.word	0x08007400
 8003a88:	20000004 	.word	0x20000004
 8003a8c:	20000008 	.word	0x20000008

08003a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000004 	.word	0x20000004

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aac:	f7ff fff0 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0a9b      	lsrs	r3, r3, #10
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4a03      	ldr	r2, [pc, #12]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003abe:	5cd3      	ldrb	r3, [r2, r3]
 8003ac0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	08007410 	.word	0x08007410

08003ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ad4:	f7ff ffdc 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ad8:	4601      	mov	r1, r0
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	0b5b      	lsrs	r3, r3, #13
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4a03      	ldr	r2, [pc, #12]	; (8003af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40023800 	.word	0x40023800
 8003af4:	08007410 	.word	0x08007410

08003af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b12:	4bc6      	ldr	r3, [pc, #792]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x334>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	f200 817e 	bhi.w	8003e1c <HAL_RCC_GetSysClockFreq+0x324>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <HAL_RCC_GetSysClockFreq+0x30>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b5d 	.word	0x08003b5d
 8003b2c:	08003e1d 	.word	0x08003e1d
 8003b30:	08003e1d 	.word	0x08003e1d
 8003b34:	08003e1d 	.word	0x08003e1d
 8003b38:	08003b63 	.word	0x08003b63
 8003b3c:	08003e1d 	.word	0x08003e1d
 8003b40:	08003e1d 	.word	0x08003e1d
 8003b44:	08003e1d 	.word	0x08003e1d
 8003b48:	08003b69 	.word	0x08003b69
 8003b4c:	08003e1d 	.word	0x08003e1d
 8003b50:	08003e1d 	.word	0x08003e1d
 8003b54:	08003e1d 	.word	0x08003e1d
 8003b58:	08003cc5 	.word	0x08003cc5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b5c:	4bb4      	ldr	r3, [pc, #720]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x338>)
 8003b5e:	613b      	str	r3, [r7, #16]
       break;
 8003b60:	e15f      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b62:	4bb4      	ldr	r3, [pc, #720]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003b64:	613b      	str	r3, [r7, #16]
      break;
 8003b66:	e15c      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b68:	4bb0      	ldr	r3, [pc, #704]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x334>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b70:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b72:	4bae      	ldr	r3, [pc, #696]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x334>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d04a      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7e:	4bab      	ldr	r3, [pc, #684]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x334>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	f04f 0400 	mov.w	r4, #0
 8003b88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	ea03 0501 	and.w	r5, r3, r1
 8003b94:	ea04 0602 	and.w	r6, r4, r2
 8003b98:	4629      	mov	r1, r5
 8003b9a:	4632      	mov	r2, r6
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	f04f 0400 	mov.w	r4, #0
 8003ba4:	0154      	lsls	r4, r2, #5
 8003ba6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003baa:	014b      	lsls	r3, r1, #5
 8003bac:	4619      	mov	r1, r3
 8003bae:	4622      	mov	r2, r4
 8003bb0:	1b49      	subs	r1, r1, r5
 8003bb2:	eb62 0206 	sbc.w	r2, r2, r6
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	f04f 0400 	mov.w	r4, #0
 8003bbe:	0194      	lsls	r4, r2, #6
 8003bc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bc4:	018b      	lsls	r3, r1, #6
 8003bc6:	1a5b      	subs	r3, r3, r1
 8003bc8:	eb64 0402 	sbc.w	r4, r4, r2
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	00e2      	lsls	r2, r4, #3
 8003bd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bda:	00d9      	lsls	r1, r3, #3
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4614      	mov	r4, r2
 8003be0:	195b      	adds	r3, r3, r5
 8003be2:	eb44 0406 	adc.w	r4, r4, r6
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	0262      	lsls	r2, r4, #9
 8003bf0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003bf4:	0259      	lsls	r1, r3, #9
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f04f 0400 	mov.w	r4, #0
 8003c04:	461a      	mov	r2, r3
 8003c06:	4623      	mov	r3, r4
 8003c08:	f7fc ff48 	bl	8000a9c <__aeabi_uldivmod>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	460c      	mov	r4, r1
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e049      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c14:	4b85      	ldr	r3, [pc, #532]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x334>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	099b      	lsrs	r3, r3, #6
 8003c1a:	f04f 0400 	mov.w	r4, #0
 8003c1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	ea03 0501 	and.w	r5, r3, r1
 8003c2a:	ea04 0602 	and.w	r6, r4, r2
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4632      	mov	r2, r6
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	f04f 0400 	mov.w	r4, #0
 8003c3a:	0154      	lsls	r4, r2, #5
 8003c3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c40:	014b      	lsls	r3, r1, #5
 8003c42:	4619      	mov	r1, r3
 8003c44:	4622      	mov	r2, r4
 8003c46:	1b49      	subs	r1, r1, r5
 8003c48:	eb62 0206 	sbc.w	r2, r2, r6
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	f04f 0400 	mov.w	r4, #0
 8003c54:	0194      	lsls	r4, r2, #6
 8003c56:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c5a:	018b      	lsls	r3, r1, #6
 8003c5c:	1a5b      	subs	r3, r3, r1
 8003c5e:	eb64 0402 	sbc.w	r4, r4, r2
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	00e2      	lsls	r2, r4, #3
 8003c6c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c70:	00d9      	lsls	r1, r3, #3
 8003c72:	460b      	mov	r3, r1
 8003c74:	4614      	mov	r4, r2
 8003c76:	195b      	adds	r3, r3, r5
 8003c78:	eb44 0406 	adc.w	r4, r4, r6
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	02a2      	lsls	r2, r4, #10
 8003c86:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c8a:	0299      	lsls	r1, r3, #10
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4614      	mov	r4, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	4621      	mov	r1, r4
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f04f 0400 	mov.w	r4, #0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4623      	mov	r3, r4
 8003c9e:	f7fc fefd 	bl	8000a9c <__aeabi_uldivmod>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ca8:	4b60      	ldr	r3, [pc, #384]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x334>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	613b      	str	r3, [r7, #16]
      break;
 8003cc2:	e0ae      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc4:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x334>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ccc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cce:	4b57      	ldr	r3, [pc, #348]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x334>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d04a      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cda:	4b54      	ldr	r3, [pc, #336]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x334>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	099b      	lsrs	r3, r3, #6
 8003ce0:	f04f 0400 	mov.w	r4, #0
 8003ce4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	ea03 0501 	and.w	r5, r3, r1
 8003cf0:	ea04 0602 	and.w	r6, r4, r2
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	4632      	mov	r2, r6
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	f04f 0400 	mov.w	r4, #0
 8003d00:	0154      	lsls	r4, r2, #5
 8003d02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d06:	014b      	lsls	r3, r1, #5
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	1b49      	subs	r1, r1, r5
 8003d0e:	eb62 0206 	sbc.w	r2, r2, r6
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	f04f 0400 	mov.w	r4, #0
 8003d1a:	0194      	lsls	r4, r2, #6
 8003d1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d20:	018b      	lsls	r3, r1, #6
 8003d22:	1a5b      	subs	r3, r3, r1
 8003d24:	eb64 0402 	sbc.w	r4, r4, r2
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	00e2      	lsls	r2, r4, #3
 8003d32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d36:	00d9      	lsls	r1, r3, #3
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4614      	mov	r4, r2
 8003d3c:	195b      	adds	r3, r3, r5
 8003d3e:	eb44 0406 	adc.w	r4, r4, r6
 8003d42:	f04f 0100 	mov.w	r1, #0
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	0262      	lsls	r2, r4, #9
 8003d4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d50:	0259      	lsls	r1, r3, #9
 8003d52:	460b      	mov	r3, r1
 8003d54:	4614      	mov	r4, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	4621      	mov	r1, r4
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f04f 0400 	mov.w	r4, #0
 8003d60:	461a      	mov	r2, r3
 8003d62:	4623      	mov	r3, r4
 8003d64:	f7fc fe9a 	bl	8000a9c <__aeabi_uldivmod>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e049      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d70:	4b2e      	ldr	r3, [pc, #184]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x334>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	f04f 0400 	mov.w	r4, #0
 8003d7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	ea03 0501 	and.w	r5, r3, r1
 8003d86:	ea04 0602 	and.w	r6, r4, r2
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	4632      	mov	r2, r6
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	f04f 0400 	mov.w	r4, #0
 8003d96:	0154      	lsls	r4, r2, #5
 8003d98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d9c:	014b      	lsls	r3, r1, #5
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4622      	mov	r2, r4
 8003da2:	1b49      	subs	r1, r1, r5
 8003da4:	eb62 0206 	sbc.w	r2, r2, r6
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	f04f 0400 	mov.w	r4, #0
 8003db0:	0194      	lsls	r4, r2, #6
 8003db2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003db6:	018b      	lsls	r3, r1, #6
 8003db8:	1a5b      	subs	r3, r3, r1
 8003dba:	eb64 0402 	sbc.w	r4, r4, r2
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	00e2      	lsls	r2, r4, #3
 8003dc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dcc:	00d9      	lsls	r1, r3, #3
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	195b      	adds	r3, r3, r5
 8003dd4:	eb44 0406 	adc.w	r4, r4, r6
 8003dd8:	f04f 0100 	mov.w	r1, #0
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	02a2      	lsls	r2, r4, #10
 8003de2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003de6:	0299      	lsls	r1, r3, #10
 8003de8:	460b      	mov	r3, r1
 8003dea:	4614      	mov	r4, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	4621      	mov	r1, r4
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f04f 0400 	mov.w	r4, #0
 8003df6:	461a      	mov	r2, r3
 8003df8:	4623      	mov	r3, r4
 8003dfa:	f7fc fe4f 	bl	8000a9c <__aeabi_uldivmod>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	460c      	mov	r4, r1
 8003e02:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e04:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x334>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0f1b      	lsrs	r3, r3, #28
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	613b      	str	r3, [r7, #16]
      break;
 8003e1a:	e002      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x338>)
 8003e1e:	613b      	str	r3, [r7, #16]
      break;
 8003e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e22:	693b      	ldr	r3, [r7, #16]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	371c      	adds	r7, #28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	007a1200 	.word	0x007a1200

08003e38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8083 	beq.w	8003f58 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e52:	4b95      	ldr	r3, [pc, #596]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d019      	beq.n	8003e92 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e5e:	4b92      	ldr	r3, [pc, #584]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d106      	bne.n	8003e78 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e6a:	4b8f      	ldr	r3, [pc, #572]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e76:	d00c      	beq.n	8003e92 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e78:	4b8b      	ldr	r3, [pc, #556]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e80:	2b0c      	cmp	r3, #12
 8003e82:	d112      	bne.n	8003eaa <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e84:	4b88      	ldr	r3, [pc, #544]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e90:	d10b      	bne.n	8003eaa <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e92:	4b85      	ldr	r3, [pc, #532]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d05b      	beq.n	8003f56 <HAL_RCC_OscConfig+0x11e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d157      	bne.n	8003f56 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e216      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb2:	d106      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x8a>
 8003eb4:	4b7c      	ldr	r3, [pc, #496]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a7b      	ldr	r2, [pc, #492]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	e01d      	b.n	8003efe <HAL_RCC_OscConfig+0xc6>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eca:	d10c      	bne.n	8003ee6 <HAL_RCC_OscConfig+0xae>
 8003ecc:	4b76      	ldr	r3, [pc, #472]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a75      	ldr	r2, [pc, #468]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	4b73      	ldr	r3, [pc, #460]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a72      	ldr	r2, [pc, #456]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	e00b      	b.n	8003efe <HAL_RCC_OscConfig+0xc6>
 8003ee6:	4b70      	ldr	r3, [pc, #448]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a6f      	ldr	r2, [pc, #444]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	4b6d      	ldr	r3, [pc, #436]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a6c      	ldr	r2, [pc, #432]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003efc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d013      	beq.n	8003f2e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f06:	f7fd ff5d 	bl	8001dc4 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f0e:	f7fd ff59 	bl	8001dc4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	; 0x64
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e1db      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f20:	4b61      	ldr	r3, [pc, #388]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0xd6>
 8003f2c:	e014      	b.n	8003f58 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7fd ff49 	bl	8001dc4 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f36:	f7fd ff45 	bl	8001dc4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	; 0x64
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e1c7      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f48:	4b57      	ldr	r3, [pc, #348]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f0      	bne.n	8003f36 <HAL_RCC_OscConfig+0xfe>
 8003f54:	e000      	b.n	8003f58 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f56:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d06f      	beq.n	8004044 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f64:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d017      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f70:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f7c:	4b4a      	ldr	r3, [pc, #296]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f88:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f90:	2b0c      	cmp	r3, #12
 8003f92:	d11c      	bne.n	8003fce <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f94:	4b44      	ldr	r3, [pc, #272]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d116      	bne.n	8003fce <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa0:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x180>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e18f      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb8:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4938      	ldr	r1, [pc, #224]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fcc:	e03a      	b.n	8004044 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d020      	beq.n	8004018 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd6:	4b35      	ldr	r3, [pc, #212]	; (80040ac <HAL_RCC_OscConfig+0x274>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fd fef2 	bl	8001dc4 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe4:	f7fd feee 	bl	8001dc4 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e170      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff6:	4b2c      	ldr	r3, [pc, #176]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004002:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4925      	ldr	r1, [pc, #148]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004012:	4313      	orrs	r3, r2
 8004014:	600b      	str	r3, [r1, #0]
 8004016:	e015      	b.n	8004044 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004018:	4b24      	ldr	r3, [pc, #144]	; (80040ac <HAL_RCC_OscConfig+0x274>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401e:	f7fd fed1 	bl	8001dc4 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004026:	f7fd fecd 	bl	8001dc4 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e14f      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f0      	bne.n	8004026 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d037      	beq.n	80040c0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d016      	beq.n	8004086 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004058:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <HAL_RCC_OscConfig+0x278>)
 800405a:	2201      	movs	r2, #1
 800405c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fd feb1 	bl	8001dc4 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004066:	f7fd fead 	bl	8001dc4 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e12f      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 800407a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x22e>
 8004084:	e01c      	b.n	80040c0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <HAL_RCC_OscConfig+0x278>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fd fe9a 	bl	8001dc4 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004092:	e00f      	b.n	80040b4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004094:	f7fd fe96 	bl	8001dc4 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d908      	bls.n	80040b4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e118      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	42470000 	.word	0x42470000
 80040b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b4:	4b8a      	ldr	r3, [pc, #552]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 80040b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e9      	bne.n	8004094 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8097 	beq.w	80041fc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ce:	2300      	movs	r3, #0
 80040d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040d2:	4b83      	ldr	r3, [pc, #524]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10f      	bne.n	80040fe <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	4b7f      	ldr	r3, [pc, #508]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	4a7e      	ldr	r2, [pc, #504]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 80040e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ec:	6413      	str	r3, [r2, #64]	; 0x40
 80040ee:	4b7c      	ldr	r3, [pc, #496]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040fa:	2301      	movs	r3, #1
 80040fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fe:	4b79      	ldr	r3, [pc, #484]	; (80042e4 <HAL_RCC_OscConfig+0x4ac>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d118      	bne.n	800413c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800410a:	4b76      	ldr	r3, [pc, #472]	; (80042e4 <HAL_RCC_OscConfig+0x4ac>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a75      	ldr	r2, [pc, #468]	; (80042e4 <HAL_RCC_OscConfig+0x4ac>)
 8004110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004116:	f7fd fe55 	bl	8001dc4 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411e:	f7fd fe51 	bl	8001dc4 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e0d3      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004130:	4b6c      	ldr	r3, [pc, #432]	; (80042e4 <HAL_RCC_OscConfig+0x4ac>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d106      	bne.n	8004152 <HAL_RCC_OscConfig+0x31a>
 8004144:	4b66      	ldr	r3, [pc, #408]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	4a65      	ldr	r2, [pc, #404]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6713      	str	r3, [r2, #112]	; 0x70
 8004150:	e01c      	b.n	800418c <HAL_RCC_OscConfig+0x354>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b05      	cmp	r3, #5
 8004158:	d10c      	bne.n	8004174 <HAL_RCC_OscConfig+0x33c>
 800415a:	4b61      	ldr	r3, [pc, #388]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	4a60      	ldr	r2, [pc, #384]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 8004160:	f043 0304 	orr.w	r3, r3, #4
 8004164:	6713      	str	r3, [r2, #112]	; 0x70
 8004166:	4b5e      	ldr	r3, [pc, #376]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	4a5d      	ldr	r2, [pc, #372]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6713      	str	r3, [r2, #112]	; 0x70
 8004172:	e00b      	b.n	800418c <HAL_RCC_OscConfig+0x354>
 8004174:	4b5a      	ldr	r3, [pc, #360]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	4a59      	ldr	r2, [pc, #356]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	6713      	str	r3, [r2, #112]	; 0x70
 8004180:	4b57      	ldr	r3, [pc, #348]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	4a56      	ldr	r2, [pc, #344]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 8004186:	f023 0304 	bic.w	r3, r3, #4
 800418a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d015      	beq.n	80041c0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004194:	f7fd fe16 	bl	8001dc4 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800419c:	f7fd fe12 	bl	8001dc4 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e092      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b2:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0ee      	beq.n	800419c <HAL_RCC_OscConfig+0x364>
 80041be:	e014      	b.n	80041ea <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fd fe00 	bl	8001dc4 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c6:	e00a      	b.n	80041de <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c8:	f7fd fdfc 	bl	8001dc4 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e07c      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041de:	4b40      	ldr	r3, [pc, #256]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1ee      	bne.n	80041c8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d105      	bne.n	80041fc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f0:	4b3b      	ldr	r3, [pc, #236]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	4a3a      	ldr	r2, [pc, #232]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 80041f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d068      	beq.n	80042d6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004204:	4b36      	ldr	r3, [pc, #216]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b08      	cmp	r3, #8
 800420e:	d060      	beq.n	80042d2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d145      	bne.n	80042a4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004218:	4b33      	ldr	r3, [pc, #204]	; (80042e8 <HAL_RCC_OscConfig+0x4b0>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421e:	f7fd fdd1 	bl	8001dc4 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004226:	f7fd fdcd 	bl	8001dc4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e04f      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004238:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f0      	bne.n	8004226 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	019b      	lsls	r3, r3, #6
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	3b01      	subs	r3, #1
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	071b      	lsls	r3, r3, #28
 8004270:	491b      	ldr	r1, [pc, #108]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004276:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <HAL_RCC_OscConfig+0x4b0>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fd fda2 	bl	8001dc4 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004284:	f7fd fd9e 	bl	8001dc4 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e020      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x44c>
 80042a2:	e018      	b.n	80042d6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a4:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <HAL_RCC_OscConfig+0x4b0>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fd fd8b 	bl	8001dc4 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fd fd87 	bl	8001dc4 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e009      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_RCC_OscConfig+0x4a8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCC_OscConfig+0x47a>
 80042d0:	e001      	b.n	80042d6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40007000 	.word	0x40007000
 80042e8:	42470060 	.word	0x42470060

080042ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e01d      	b.n	800433a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fd fb68 	bl	80019e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 fa82 	bl	8004834 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b0c      	cmp	r3, #12
 8004352:	d841      	bhi.n	80043d8 <HAL_TIM_IC_Start_IT+0x94>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <HAL_TIM_IC_Start_IT+0x18>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004391 	.word	0x08004391
 8004360:	080043d9 	.word	0x080043d9
 8004364:	080043d9 	.word	0x080043d9
 8004368:	080043d9 	.word	0x080043d9
 800436c:	080043a3 	.word	0x080043a3
 8004370:	080043d9 	.word	0x080043d9
 8004374:	080043d9 	.word	0x080043d9
 8004378:	080043d9 	.word	0x080043d9
 800437c:	080043b5 	.word	0x080043b5
 8004380:	080043d9 	.word	0x080043d9
 8004384:	080043d9 	.word	0x080043d9
 8004388:	080043d9 	.word	0x080043d9
 800438c:	080043c7 	.word	0x080043c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0202 	orr.w	r2, r2, #2
 800439e:	60da      	str	r2, [r3, #12]
      break;
 80043a0:	e01b      	b.n	80043da <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0204 	orr.w	r2, r2, #4
 80043b0:	60da      	str	r2, [r3, #12]
      break;
 80043b2:	e012      	b.n	80043da <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0208 	orr.w	r2, r2, #8
 80043c2:	60da      	str	r2, [r3, #12]
      break;
 80043c4:	e009      	b.n	80043da <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0210 	orr.w	r2, r2, #16
 80043d4:	60da      	str	r2, [r3, #12]
      break;
 80043d6:	e000      	b.n	80043da <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80043d8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2201      	movs	r2, #1
 80043e0:	6839      	ldr	r1, [r7, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fbf0 	bl	8004bc8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d007      	beq.n	800440a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d122      	bne.n	8004470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d11b      	bne.n	8004470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0202 	mvn.w	r2, #2
 8004440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fd f9c8 	bl	80017ec <HAL_TIM_IC_CaptureCallback>
 800445c:	e005      	b.n	800446a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f9ca 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f9d1 	bl	800480c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b04      	cmp	r3, #4
 800447c:	d122      	bne.n	80044c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b04      	cmp	r3, #4
 800448a:	d11b      	bne.n	80044c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0204 	mvn.w	r2, #4
 8004494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2202      	movs	r2, #2
 800449a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fd f99e 	bl	80017ec <HAL_TIM_IC_CaptureCallback>
 80044b0:	e005      	b.n	80044be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f9a0 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f9a7 	bl	800480c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d122      	bne.n	8004518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d11b      	bne.n	8004518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0208 	mvn.w	r2, #8
 80044e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2204      	movs	r2, #4
 80044ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fd f974 	bl	80017ec <HAL_TIM_IC_CaptureCallback>
 8004504:	e005      	b.n	8004512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f976 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f97d 	bl	800480c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b10      	cmp	r3, #16
 8004524:	d122      	bne.n	800456c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b10      	cmp	r3, #16
 8004532:	d11b      	bne.n	800456c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0210 	mvn.w	r2, #16
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2208      	movs	r2, #8
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fd f94a 	bl	80017ec <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f94c 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f953 	bl	800480c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d10e      	bne.n	8004598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b01      	cmp	r3, #1
 8004586:	d107      	bne.n	8004598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0201 	mvn.w	r2, #1
 8004590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f926 	bl	80047e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d10e      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	2b80      	cmp	r3, #128	; 0x80
 80045b2:	d107      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fbae 	bl	8004d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b40      	cmp	r3, #64	; 0x40
 80045d0:	d10e      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d107      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f918 	bl	8004820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d10e      	bne.n	800461c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b20      	cmp	r3, #32
 800460a:	d107      	bne.n	800461c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0220 	mvn.w	r2, #32
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fb78 	bl	8004d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_TIM_IC_ConfigChannel+0x1a>
 800463a:	2302      	movs	r3, #2
 800463c:	e08a      	b.n	8004754 <HAL_TIM_IC_ConfigChannel+0x130>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f000 f986 	bl	8004974 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 020c 	bic.w	r2, r2, #12
 8004676:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6999      	ldr	r1, [r3, #24]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	619a      	str	r2, [r3, #24]
 800468a:	e05a      	b.n	8004742 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b04      	cmp	r3, #4
 8004690:	d11c      	bne.n	80046cc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	6819      	ldr	r1, [r3, #0]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f000 f9db 	bl	8004a5c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6999      	ldr	r1, [r3, #24]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	021a      	lsls	r2, r3, #8
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	619a      	str	r2, [r3, #24]
 80046ca:	e03a      	b.n	8004742 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d11b      	bne.n	800470a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f000 f9f8 	bl	8004ad6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 020c 	bic.w	r2, r2, #12
 80046f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69d9      	ldr	r1, [r3, #28]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	61da      	str	r2, [r3, #28]
 8004708:	e01b      	b.n	8004742 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f000 fa18 	bl	8004b4e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800472c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69d9      	ldr	r1, [r3, #28]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	021a      	lsls	r2, r3, #8
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b0c      	cmp	r3, #12
 800476e:	d831      	bhi.n	80047d4 <HAL_TIM_ReadCapturedValue+0x78>
 8004770:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	080047ad 	.word	0x080047ad
 800477c:	080047d5 	.word	0x080047d5
 8004780:	080047d5 	.word	0x080047d5
 8004784:	080047d5 	.word	0x080047d5
 8004788:	080047b7 	.word	0x080047b7
 800478c:	080047d5 	.word	0x080047d5
 8004790:	080047d5 	.word	0x080047d5
 8004794:	080047d5 	.word	0x080047d5
 8004798:	080047c1 	.word	0x080047c1
 800479c:	080047d5 	.word	0x080047d5
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	080047d5 	.word	0x080047d5
 80047a8:	080047cb 	.word	0x080047cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b2:	60fb      	str	r3, [r7, #12]

      break;
 80047b4:	e00f      	b.n	80047d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	60fb      	str	r3, [r7, #12]

      break;
 80047be:	e00a      	b.n	80047d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	60fb      	str	r3, [r7, #12]

      break;
 80047c8:	e005      	b.n	80047d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	60fb      	str	r3, [r7, #12]

      break;
 80047d2:	e000      	b.n	80047d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80047d4:	bf00      	nop
  }

  return tmpreg;
 80047d6:	68fb      	ldr	r3, [r7, #12]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a40      	ldr	r2, [pc, #256]	; (8004948 <TIM_Base_SetConfig+0x114>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004852:	d00f      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3d      	ldr	r2, [pc, #244]	; (800494c <TIM_Base_SetConfig+0x118>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00b      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a3c      	ldr	r2, [pc, #240]	; (8004950 <TIM_Base_SetConfig+0x11c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a3b      	ldr	r2, [pc, #236]	; (8004954 <TIM_Base_SetConfig+0x120>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3a      	ldr	r2, [pc, #232]	; (8004958 <TIM_Base_SetConfig+0x124>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d108      	bne.n	8004886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a2f      	ldr	r2, [pc, #188]	; (8004948 <TIM_Base_SetConfig+0x114>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d02b      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004894:	d027      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2c      	ldr	r2, [pc, #176]	; (800494c <TIM_Base_SetConfig+0x118>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d023      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2b      	ldr	r2, [pc, #172]	; (8004950 <TIM_Base_SetConfig+0x11c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01f      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2a      	ldr	r2, [pc, #168]	; (8004954 <TIM_Base_SetConfig+0x120>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01b      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a29      	ldr	r2, [pc, #164]	; (8004958 <TIM_Base_SetConfig+0x124>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d017      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a28      	ldr	r2, [pc, #160]	; (800495c <TIM_Base_SetConfig+0x128>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a27      	ldr	r2, [pc, #156]	; (8004960 <TIM_Base_SetConfig+0x12c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00f      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a26      	ldr	r2, [pc, #152]	; (8004964 <TIM_Base_SetConfig+0x130>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00b      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a25      	ldr	r2, [pc, #148]	; (8004968 <TIM_Base_SetConfig+0x134>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a24      	ldr	r2, [pc, #144]	; (800496c <TIM_Base_SetConfig+0x138>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a23      	ldr	r2, [pc, #140]	; (8004970 <TIM_Base_SetConfig+0x13c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d108      	bne.n	80048f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <TIM_Base_SetConfig+0x114>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_Base_SetConfig+0xf8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a0c      	ldr	r2, [pc, #48]	; (8004958 <TIM_Base_SetConfig+0x124>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d103      	bne.n	8004934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	615a      	str	r2, [r3, #20]
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40010000 	.word	0x40010000
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40010400 	.word	0x40010400
 800495c:	40014000 	.word	0x40014000
 8004960:	40014400 	.word	0x40014400
 8004964:	40014800 	.word	0x40014800
 8004968:	40001800 	.word	0x40001800
 800496c:	40001c00 	.word	0x40001c00
 8004970:	40002000 	.word	0x40002000

08004974 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0201 	bic.w	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a28      	ldr	r2, [pc, #160]	; (8004a40 <TIM_TI1_SetConfig+0xcc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01b      	beq.n	80049da <TIM_TI1_SetConfig+0x66>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a8:	d017      	beq.n	80049da <TIM_TI1_SetConfig+0x66>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4a25      	ldr	r2, [pc, #148]	; (8004a44 <TIM_TI1_SetConfig+0xd0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <TIM_TI1_SetConfig+0x66>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4a24      	ldr	r2, [pc, #144]	; (8004a48 <TIM_TI1_SetConfig+0xd4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00f      	beq.n	80049da <TIM_TI1_SetConfig+0x66>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a23      	ldr	r2, [pc, #140]	; (8004a4c <TIM_TI1_SetConfig+0xd8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00b      	beq.n	80049da <TIM_TI1_SetConfig+0x66>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a22      	ldr	r2, [pc, #136]	; (8004a50 <TIM_TI1_SetConfig+0xdc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <TIM_TI1_SetConfig+0x66>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4a21      	ldr	r2, [pc, #132]	; (8004a54 <TIM_TI1_SetConfig+0xe0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_TI1_SetConfig+0x66>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <TIM_TI1_SetConfig+0xe4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d101      	bne.n	80049de <TIM_TI1_SetConfig+0x6a>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <TIM_TI1_SetConfig+0x6c>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	e003      	b.n	80049fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f023 030a 	bic.w	r3, r3, #10
 8004a18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f003 030a 	and.w	r3, r3, #10
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40010400 	.word	0x40010400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40001800 	.word	0x40001800

08004a5c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f023 0210 	bic.w	r2, r3, #16
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	031b      	lsls	r3, r3, #12
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	621a      	str	r2, [r3, #32]
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b087      	sub	sp, #28
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b087      	sub	sp, #28
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	031b      	lsls	r3, r3, #12
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004ba0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	031b      	lsls	r3, r3, #12
 8004ba6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	621a      	str	r2, [r3, #32]
}
 8004bbc:	bf00      	nop
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 031f 	and.w	r3, r3, #31
 8004bda:	2201      	movs	r2, #1
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1a      	ldr	r2, [r3, #32]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	401a      	ands	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a1a      	ldr	r2, [r3, #32]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004c00:	431a      	orrs	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
	...

08004c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e05a      	b.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a21      	ldr	r2, [pc, #132]	; (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d022      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c78:	d01d      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d018      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1b      	ldr	r2, [pc, #108]	; (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1a      	ldr	r2, [pc, #104]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00e      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a18      	ldr	r2, [pc, #96]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d009      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a17      	ldr	r2, [pc, #92]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40010000 	.word	0x40010000
 8004cf4:	40000400 	.word	0x40000400
 8004cf8:	40000800 	.word	0x40000800
 8004cfc:	40000c00 	.word	0x40000c00
 8004d00:	40010400 	.word	0x40010400
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40001800 	.word	0x40001800

08004d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e03f      	b.n	8004dc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc fe92 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2224      	movs	r2, #36	; 0x24
 8004d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f90b 	bl	8004f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695a      	ldr	r2, [r3, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b088      	sub	sp, #32
 8004dd2:	af02      	add	r7, sp, #8
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	f040 8083 	bne.w	8004ef6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_UART_Transmit+0x2e>
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e07b      	b.n	8004ef8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Transmit+0x40>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e074      	b.n	8004ef8 <HAL_UART_Transmit+0x12a>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2221      	movs	r2, #33	; 0x21
 8004e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004e24:	f7fc ffce 	bl	8001dc4 <HAL_GetTick>
 8004e28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	88fa      	ldrh	r2, [r7, #6]
 8004e2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	88fa      	ldrh	r2, [r7, #6]
 8004e34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004e3e:	e042      	b.n	8004ec6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e56:	d122      	bne.n	8004e9e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2180      	movs	r1, #128	; 0x80
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f84c 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e042      	b.n	8004ef8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e84:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	3302      	adds	r3, #2
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	e017      	b.n	8004ec6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	e013      	b.n	8004ec6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2180      	movs	r1, #128	; 0x80
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f829 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e01f      	b.n	8004ef8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	60ba      	str	r2, [r7, #8]
 8004ebe:	781a      	ldrb	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1b7      	bne.n	8004e40 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2140      	movs	r1, #64	; 0x40
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 f810 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e006      	b.n	8004ef8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e000      	b.n	8004ef8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004ef6:	2302      	movs	r3, #2
  }
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f10:	e02c      	b.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d028      	beq.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f20:	f7fc ff50 	bl	8001dc4 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d21d      	bcs.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f3e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e00f      	b.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4013      	ands	r3, r2
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d0c3      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f98:	b085      	sub	sp, #20
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004fd6:	f023 030c 	bic.w	r3, r3, #12
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6812      	ldr	r2, [r2, #0]
 8004fde:	68f9      	ldr	r1, [r7, #12]
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005002:	f040 818b 	bne.w	800531c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4ac1      	ldr	r2, [pc, #772]	; (8005310 <UART_SetConfig+0x37c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d005      	beq.n	800501c <UART_SetConfig+0x88>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4abf      	ldr	r2, [pc, #764]	; (8005314 <UART_SetConfig+0x380>)
 8005016:	4293      	cmp	r3, r2
 8005018:	f040 80bd 	bne.w	8005196 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800501c:	f7fe fd58 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
 8005020:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	461d      	mov	r5, r3
 8005026:	f04f 0600 	mov.w	r6, #0
 800502a:	46a8      	mov	r8, r5
 800502c:	46b1      	mov	r9, r6
 800502e:	eb18 0308 	adds.w	r3, r8, r8
 8005032:	eb49 0409 	adc.w	r4, r9, r9
 8005036:	4698      	mov	r8, r3
 8005038:	46a1      	mov	r9, r4
 800503a:	eb18 0805 	adds.w	r8, r8, r5
 800503e:	eb49 0906 	adc.w	r9, r9, r6
 8005042:	f04f 0100 	mov.w	r1, #0
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800504e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005052:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005056:	4688      	mov	r8, r1
 8005058:	4691      	mov	r9, r2
 800505a:	eb18 0005 	adds.w	r0, r8, r5
 800505e:	eb49 0106 	adc.w	r1, r9, r6
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	461d      	mov	r5, r3
 8005068:	f04f 0600 	mov.w	r6, #0
 800506c:	196b      	adds	r3, r5, r5
 800506e:	eb46 0406 	adc.w	r4, r6, r6
 8005072:	461a      	mov	r2, r3
 8005074:	4623      	mov	r3, r4
 8005076:	f7fb fd11 	bl	8000a9c <__aeabi_uldivmod>
 800507a:	4603      	mov	r3, r0
 800507c:	460c      	mov	r4, r1
 800507e:	461a      	mov	r2, r3
 8005080:	4ba5      	ldr	r3, [pc, #660]	; (8005318 <UART_SetConfig+0x384>)
 8005082:	fba3 2302 	umull	r2, r3, r3, r2
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	461d      	mov	r5, r3
 8005090:	f04f 0600 	mov.w	r6, #0
 8005094:	46a9      	mov	r9, r5
 8005096:	46b2      	mov	sl, r6
 8005098:	eb19 0309 	adds.w	r3, r9, r9
 800509c:	eb4a 040a 	adc.w	r4, sl, sl
 80050a0:	4699      	mov	r9, r3
 80050a2:	46a2      	mov	sl, r4
 80050a4:	eb19 0905 	adds.w	r9, r9, r5
 80050a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80050ac:	f04f 0100 	mov.w	r1, #0
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050c0:	4689      	mov	r9, r1
 80050c2:	4692      	mov	sl, r2
 80050c4:	eb19 0005 	adds.w	r0, r9, r5
 80050c8:	eb4a 0106 	adc.w	r1, sl, r6
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	461d      	mov	r5, r3
 80050d2:	f04f 0600 	mov.w	r6, #0
 80050d6:	196b      	adds	r3, r5, r5
 80050d8:	eb46 0406 	adc.w	r4, r6, r6
 80050dc:	461a      	mov	r2, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	f7fb fcdc 	bl	8000a9c <__aeabi_uldivmod>
 80050e4:	4603      	mov	r3, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	461a      	mov	r2, r3
 80050ea:	4b8b      	ldr	r3, [pc, #556]	; (8005318 <UART_SetConfig+0x384>)
 80050ec:	fba3 1302 	umull	r1, r3, r3, r2
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	2164      	movs	r1, #100	; 0x64
 80050f4:	fb01 f303 	mul.w	r3, r1, r3
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	3332      	adds	r3, #50	; 0x32
 80050fe:	4a86      	ldr	r2, [pc, #536]	; (8005318 <UART_SetConfig+0x384>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800510c:	4498      	add	r8, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	461d      	mov	r5, r3
 8005112:	f04f 0600 	mov.w	r6, #0
 8005116:	46a9      	mov	r9, r5
 8005118:	46b2      	mov	sl, r6
 800511a:	eb19 0309 	adds.w	r3, r9, r9
 800511e:	eb4a 040a 	adc.w	r4, sl, sl
 8005122:	4699      	mov	r9, r3
 8005124:	46a2      	mov	sl, r4
 8005126:	eb19 0905 	adds.w	r9, r9, r5
 800512a:	eb4a 0a06 	adc.w	sl, sl, r6
 800512e:	f04f 0100 	mov.w	r1, #0
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800513a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800513e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005142:	4689      	mov	r9, r1
 8005144:	4692      	mov	sl, r2
 8005146:	eb19 0005 	adds.w	r0, r9, r5
 800514a:	eb4a 0106 	adc.w	r1, sl, r6
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	461d      	mov	r5, r3
 8005154:	f04f 0600 	mov.w	r6, #0
 8005158:	196b      	adds	r3, r5, r5
 800515a:	eb46 0406 	adc.w	r4, r6, r6
 800515e:	461a      	mov	r2, r3
 8005160:	4623      	mov	r3, r4
 8005162:	f7fb fc9b 	bl	8000a9c <__aeabi_uldivmod>
 8005166:	4603      	mov	r3, r0
 8005168:	460c      	mov	r4, r1
 800516a:	461a      	mov	r2, r3
 800516c:	4b6a      	ldr	r3, [pc, #424]	; (8005318 <UART_SetConfig+0x384>)
 800516e:	fba3 1302 	umull	r1, r3, r3, r2
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	2164      	movs	r1, #100	; 0x64
 8005176:	fb01 f303 	mul.w	r3, r1, r3
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	3332      	adds	r3, #50	; 0x32
 8005180:	4a65      	ldr	r2, [pc, #404]	; (8005318 <UART_SetConfig+0x384>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	f003 0207 	and.w	r2, r3, #7
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4442      	add	r2, r8
 8005192:	609a      	str	r2, [r3, #8]
 8005194:	e26f      	b.n	8005676 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005196:	f7fe fc87 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 800519a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	461d      	mov	r5, r3
 80051a0:	f04f 0600 	mov.w	r6, #0
 80051a4:	46a8      	mov	r8, r5
 80051a6:	46b1      	mov	r9, r6
 80051a8:	eb18 0308 	adds.w	r3, r8, r8
 80051ac:	eb49 0409 	adc.w	r4, r9, r9
 80051b0:	4698      	mov	r8, r3
 80051b2:	46a1      	mov	r9, r4
 80051b4:	eb18 0805 	adds.w	r8, r8, r5
 80051b8:	eb49 0906 	adc.w	r9, r9, r6
 80051bc:	f04f 0100 	mov.w	r1, #0
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051d0:	4688      	mov	r8, r1
 80051d2:	4691      	mov	r9, r2
 80051d4:	eb18 0005 	adds.w	r0, r8, r5
 80051d8:	eb49 0106 	adc.w	r1, r9, r6
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	461d      	mov	r5, r3
 80051e2:	f04f 0600 	mov.w	r6, #0
 80051e6:	196b      	adds	r3, r5, r5
 80051e8:	eb46 0406 	adc.w	r4, r6, r6
 80051ec:	461a      	mov	r2, r3
 80051ee:	4623      	mov	r3, r4
 80051f0:	f7fb fc54 	bl	8000a9c <__aeabi_uldivmod>
 80051f4:	4603      	mov	r3, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	461a      	mov	r2, r3
 80051fa:	4b47      	ldr	r3, [pc, #284]	; (8005318 <UART_SetConfig+0x384>)
 80051fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	461d      	mov	r5, r3
 800520a:	f04f 0600 	mov.w	r6, #0
 800520e:	46a9      	mov	r9, r5
 8005210:	46b2      	mov	sl, r6
 8005212:	eb19 0309 	adds.w	r3, r9, r9
 8005216:	eb4a 040a 	adc.w	r4, sl, sl
 800521a:	4699      	mov	r9, r3
 800521c:	46a2      	mov	sl, r4
 800521e:	eb19 0905 	adds.w	r9, r9, r5
 8005222:	eb4a 0a06 	adc.w	sl, sl, r6
 8005226:	f04f 0100 	mov.w	r1, #0
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005232:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005236:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800523a:	4689      	mov	r9, r1
 800523c:	4692      	mov	sl, r2
 800523e:	eb19 0005 	adds.w	r0, r9, r5
 8005242:	eb4a 0106 	adc.w	r1, sl, r6
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	461d      	mov	r5, r3
 800524c:	f04f 0600 	mov.w	r6, #0
 8005250:	196b      	adds	r3, r5, r5
 8005252:	eb46 0406 	adc.w	r4, r6, r6
 8005256:	461a      	mov	r2, r3
 8005258:	4623      	mov	r3, r4
 800525a:	f7fb fc1f 	bl	8000a9c <__aeabi_uldivmod>
 800525e:	4603      	mov	r3, r0
 8005260:	460c      	mov	r4, r1
 8005262:	461a      	mov	r2, r3
 8005264:	4b2c      	ldr	r3, [pc, #176]	; (8005318 <UART_SetConfig+0x384>)
 8005266:	fba3 1302 	umull	r1, r3, r3, r2
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	2164      	movs	r1, #100	; 0x64
 800526e:	fb01 f303 	mul.w	r3, r1, r3
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	3332      	adds	r3, #50	; 0x32
 8005278:	4a27      	ldr	r2, [pc, #156]	; (8005318 <UART_SetConfig+0x384>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005286:	4498      	add	r8, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	461d      	mov	r5, r3
 800528c:	f04f 0600 	mov.w	r6, #0
 8005290:	46a9      	mov	r9, r5
 8005292:	46b2      	mov	sl, r6
 8005294:	eb19 0309 	adds.w	r3, r9, r9
 8005298:	eb4a 040a 	adc.w	r4, sl, sl
 800529c:	4699      	mov	r9, r3
 800529e:	46a2      	mov	sl, r4
 80052a0:	eb19 0905 	adds.w	r9, r9, r5
 80052a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80052a8:	f04f 0100 	mov.w	r1, #0
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052bc:	4689      	mov	r9, r1
 80052be:	4692      	mov	sl, r2
 80052c0:	eb19 0005 	adds.w	r0, r9, r5
 80052c4:	eb4a 0106 	adc.w	r1, sl, r6
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	461d      	mov	r5, r3
 80052ce:	f04f 0600 	mov.w	r6, #0
 80052d2:	196b      	adds	r3, r5, r5
 80052d4:	eb46 0406 	adc.w	r4, r6, r6
 80052d8:	461a      	mov	r2, r3
 80052da:	4623      	mov	r3, r4
 80052dc:	f7fb fbde 	bl	8000a9c <__aeabi_uldivmod>
 80052e0:	4603      	mov	r3, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	461a      	mov	r2, r3
 80052e6:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <UART_SetConfig+0x384>)
 80052e8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	2164      	movs	r1, #100	; 0x64
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	3332      	adds	r3, #50	; 0x32
 80052fa:	4a07      	ldr	r2, [pc, #28]	; (8005318 <UART_SetConfig+0x384>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	f003 0207 	and.w	r2, r3, #7
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4442      	add	r2, r8
 800530c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800530e:	e1b2      	b.n	8005676 <UART_SetConfig+0x6e2>
 8005310:	40011000 	.word	0x40011000
 8005314:	40011400 	.word	0x40011400
 8005318:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4ad7      	ldr	r2, [pc, #860]	; (8005680 <UART_SetConfig+0x6ec>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d005      	beq.n	8005332 <UART_SetConfig+0x39e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4ad6      	ldr	r2, [pc, #856]	; (8005684 <UART_SetConfig+0x6f0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	f040 80d1 	bne.w	80054d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005332:	f7fe fbcd 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
 8005336:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	469a      	mov	sl, r3
 800533c:	f04f 0b00 	mov.w	fp, #0
 8005340:	46d0      	mov	r8, sl
 8005342:	46d9      	mov	r9, fp
 8005344:	eb18 0308 	adds.w	r3, r8, r8
 8005348:	eb49 0409 	adc.w	r4, r9, r9
 800534c:	4698      	mov	r8, r3
 800534e:	46a1      	mov	r9, r4
 8005350:	eb18 080a 	adds.w	r8, r8, sl
 8005354:	eb49 090b 	adc.w	r9, r9, fp
 8005358:	f04f 0100 	mov.w	r1, #0
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005364:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005368:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800536c:	4688      	mov	r8, r1
 800536e:	4691      	mov	r9, r2
 8005370:	eb1a 0508 	adds.w	r5, sl, r8
 8005374:	eb4b 0609 	adc.w	r6, fp, r9
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4619      	mov	r1, r3
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	f04f 0400 	mov.w	r4, #0
 800538a:	0094      	lsls	r4, r2, #2
 800538c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005390:	008b      	lsls	r3, r1, #2
 8005392:	461a      	mov	r2, r3
 8005394:	4623      	mov	r3, r4
 8005396:	4628      	mov	r0, r5
 8005398:	4631      	mov	r1, r6
 800539a:	f7fb fb7f 	bl	8000a9c <__aeabi_uldivmod>
 800539e:	4603      	mov	r3, r0
 80053a0:	460c      	mov	r4, r1
 80053a2:	461a      	mov	r2, r3
 80053a4:	4bb8      	ldr	r3, [pc, #736]	; (8005688 <UART_SetConfig+0x6f4>)
 80053a6:	fba3 2302 	umull	r2, r3, r3, r2
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	469b      	mov	fp, r3
 80053b4:	f04f 0c00 	mov.w	ip, #0
 80053b8:	46d9      	mov	r9, fp
 80053ba:	46e2      	mov	sl, ip
 80053bc:	eb19 0309 	adds.w	r3, r9, r9
 80053c0:	eb4a 040a 	adc.w	r4, sl, sl
 80053c4:	4699      	mov	r9, r3
 80053c6:	46a2      	mov	sl, r4
 80053c8:	eb19 090b 	adds.w	r9, r9, fp
 80053cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053d0:	f04f 0100 	mov.w	r1, #0
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053e4:	4689      	mov	r9, r1
 80053e6:	4692      	mov	sl, r2
 80053e8:	eb1b 0509 	adds.w	r5, fp, r9
 80053ec:	eb4c 060a 	adc.w	r6, ip, sl
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4619      	mov	r1, r3
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	f04f 0400 	mov.w	r4, #0
 8005402:	0094      	lsls	r4, r2, #2
 8005404:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005408:	008b      	lsls	r3, r1, #2
 800540a:	461a      	mov	r2, r3
 800540c:	4623      	mov	r3, r4
 800540e:	4628      	mov	r0, r5
 8005410:	4631      	mov	r1, r6
 8005412:	f7fb fb43 	bl	8000a9c <__aeabi_uldivmod>
 8005416:	4603      	mov	r3, r0
 8005418:	460c      	mov	r4, r1
 800541a:	461a      	mov	r2, r3
 800541c:	4b9a      	ldr	r3, [pc, #616]	; (8005688 <UART_SetConfig+0x6f4>)
 800541e:	fba3 1302 	umull	r1, r3, r3, r2
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	2164      	movs	r1, #100	; 0x64
 8005426:	fb01 f303 	mul.w	r3, r1, r3
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	3332      	adds	r3, #50	; 0x32
 8005430:	4a95      	ldr	r2, [pc, #596]	; (8005688 <UART_SetConfig+0x6f4>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800543c:	4498      	add	r8, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	469b      	mov	fp, r3
 8005442:	f04f 0c00 	mov.w	ip, #0
 8005446:	46d9      	mov	r9, fp
 8005448:	46e2      	mov	sl, ip
 800544a:	eb19 0309 	adds.w	r3, r9, r9
 800544e:	eb4a 040a 	adc.w	r4, sl, sl
 8005452:	4699      	mov	r9, r3
 8005454:	46a2      	mov	sl, r4
 8005456:	eb19 090b 	adds.w	r9, r9, fp
 800545a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800545e:	f04f 0100 	mov.w	r1, #0
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800546a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800546e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005472:	4689      	mov	r9, r1
 8005474:	4692      	mov	sl, r2
 8005476:	eb1b 0509 	adds.w	r5, fp, r9
 800547a:	eb4c 060a 	adc.w	r6, ip, sl
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	4619      	mov	r1, r3
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	f04f 0400 	mov.w	r4, #0
 8005490:	0094      	lsls	r4, r2, #2
 8005492:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005496:	008b      	lsls	r3, r1, #2
 8005498:	461a      	mov	r2, r3
 800549a:	4623      	mov	r3, r4
 800549c:	4628      	mov	r0, r5
 800549e:	4631      	mov	r1, r6
 80054a0:	f7fb fafc 	bl	8000a9c <__aeabi_uldivmod>
 80054a4:	4603      	mov	r3, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	461a      	mov	r2, r3
 80054aa:	4b77      	ldr	r3, [pc, #476]	; (8005688 <UART_SetConfig+0x6f4>)
 80054ac:	fba3 1302 	umull	r1, r3, r3, r2
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	2164      	movs	r1, #100	; 0x64
 80054b4:	fb01 f303 	mul.w	r3, r1, r3
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	3332      	adds	r3, #50	; 0x32
 80054be:	4a72      	ldr	r2, [pc, #456]	; (8005688 <UART_SetConfig+0x6f4>)
 80054c0:	fba2 2303 	umull	r2, r3, r2, r3
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	f003 020f 	and.w	r2, r3, #15
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4442      	add	r2, r8
 80054d0:	609a      	str	r2, [r3, #8]
 80054d2:	e0d0      	b.n	8005676 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80054d4:	f7fe fae8 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 80054d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	469a      	mov	sl, r3
 80054de:	f04f 0b00 	mov.w	fp, #0
 80054e2:	46d0      	mov	r8, sl
 80054e4:	46d9      	mov	r9, fp
 80054e6:	eb18 0308 	adds.w	r3, r8, r8
 80054ea:	eb49 0409 	adc.w	r4, r9, r9
 80054ee:	4698      	mov	r8, r3
 80054f0:	46a1      	mov	r9, r4
 80054f2:	eb18 080a 	adds.w	r8, r8, sl
 80054f6:	eb49 090b 	adc.w	r9, r9, fp
 80054fa:	f04f 0100 	mov.w	r1, #0
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005506:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800550a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800550e:	4688      	mov	r8, r1
 8005510:	4691      	mov	r9, r2
 8005512:	eb1a 0508 	adds.w	r5, sl, r8
 8005516:	eb4b 0609 	adc.w	r6, fp, r9
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4619      	mov	r1, r3
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	f04f 0400 	mov.w	r4, #0
 800552c:	0094      	lsls	r4, r2, #2
 800552e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005532:	008b      	lsls	r3, r1, #2
 8005534:	461a      	mov	r2, r3
 8005536:	4623      	mov	r3, r4
 8005538:	4628      	mov	r0, r5
 800553a:	4631      	mov	r1, r6
 800553c:	f7fb faae 	bl	8000a9c <__aeabi_uldivmod>
 8005540:	4603      	mov	r3, r0
 8005542:	460c      	mov	r4, r1
 8005544:	461a      	mov	r2, r3
 8005546:	4b50      	ldr	r3, [pc, #320]	; (8005688 <UART_SetConfig+0x6f4>)
 8005548:	fba3 2302 	umull	r2, r3, r3, r2
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	469b      	mov	fp, r3
 8005556:	f04f 0c00 	mov.w	ip, #0
 800555a:	46d9      	mov	r9, fp
 800555c:	46e2      	mov	sl, ip
 800555e:	eb19 0309 	adds.w	r3, r9, r9
 8005562:	eb4a 040a 	adc.w	r4, sl, sl
 8005566:	4699      	mov	r9, r3
 8005568:	46a2      	mov	sl, r4
 800556a:	eb19 090b 	adds.w	r9, r9, fp
 800556e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005572:	f04f 0100 	mov.w	r1, #0
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800557e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005582:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005586:	4689      	mov	r9, r1
 8005588:	4692      	mov	sl, r2
 800558a:	eb1b 0509 	adds.w	r5, fp, r9
 800558e:	eb4c 060a 	adc.w	r6, ip, sl
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4619      	mov	r1, r3
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	f04f 0400 	mov.w	r4, #0
 80055a4:	0094      	lsls	r4, r2, #2
 80055a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055aa:	008b      	lsls	r3, r1, #2
 80055ac:	461a      	mov	r2, r3
 80055ae:	4623      	mov	r3, r4
 80055b0:	4628      	mov	r0, r5
 80055b2:	4631      	mov	r1, r6
 80055b4:	f7fb fa72 	bl	8000a9c <__aeabi_uldivmod>
 80055b8:	4603      	mov	r3, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	461a      	mov	r2, r3
 80055be:	4b32      	ldr	r3, [pc, #200]	; (8005688 <UART_SetConfig+0x6f4>)
 80055c0:	fba3 1302 	umull	r1, r3, r3, r2
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	2164      	movs	r1, #100	; 0x64
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	3332      	adds	r3, #50	; 0x32
 80055d2:	4a2d      	ldr	r2, [pc, #180]	; (8005688 <UART_SetConfig+0x6f4>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055de:	4498      	add	r8, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	469b      	mov	fp, r3
 80055e4:	f04f 0c00 	mov.w	ip, #0
 80055e8:	46d9      	mov	r9, fp
 80055ea:	46e2      	mov	sl, ip
 80055ec:	eb19 0309 	adds.w	r3, r9, r9
 80055f0:	eb4a 040a 	adc.w	r4, sl, sl
 80055f4:	4699      	mov	r9, r3
 80055f6:	46a2      	mov	sl, r4
 80055f8:	eb19 090b 	adds.w	r9, r9, fp
 80055fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005600:	f04f 0100 	mov.w	r1, #0
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800560c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005610:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005614:	4689      	mov	r9, r1
 8005616:	4692      	mov	sl, r2
 8005618:	eb1b 0509 	adds.w	r5, fp, r9
 800561c:	eb4c 060a 	adc.w	r6, ip, sl
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4619      	mov	r1, r3
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	f04f 0400 	mov.w	r4, #0
 8005632:	0094      	lsls	r4, r2, #2
 8005634:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005638:	008b      	lsls	r3, r1, #2
 800563a:	461a      	mov	r2, r3
 800563c:	4623      	mov	r3, r4
 800563e:	4628      	mov	r0, r5
 8005640:	4631      	mov	r1, r6
 8005642:	f7fb fa2b 	bl	8000a9c <__aeabi_uldivmod>
 8005646:	4603      	mov	r3, r0
 8005648:	460c      	mov	r4, r1
 800564a:	461a      	mov	r2, r3
 800564c:	4b0e      	ldr	r3, [pc, #56]	; (8005688 <UART_SetConfig+0x6f4>)
 800564e:	fba3 1302 	umull	r1, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	2164      	movs	r1, #100	; 0x64
 8005656:	fb01 f303 	mul.w	r3, r1, r3
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	3332      	adds	r3, #50	; 0x32
 8005660:	4a09      	ldr	r2, [pc, #36]	; (8005688 <UART_SetConfig+0x6f4>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	f003 020f 	and.w	r2, r3, #15
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4442      	add	r2, r8
 8005672:	609a      	str	r2, [r3, #8]
}
 8005674:	e7ff      	b.n	8005676 <UART_SetConfig+0x6e2>
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005680:	40011000 	.word	0x40011000
 8005684:	40011400 	.word	0x40011400
 8005688:	51eb851f 	.word	0x51eb851f

0800568c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800569a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800569e:	2b84      	cmp	r3, #132	; 0x84
 80056a0:	d005      	beq.n	80056ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80056a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4413      	add	r3, r2
 80056aa:	3303      	adds	r3, #3
 80056ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80056ae:	68fb      	ldr	r3, [r7, #12]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80056c0:	f000 fada 	bl	8005c78 <vTaskStartScheduler>
  
  return osOK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	bd80      	pop	{r7, pc}

080056ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80056ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056cc:	b089      	sub	sp, #36	; 0x24
 80056ce:	af04      	add	r7, sp, #16
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d020      	beq.n	800571e <osThreadCreate+0x54>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01c      	beq.n	800571e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685c      	ldr	r4, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681d      	ldr	r5, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691e      	ldr	r6, [r3, #16]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff ffc8 	bl	800568c <makeFreeRtosPriority>
 80056fc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005706:	9202      	str	r2, [sp, #8]
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	9100      	str	r1, [sp, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	4632      	mov	r2, r6
 8005710:	4629      	mov	r1, r5
 8005712:	4620      	mov	r0, r4
 8005714:	f000 f8ed 	bl	80058f2 <xTaskCreateStatic>
 8005718:	4603      	mov	r3, r0
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	e01c      	b.n	8005758 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685c      	ldr	r4, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800572a:	b29e      	uxth	r6, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff ffaa 	bl	800568c <makeFreeRtosPriority>
 8005738:	4602      	mov	r2, r0
 800573a:	f107 030c 	add.w	r3, r7, #12
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	9200      	str	r2, [sp, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	4632      	mov	r2, r6
 8005746:	4629      	mov	r1, r5
 8005748:	4620      	mov	r0, r4
 800574a:	f000 f92c 	bl	80059a6 <xTaskCreate>
 800574e:	4603      	mov	r3, r0
 8005750:	2b01      	cmp	r3, #1
 8005752:	d001      	beq.n	8005758 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005758:	68fb      	ldr	r3, [r7, #12]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005762 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <osDelay+0x16>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	e000      	b.n	800577a <osDelay+0x18>
 8005778:	2301      	movs	r3, #1
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fa48 	bl	8005c10 <vTaskDelay>
  
  return osOK;
 8005780:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f103 0208 	add.w	r2, r3, #8
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f04f 32ff 	mov.w	r2, #4294967295
 80057a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f103 0208 	add.w	r2, r3, #8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f103 0208 	add.w	r2, r3, #8
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	601a      	str	r2, [r3, #0]
}
 8005820:	bf00      	nop
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d103      	bne.n	800584c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	e00c      	b.n	8005866 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3308      	adds	r3, #8
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e002      	b.n	800585a <vListInsert+0x2e>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	429a      	cmp	r2, r3
 8005864:	d2f6      	bcs.n	8005854 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	601a      	str	r2, [r3, #0]
}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6892      	ldr	r2, [r2, #8]
 80058b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6852      	ldr	r2, [r2, #4]
 80058be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d103      	bne.n	80058d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	1e5a      	subs	r2, r3, #1
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b08e      	sub	sp, #56	; 0x38
 80058f6:	af04      	add	r7, sp, #16
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005902:	2b00      	cmp	r3, #0
 8005904:	d109      	bne.n	800591a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	623b      	str	r3, [r7, #32]
 8005918:	e7fe      	b.n	8005918 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	2b00      	cmp	r3, #0
 800591e:	d109      	bne.n	8005934 <xTaskCreateStatic+0x42>
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	e7fe      	b.n	8005932 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005934:	2354      	movs	r3, #84	; 0x54
 8005936:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2b54      	cmp	r3, #84	; 0x54
 800593c:	d009      	beq.n	8005952 <xTaskCreateStatic+0x60>
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	61bb      	str	r3, [r7, #24]
 8005950:	e7fe      	b.n	8005950 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005952:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	2b00      	cmp	r3, #0
 8005958:	d01e      	beq.n	8005998 <xTaskCreateStatic+0xa6>
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01b      	beq.n	8005998 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005968:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	2202      	movs	r2, #2
 800596e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005972:	2300      	movs	r3, #0
 8005974:	9303      	str	r3, [sp, #12]
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	9302      	str	r3, [sp, #8]
 800597a:	f107 0314 	add.w	r3, r7, #20
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f850 	bl	8005a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005992:	f000 f8d3 	bl	8005b3c <prvAddNewTaskToReadyList>
 8005996:	e001      	b.n	800599c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800599c:	697b      	ldr	r3, [r7, #20]
	}
 800599e:	4618      	mov	r0, r3
 80059a0:	3728      	adds	r7, #40	; 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b08c      	sub	sp, #48	; 0x30
 80059aa:	af04      	add	r7, sp, #16
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	603b      	str	r3, [r7, #0]
 80059b2:	4613      	mov	r3, r2
 80059b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fed2 	bl	8006764 <pvPortMalloc>
 80059c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00e      	beq.n	80059e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059c8:	2054      	movs	r0, #84	; 0x54
 80059ca:	f000 fecb 	bl	8006764 <pvPortMalloc>
 80059ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	631a      	str	r2, [r3, #48]	; 0x30
 80059dc:	e005      	b.n	80059ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059de:	6978      	ldr	r0, [r7, #20]
 80059e0:	f000 ff82 	bl	80068e8 <vPortFree>
 80059e4:	e001      	b.n	80059ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d017      	beq.n	8005a20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	2300      	movs	r3, #0
 80059fc:	9303      	str	r3, [sp, #12]
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	9302      	str	r3, [sp, #8]
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f80e 	bl	8005a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a14:	69f8      	ldr	r0, [r7, #28]
 8005a16:	f000 f891 	bl	8005b3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	e002      	b.n	8005a26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295
 8005a24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a26:	69bb      	ldr	r3, [r7, #24]
	}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3720      	adds	r7, #32
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f023 0307 	bic.w	r3, r3, #7
 8005a56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <prvInitialiseNewTask+0x46>
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	e7fe      	b.n	8005a74 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01f      	beq.n	8005abc <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	e012      	b.n	8005aa8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	4413      	add	r3, r2
 8005a88:	7819      	ldrb	r1, [r3, #0]
 8005a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	3334      	adds	r3, #52	; 0x34
 8005a92:	460a      	mov	r2, r1
 8005a94:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d006      	beq.n	8005ab0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	2b0f      	cmp	r3, #15
 8005aac:	d9e9      	bls.n	8005a82 <prvInitialiseNewTask+0x52>
 8005aae:	e000      	b.n	8005ab2 <prvInitialiseNewTask+0x82>
			{
				break;
 8005ab0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aba:	e003      	b.n	8005ac4 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	2b06      	cmp	r3, #6
 8005ac8:	d901      	bls.n	8005ace <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005aca:	2306      	movs	r3, #6
 8005acc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ad2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	2200      	movs	r2, #0
 8005ade:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fe70 	bl	80057ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	3318      	adds	r3, #24
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fe6b 	bl	80057ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	f1c3 0207 	rsb	r2, r3, #7
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	68f9      	ldr	r1, [r7, #12]
 8005b1c:	69b8      	ldr	r0, [r7, #24]
 8005b1e:	f000 fc1b 	bl	8006358 <pxPortInitialiseStack>
 8005b22:	4602      	mov	r2, r0
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b34:	bf00      	nop
 8005b36:	3720      	adds	r7, #32
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b44:	f000 fd32 	bl	80065ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b48:	4b2a      	ldr	r3, [pc, #168]	; (8005bf4 <prvAddNewTaskToReadyList+0xb8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	4a29      	ldr	r2, [pc, #164]	; (8005bf4 <prvAddNewTaskToReadyList+0xb8>)
 8005b50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b52:	4b29      	ldr	r3, [pc, #164]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d109      	bne.n	8005b6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b5a:	4a27      	ldr	r2, [pc, #156]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <prvAddNewTaskToReadyList+0xb8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d110      	bne.n	8005b8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b68:	f000 fab8 	bl	80060dc <prvInitialiseTaskLists>
 8005b6c:	e00d      	b.n	8005b8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b6e:	4b23      	ldr	r3, [pc, #140]	; (8005bfc <prvAddNewTaskToReadyList+0xc0>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d109      	bne.n	8005b8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b76:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d802      	bhi.n	8005b8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b84:	4a1c      	ldr	r2, [pc, #112]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b8a:	4b1d      	ldr	r3, [pc, #116]	; (8005c00 <prvAddNewTaskToReadyList+0xc4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	4a1b      	ldr	r2, [pc, #108]	; (8005c00 <prvAddNewTaskToReadyList+0xc4>)
 8005b92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	2201      	movs	r2, #1
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <prvAddNewTaskToReadyList+0xc8>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <prvAddNewTaskToReadyList+0xc8>)
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <prvAddNewTaskToReadyList+0xcc>)
 8005bb4:	441a      	add	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	f7ff fe11 	bl	80057e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bc2:	f000 fd21 	bl	8006608 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <prvAddNewTaskToReadyList+0xc0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00e      	beq.n	8005bec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bce:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d207      	bcs.n	8005bec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <prvAddNewTaskToReadyList+0xd0>)
 8005bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20000464 	.word	0x20000464
 8005bf8:	20000364 	.word	0x20000364
 8005bfc:	20000470 	.word	0x20000470
 8005c00:	20000480 	.word	0x20000480
 8005c04:	2000046c 	.word	0x2000046c
 8005c08:	20000368 	.word	0x20000368
 8005c0c:	e000ed04 	.word	0xe000ed04

08005c10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d016      	beq.n	8005c50 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c22:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <vTaskDelay+0x60>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <vTaskDelay+0x2e>
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	60bb      	str	r3, [r7, #8]
 8005c3c:	e7fe      	b.n	8005c3c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005c3e:	f000 f879 	bl	8005d34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c42:	2100      	movs	r1, #0
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fb21 	bl	800628c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c4a:	f000 f881 	bl	8005d50 <xTaskResumeAll>
 8005c4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d107      	bne.n	8005c66 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005c56:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <vTaskDelay+0x64>)
 8005c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c66:	bf00      	nop
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	2000048c 	.word	0x2000048c
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	; 0x28
 8005c7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c86:	463a      	mov	r2, r7
 8005c88:	1d39      	adds	r1, r7, #4
 8005c8a:	f107 0308 	add.w	r3, r7, #8
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fb fb6e 	bl	8001370 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	9202      	str	r2, [sp, #8]
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	460a      	mov	r2, r1
 8005ca6:	491d      	ldr	r1, [pc, #116]	; (8005d1c <vTaskStartScheduler+0xa4>)
 8005ca8:	481d      	ldr	r0, [pc, #116]	; (8005d20 <vTaskStartScheduler+0xa8>)
 8005caa:	f7ff fe22 	bl	80058f2 <xTaskCreateStatic>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <vTaskStartScheduler+0xac>)
 8005cb2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cb4:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <vTaskStartScheduler+0xac>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	e001      	b.n	8005cc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d115      	bne.n	8005cf8 <vTaskStartScheduler+0x80>
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cde:	4b12      	ldr	r3, [pc, #72]	; (8005d28 <vTaskStartScheduler+0xb0>)
 8005ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ce6:	4b11      	ldr	r3, [pc, #68]	; (8005d2c <vTaskStartScheduler+0xb4>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cec:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <vTaskStartScheduler+0xb8>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cf2:	f000 fbbd 	bl	8006470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cf6:	e00d      	b.n	8005d14 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfe:	d109      	bne.n	8005d14 <vTaskStartScheduler+0x9c>
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e7fe      	b.n	8005d12 <vTaskStartScheduler+0x9a>
}
 8005d14:	bf00      	nop
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	080073f8 	.word	0x080073f8
 8005d20:	080060ad 	.word	0x080060ad
 8005d24:	20000488 	.word	0x20000488
 8005d28:	20000484 	.word	0x20000484
 8005d2c:	20000470 	.word	0x20000470
 8005d30:	20000468 	.word	0x20000468

08005d34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d38:	4b04      	ldr	r3, [pc, #16]	; (8005d4c <vTaskSuspendAll+0x18>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	4a03      	ldr	r2, [pc, #12]	; (8005d4c <vTaskSuspendAll+0x18>)
 8005d40:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005d42:	bf00      	nop
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	2000048c 	.word	0x2000048c

08005d50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d5e:	4b41      	ldr	r3, [pc, #260]	; (8005e64 <xTaskResumeAll+0x114>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d109      	bne.n	8005d7a <xTaskResumeAll+0x2a>
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	e7fe      	b.n	8005d78 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d7a:	f000 fc17 	bl	80065ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d7e:	4b39      	ldr	r3, [pc, #228]	; (8005e64 <xTaskResumeAll+0x114>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	4a37      	ldr	r2, [pc, #220]	; (8005e64 <xTaskResumeAll+0x114>)
 8005d86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d88:	4b36      	ldr	r3, [pc, #216]	; (8005e64 <xTaskResumeAll+0x114>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d161      	bne.n	8005e54 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d90:	4b35      	ldr	r3, [pc, #212]	; (8005e68 <xTaskResumeAll+0x118>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d05d      	beq.n	8005e54 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d98:	e02e      	b.n	8005df8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d9a:	4b34      	ldr	r3, [pc, #208]	; (8005e6c <xTaskResumeAll+0x11c>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3318      	adds	r3, #24
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fd79 	bl	800589e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff fd74 	bl	800589e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dba:	2201      	movs	r2, #1
 8005dbc:	409a      	lsls	r2, r3
 8005dbe:	4b2c      	ldr	r3, [pc, #176]	; (8005e70 <xTaskResumeAll+0x120>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	4a2a      	ldr	r2, [pc, #168]	; (8005e70 <xTaskResumeAll+0x120>)
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4a27      	ldr	r2, [pc, #156]	; (8005e74 <xTaskResumeAll+0x124>)
 8005dd6:	441a      	add	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f7ff fd00 	bl	80057e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de8:	4b23      	ldr	r3, [pc, #140]	; (8005e78 <xTaskResumeAll+0x128>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d302      	bcc.n	8005df8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005df2:	4b22      	ldr	r3, [pc, #136]	; (8005e7c <xTaskResumeAll+0x12c>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005df8:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <xTaskResumeAll+0x11c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1cc      	bne.n	8005d9a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e06:	f000 fa03 	bl	8006210 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e0a:	4b1d      	ldr	r3, [pc, #116]	; (8005e80 <xTaskResumeAll+0x130>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d010      	beq.n	8005e38 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e16:	f000 f837 	bl	8005e88 <xTaskIncrementTick>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005e20:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <xTaskResumeAll+0x12c>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f1      	bne.n	8005e16 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005e32:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <xTaskResumeAll+0x130>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e38:	4b10      	ldr	r3, [pc, #64]	; (8005e7c <xTaskResumeAll+0x12c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e44:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <xTaskResumeAll+0x134>)
 8005e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e54:	f000 fbd8 	bl	8006608 <vPortExitCritical>

	return xAlreadyYielded;
 8005e58:	68bb      	ldr	r3, [r7, #8]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	2000048c 	.word	0x2000048c
 8005e68:	20000464 	.word	0x20000464
 8005e6c:	20000424 	.word	0x20000424
 8005e70:	2000046c 	.word	0x2000046c
 8005e74:	20000368 	.word	0x20000368
 8005e78:	20000364 	.word	0x20000364
 8005e7c:	20000478 	.word	0x20000478
 8005e80:	20000474 	.word	0x20000474
 8005e84:	e000ed04 	.word	0xe000ed04

08005e88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e92:	4b4e      	ldr	r3, [pc, #312]	; (8005fcc <xTaskIncrementTick+0x144>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 8087 	bne.w	8005faa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e9c:	4b4c      	ldr	r3, [pc, #304]	; (8005fd0 <xTaskIncrementTick+0x148>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ea4:	4a4a      	ldr	r2, [pc, #296]	; (8005fd0 <xTaskIncrementTick+0x148>)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d11f      	bne.n	8005ef0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005eb0:	4b48      	ldr	r3, [pc, #288]	; (8005fd4 <xTaskIncrementTick+0x14c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <xTaskIncrementTick+0x46>
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	e7fe      	b.n	8005ecc <xTaskIncrementTick+0x44>
 8005ece:	4b41      	ldr	r3, [pc, #260]	; (8005fd4 <xTaskIncrementTick+0x14c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	4b40      	ldr	r3, [pc, #256]	; (8005fd8 <xTaskIncrementTick+0x150>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a3e      	ldr	r2, [pc, #248]	; (8005fd4 <xTaskIncrementTick+0x14c>)
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	4a3e      	ldr	r2, [pc, #248]	; (8005fd8 <xTaskIncrementTick+0x150>)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	4b3e      	ldr	r3, [pc, #248]	; (8005fdc <xTaskIncrementTick+0x154>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	4a3c      	ldr	r2, [pc, #240]	; (8005fdc <xTaskIncrementTick+0x154>)
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	f000 f990 	bl	8006210 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ef0:	4b3b      	ldr	r3, [pc, #236]	; (8005fe0 <xTaskIncrementTick+0x158>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d348      	bcc.n	8005f8c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005efa:	4b36      	ldr	r3, [pc, #216]	; (8005fd4 <xTaskIncrementTick+0x14c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f04:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <xTaskIncrementTick+0x158>)
 8005f06:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0a:	601a      	str	r2, [r3, #0]
					break;
 8005f0c:	e03e      	b.n	8005f8c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0e:	4b31      	ldr	r3, [pc, #196]	; (8005fd4 <xTaskIncrementTick+0x14c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d203      	bcs.n	8005f2e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f26:	4a2e      	ldr	r2, [pc, #184]	; (8005fe0 <xTaskIncrementTick+0x158>)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f2c:	e02e      	b.n	8005f8c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fcb3 	bl	800589e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	3318      	adds	r3, #24
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff fcaa 	bl	800589e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	2201      	movs	r2, #1
 8005f50:	409a      	lsls	r2, r3
 8005f52:	4b24      	ldr	r3, [pc, #144]	; (8005fe4 <xTaskIncrementTick+0x15c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	4a22      	ldr	r2, [pc, #136]	; (8005fe4 <xTaskIncrementTick+0x15c>)
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4a1f      	ldr	r2, [pc, #124]	; (8005fe8 <xTaskIncrementTick+0x160>)
 8005f6a:	441a      	add	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f7ff fc36 	bl	80057e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <xTaskIncrementTick+0x164>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d3b9      	bcc.n	8005efa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005f86:	2301      	movs	r3, #1
 8005f88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f8a:	e7b6      	b.n	8005efa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f8c:	4b17      	ldr	r3, [pc, #92]	; (8005fec <xTaskIncrementTick+0x164>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f92:	4915      	ldr	r1, [pc, #84]	; (8005fe8 <xTaskIncrementTick+0x160>)
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d907      	bls.n	8005fb4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e004      	b.n	8005fb4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <xTaskIncrementTick+0x168>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	4a0f      	ldr	r2, [pc, #60]	; (8005ff0 <xTaskIncrementTick+0x168>)
 8005fb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005fb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <xTaskIncrementTick+0x16c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005fc0:	697b      	ldr	r3, [r7, #20]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	2000048c 	.word	0x2000048c
 8005fd0:	20000468 	.word	0x20000468
 8005fd4:	2000041c 	.word	0x2000041c
 8005fd8:	20000420 	.word	0x20000420
 8005fdc:	2000047c 	.word	0x2000047c
 8005fe0:	20000484 	.word	0x20000484
 8005fe4:	2000046c 	.word	0x2000046c
 8005fe8:	20000368 	.word	0x20000368
 8005fec:	20000364 	.word	0x20000364
 8005ff0:	20000474 	.word	0x20000474
 8005ff4:	20000478 	.word	0x20000478

08005ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ffe:	4b26      	ldr	r3, [pc, #152]	; (8006098 <vTaskSwitchContext+0xa0>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006006:	4b25      	ldr	r3, [pc, #148]	; (800609c <vTaskSwitchContext+0xa4>)
 8006008:	2201      	movs	r2, #1
 800600a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800600c:	e03e      	b.n	800608c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800600e:	4b23      	ldr	r3, [pc, #140]	; (800609c <vTaskSwitchContext+0xa4>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006014:	4b22      	ldr	r3, [pc, #136]	; (80060a0 <vTaskSwitchContext+0xa8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	fab3 f383 	clz	r3, r3
 8006020:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006022:	7afb      	ldrb	r3, [r7, #11]
 8006024:	f1c3 031f 	rsb	r3, r3, #31
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	491e      	ldr	r1, [pc, #120]	; (80060a4 <vTaskSwitchContext+0xac>)
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	440b      	add	r3, r1
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <vTaskSwitchContext+0x5a>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	607b      	str	r3, [r7, #4]
 8006050:	e7fe      	b.n	8006050 <vTaskSwitchContext+0x58>
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4a11      	ldr	r2, [pc, #68]	; (80060a4 <vTaskSwitchContext+0xac>)
 800605e:	4413      	add	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	605a      	str	r2, [r3, #4]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	3308      	adds	r3, #8
 8006074:	429a      	cmp	r2, r3
 8006076:	d104      	bne.n	8006082 <vTaskSwitchContext+0x8a>
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	605a      	str	r2, [r3, #4]
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4a07      	ldr	r2, [pc, #28]	; (80060a8 <vTaskSwitchContext+0xb0>)
 800608a:	6013      	str	r3, [r2, #0]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	2000048c 	.word	0x2000048c
 800609c:	20000478 	.word	0x20000478
 80060a0:	2000046c 	.word	0x2000046c
 80060a4:	20000368 	.word	0x20000368
 80060a8:	20000364 	.word	0x20000364

080060ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060b4:	f000 f852 	bl	800615c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060b8:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <prvIdleTask+0x28>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d9f9      	bls.n	80060b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060c0:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <prvIdleTask+0x2c>)
 80060c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060d0:	e7f0      	b.n	80060b4 <prvIdleTask+0x8>
 80060d2:	bf00      	nop
 80060d4:	20000368 	.word	0x20000368
 80060d8:	e000ed04 	.word	0xe000ed04

080060dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060e2:	2300      	movs	r3, #0
 80060e4:	607b      	str	r3, [r7, #4]
 80060e6:	e00c      	b.n	8006102 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4a12      	ldr	r2, [pc, #72]	; (800613c <prvInitialiseTaskLists+0x60>)
 80060f4:	4413      	add	r3, r2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff fb47 	bl	800578a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3301      	adds	r3, #1
 8006100:	607b      	str	r3, [r7, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b06      	cmp	r3, #6
 8006106:	d9ef      	bls.n	80060e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006108:	480d      	ldr	r0, [pc, #52]	; (8006140 <prvInitialiseTaskLists+0x64>)
 800610a:	f7ff fb3e 	bl	800578a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800610e:	480d      	ldr	r0, [pc, #52]	; (8006144 <prvInitialiseTaskLists+0x68>)
 8006110:	f7ff fb3b 	bl	800578a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006114:	480c      	ldr	r0, [pc, #48]	; (8006148 <prvInitialiseTaskLists+0x6c>)
 8006116:	f7ff fb38 	bl	800578a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800611a:	480c      	ldr	r0, [pc, #48]	; (800614c <prvInitialiseTaskLists+0x70>)
 800611c:	f7ff fb35 	bl	800578a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006120:	480b      	ldr	r0, [pc, #44]	; (8006150 <prvInitialiseTaskLists+0x74>)
 8006122:	f7ff fb32 	bl	800578a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006126:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <prvInitialiseTaskLists+0x78>)
 8006128:	4a05      	ldr	r2, [pc, #20]	; (8006140 <prvInitialiseTaskLists+0x64>)
 800612a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <prvInitialiseTaskLists+0x7c>)
 800612e:	4a05      	ldr	r2, [pc, #20]	; (8006144 <prvInitialiseTaskLists+0x68>)
 8006130:	601a      	str	r2, [r3, #0]
}
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000368 	.word	0x20000368
 8006140:	200003f4 	.word	0x200003f4
 8006144:	20000408 	.word	0x20000408
 8006148:	20000424 	.word	0x20000424
 800614c:	20000438 	.word	0x20000438
 8006150:	20000450 	.word	0x20000450
 8006154:	2000041c 	.word	0x2000041c
 8006158:	20000420 	.word	0x20000420

0800615c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006162:	e019      	b.n	8006198 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006164:	f000 fa22 	bl	80065ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006168:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <prvCheckTasksWaitingTermination+0x4c>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3304      	adds	r3, #4
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff fb92 	bl	800589e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800617a:	4b0c      	ldr	r3, [pc, #48]	; (80061ac <prvCheckTasksWaitingTermination+0x50>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3b01      	subs	r3, #1
 8006180:	4a0a      	ldr	r2, [pc, #40]	; (80061ac <prvCheckTasksWaitingTermination+0x50>)
 8006182:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006184:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <prvCheckTasksWaitingTermination+0x54>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3b01      	subs	r3, #1
 800618a:	4a09      	ldr	r2, [pc, #36]	; (80061b0 <prvCheckTasksWaitingTermination+0x54>)
 800618c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800618e:	f000 fa3b 	bl	8006608 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f80e 	bl	80061b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006198:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <prvCheckTasksWaitingTermination+0x54>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e1      	bne.n	8006164 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20000438 	.word	0x20000438
 80061ac:	20000464 	.word	0x20000464
 80061b0:	2000044c 	.word	0x2000044c

080061b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d108      	bne.n	80061d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fb8c 	bl	80068e8 <vPortFree>
				vPortFree( pxTCB );
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fb89 	bl	80068e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061d6:	e017      	b.n	8006208 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d103      	bne.n	80061ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fb80 	bl	80068e8 <vPortFree>
	}
 80061e8:	e00e      	b.n	8006208 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d009      	beq.n	8006208 <prvDeleteTCB+0x54>
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	e7fe      	b.n	8006206 <prvDeleteTCB+0x52>
	}
 8006208:	bf00      	nop
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006216:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <prvResetNextTaskUnblockTime+0x38>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d104      	bne.n	800622a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <prvResetNextTaskUnblockTime+0x3c>)
 8006222:	f04f 32ff 	mov.w	r2, #4294967295
 8006226:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006228:	e008      	b.n	800623c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800622a:	4b07      	ldr	r3, [pc, #28]	; (8006248 <prvResetNextTaskUnblockTime+0x38>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4a04      	ldr	r2, [pc, #16]	; (800624c <prvResetNextTaskUnblockTime+0x3c>)
 800623a:	6013      	str	r3, [r2, #0]
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	2000041c 	.word	0x2000041c
 800624c:	20000484 	.word	0x20000484

08006250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006256:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <xTaskGetSchedulerState+0x34>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800625e:	2301      	movs	r3, #1
 8006260:	607b      	str	r3, [r7, #4]
 8006262:	e008      	b.n	8006276 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006264:	4b08      	ldr	r3, [pc, #32]	; (8006288 <xTaskGetSchedulerState+0x38>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d102      	bne.n	8006272 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800626c:	2302      	movs	r3, #2
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	e001      	b.n	8006276 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006276:	687b      	ldr	r3, [r7, #4]
	}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	20000470 	.word	0x20000470
 8006288:	2000048c 	.word	0x2000048c

0800628c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006296:	4b29      	ldr	r3, [pc, #164]	; (800633c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800629c:	4b28      	ldr	r3, [pc, #160]	; (8006340 <prvAddCurrentTaskToDelayedList+0xb4>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff fafb 	bl	800589e <uxListRemove>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10b      	bne.n	80062c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80062ae:	4b24      	ldr	r3, [pc, #144]	; (8006340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	2201      	movs	r2, #1
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	43da      	mvns	r2, r3
 80062bc:	4b21      	ldr	r3, [pc, #132]	; (8006344 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4013      	ands	r3, r2
 80062c2:	4a20      	ldr	r2, [pc, #128]	; (8006344 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d10a      	bne.n	80062e4 <prvAddCurrentTaskToDelayedList+0x58>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062d4:	4b1a      	ldr	r3, [pc, #104]	; (8006340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3304      	adds	r3, #4
 80062da:	4619      	mov	r1, r3
 80062dc:	481a      	ldr	r0, [pc, #104]	; (8006348 <prvAddCurrentTaskToDelayedList+0xbc>)
 80062de:	f7ff fa81 	bl	80057e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062e2:	e026      	b.n	8006332 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4413      	add	r3, r2
 80062ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062ec:	4b14      	ldr	r3, [pc, #80]	; (8006340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d209      	bcs.n	8006310 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062fc:	4b13      	ldr	r3, [pc, #76]	; (800634c <prvAddCurrentTaskToDelayedList+0xc0>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3304      	adds	r3, #4
 8006306:	4619      	mov	r1, r3
 8006308:	4610      	mov	r0, r2
 800630a:	f7ff fa8f 	bl	800582c <vListInsert>
}
 800630e:	e010      	b.n	8006332 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006310:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3304      	adds	r3, #4
 800631a:	4619      	mov	r1, r3
 800631c:	4610      	mov	r0, r2
 800631e:	f7ff fa85 	bl	800582c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006322:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	429a      	cmp	r2, r3
 800632a:	d202      	bcs.n	8006332 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800632c:	4a09      	ldr	r2, [pc, #36]	; (8006354 <prvAddCurrentTaskToDelayedList+0xc8>)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6013      	str	r3, [r2, #0]
}
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000468 	.word	0x20000468
 8006340:	20000364 	.word	0x20000364
 8006344:	2000046c 	.word	0x2000046c
 8006348:	20000450 	.word	0x20000450
 800634c:	20000420 	.word	0x20000420
 8006350:	2000041c 	.word	0x2000041c
 8006354:	20000484 	.word	0x20000484

08006358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b04      	subs	r3, #4
 8006368:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3b04      	subs	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3b04      	subs	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006388:	4a0c      	ldr	r2, [pc, #48]	; (80063bc <pxPortInitialiseStack+0x64>)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b14      	subs	r3, #20
 8006392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3b04      	subs	r3, #4
 800639e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f06f 0202 	mvn.w	r2, #2
 80063a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3b20      	subs	r3, #32
 80063ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063ae:	68fb      	ldr	r3, [r7, #12]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	080063c1 	.word	0x080063c1

080063c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ca:	4b11      	ldr	r3, [pc, #68]	; (8006410 <prvTaskExitError+0x50>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d2:	d009      	beq.n	80063e8 <prvTaskExitError+0x28>
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	e7fe      	b.n	80063e6 <prvTaskExitError+0x26>
 80063e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063fa:	bf00      	nop
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0fc      	beq.n	80063fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	20000010 	.word	0x20000010
	...

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	20000364 	.word	0x20000364
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <prvPortStartFirstTask+0x24>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8814 	msr	CONTROL, r0
 800645a:	b662      	cpsie	i
 800645c:	b661      	cpsie	f
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	df00      	svc	0
 8006468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800646a:	bf00      	nop
 800646c:	e000ed08 	.word	0xe000ed08

08006470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006476:	4b44      	ldr	r3, [pc, #272]	; (8006588 <xPortStartScheduler+0x118>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a44      	ldr	r2, [pc, #272]	; (800658c <xPortStartScheduler+0x11c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d109      	bne.n	8006494 <xPortStartScheduler+0x24>
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	e7fe      	b.n	8006492 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006494:	4b3c      	ldr	r3, [pc, #240]	; (8006588 <xPortStartScheduler+0x118>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a3d      	ldr	r2, [pc, #244]	; (8006590 <xPortStartScheduler+0x120>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d109      	bne.n	80064b2 <xPortStartScheduler+0x42>
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e7fe      	b.n	80064b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064b2:	4b38      	ldr	r3, [pc, #224]	; (8006594 <xPortStartScheduler+0x124>)
 80064b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	22ff      	movs	r2, #255	; 0xff
 80064c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	4b30      	ldr	r3, [pc, #192]	; (8006598 <xPortStartScheduler+0x128>)
 80064d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064da:	4b30      	ldr	r3, [pc, #192]	; (800659c <xPortStartScheduler+0x12c>)
 80064dc:	2207      	movs	r2, #7
 80064de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e0:	e009      	b.n	80064f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80064e2:	4b2e      	ldr	r3, [pc, #184]	; (800659c <xPortStartScheduler+0x12c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	4a2c      	ldr	r2, [pc, #176]	; (800659c <xPortStartScheduler+0x12c>)
 80064ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d0ef      	beq.n	80064e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006502:	4b26      	ldr	r3, [pc, #152]	; (800659c <xPortStartScheduler+0x12c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f1c3 0307 	rsb	r3, r3, #7
 800650a:	2b04      	cmp	r3, #4
 800650c:	d009      	beq.n	8006522 <xPortStartScheduler+0xb2>
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	e7fe      	b.n	8006520 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006522:	4b1e      	ldr	r3, [pc, #120]	; (800659c <xPortStartScheduler+0x12c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	021b      	lsls	r3, r3, #8
 8006528:	4a1c      	ldr	r2, [pc, #112]	; (800659c <xPortStartScheduler+0x12c>)
 800652a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800652c:	4b1b      	ldr	r3, [pc, #108]	; (800659c <xPortStartScheduler+0x12c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006534:	4a19      	ldr	r2, [pc, #100]	; (800659c <xPortStartScheduler+0x12c>)
 8006536:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006540:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <xPortStartScheduler+0x130>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a16      	ldr	r2, [pc, #88]	; (80065a0 <xPortStartScheduler+0x130>)
 8006546:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800654a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800654c:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <xPortStartScheduler+0x130>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a13      	ldr	r2, [pc, #76]	; (80065a0 <xPortStartScheduler+0x130>)
 8006552:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006556:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006558:	f000 f8d6 	bl	8006708 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800655c:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <xPortStartScheduler+0x134>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006562:	f000 f8f5 	bl	8006750 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006566:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <xPortStartScheduler+0x138>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a0f      	ldr	r2, [pc, #60]	; (80065a8 <xPortStartScheduler+0x138>)
 800656c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006570:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006572:	f7ff ff69 	bl	8006448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006576:	f7ff fd3f 	bl	8005ff8 <vTaskSwitchContext>
	prvTaskExitError();
 800657a:	f7ff ff21 	bl	80063c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	e000ed00 	.word	0xe000ed00
 800658c:	410fc271 	.word	0x410fc271
 8006590:	410fc270 	.word	0x410fc270
 8006594:	e000e400 	.word	0xe000e400
 8006598:	20000490 	.word	0x20000490
 800659c:	20000494 	.word	0x20000494
 80065a0:	e000ed20 	.word	0xe000ed20
 80065a4:	20000010 	.word	0x20000010
 80065a8:	e000ef34 	.word	0xe000ef34

080065ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065c4:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <vPortEnterCritical+0x54>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a0d      	ldr	r2, [pc, #52]	; (8006600 <vPortEnterCritical+0x54>)
 80065cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <vPortEnterCritical+0x54>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10e      	bne.n	80065f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065d6:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <vPortEnterCritical+0x58>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <vPortEnterCritical+0x48>
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	e7fe      	b.n	80065f2 <vPortEnterCritical+0x46>
	}
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20000010 	.word	0x20000010
 8006604:	e000ed04 	.word	0xe000ed04

08006608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800660e:	4b11      	ldr	r3, [pc, #68]	; (8006654 <vPortExitCritical+0x4c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <vPortExitCritical+0x22>
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	607b      	str	r3, [r7, #4]
 8006628:	e7fe      	b.n	8006628 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <vPortExitCritical+0x4c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3b01      	subs	r3, #1
 8006630:	4a08      	ldr	r2, [pc, #32]	; (8006654 <vPortExitCritical+0x4c>)
 8006632:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006634:	4b07      	ldr	r3, [pc, #28]	; (8006654 <vPortExitCritical+0x4c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <vPortExitCritical+0x3e>
 800663c:	2300      	movs	r3, #0
 800663e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	20000010 	.word	0x20000010
	...

08006660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006660:	f3ef 8009 	mrs	r0, PSP
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <pxCurrentTCBConst>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	f01e 0f10 	tst.w	lr, #16
 8006670:	bf08      	it	eq
 8006672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	6010      	str	r0, [r2, #0]
 800667c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006684:	f380 8811 	msr	BASEPRI, r0
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f7ff fcb2 	bl	8005ff8 <vTaskSwitchContext>
 8006694:	f04f 0000 	mov.w	r0, #0
 8006698:	f380 8811 	msr	BASEPRI, r0
 800669c:	bc09      	pop	{r0, r3}
 800669e:	6819      	ldr	r1, [r3, #0]
 80066a0:	6808      	ldr	r0, [r1, #0]
 80066a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a6:	f01e 0f10 	tst.w	lr, #16
 80066aa:	bf08      	it	eq
 80066ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066b0:	f380 8809 	msr	PSP, r0
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	f3af 8000 	nop.w

080066c0 <pxCurrentTCBConst>:
 80066c0:	20000364 	.word	0x20000364
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop

080066c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066e0:	f7ff fbd2 	bl	8005e88 <xTaskIncrementTick>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066ea:	4b06      	ldr	r3, [pc, #24]	; (8006704 <xPortSysTickHandler+0x3c>)
 80066ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	2300      	movs	r3, #0
 80066f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <vPortSetupTimerInterrupt+0x34>)
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006712:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <vPortSetupTimerInterrupt+0x38>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <vPortSetupTimerInterrupt+0x3c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a0a      	ldr	r2, [pc, #40]	; (8006748 <vPortSetupTimerInterrupt+0x40>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	099b      	lsrs	r3, r3, #6
 8006724:	4a09      	ldr	r2, [pc, #36]	; (800674c <vPortSetupTimerInterrupt+0x44>)
 8006726:	3b01      	subs	r3, #1
 8006728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800672a:	4b04      	ldr	r3, [pc, #16]	; (800673c <vPortSetupTimerInterrupt+0x34>)
 800672c:	2207      	movs	r2, #7
 800672e:	601a      	str	r2, [r3, #0]
}
 8006730:	bf00      	nop
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	e000e010 	.word	0xe000e010
 8006740:	e000e018 	.word	0xe000e018
 8006744:	20000004 	.word	0x20000004
 8006748:	10624dd3 	.word	0x10624dd3
 800674c:	e000e014 	.word	0xe000e014

08006750 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006750:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006760 <vPortEnableVFP+0x10>
 8006754:	6801      	ldr	r1, [r0, #0]
 8006756:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800675a:	6001      	str	r1, [r0, #0]
 800675c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800675e:	bf00      	nop
 8006760:	e000ed88 	.word	0xe000ed88

08006764 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08a      	sub	sp, #40	; 0x28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800676c:	2300      	movs	r3, #0
 800676e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006770:	f7ff fae0 	bl	8005d34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006774:	4b57      	ldr	r3, [pc, #348]	; (80068d4 <pvPortMalloc+0x170>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800677c:	f000 f90c 	bl	8006998 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006780:	4b55      	ldr	r3, [pc, #340]	; (80068d8 <pvPortMalloc+0x174>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4013      	ands	r3, r2
 8006788:	2b00      	cmp	r3, #0
 800678a:	f040 808c 	bne.w	80068a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01c      	beq.n	80067ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006794:	2208      	movs	r2, #8
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4413      	add	r3, r2
 800679a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d013      	beq.n	80067ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f023 0307 	bic.w	r3, r3, #7
 80067ac:	3308      	adds	r3, #8
 80067ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <pvPortMalloc+0x6a>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	e7fe      	b.n	80067cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d068      	beq.n	80068a6 <pvPortMalloc+0x142>
 80067d4:	4b41      	ldr	r3, [pc, #260]	; (80068dc <pvPortMalloc+0x178>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d863      	bhi.n	80068a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067de:	4b40      	ldr	r3, [pc, #256]	; (80068e0 <pvPortMalloc+0x17c>)
 80067e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067e2:	4b3f      	ldr	r3, [pc, #252]	; (80068e0 <pvPortMalloc+0x17c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067e8:	e004      	b.n	80067f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d903      	bls.n	8006806 <pvPortMalloc+0xa2>
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1f1      	bne.n	80067ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006806:	4b33      	ldr	r3, [pc, #204]	; (80068d4 <pvPortMalloc+0x170>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680c:	429a      	cmp	r2, r3
 800680e:	d04a      	beq.n	80068a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2208      	movs	r2, #8
 8006816:	4413      	add	r3, r2
 8006818:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	1ad2      	subs	r2, r2, r3
 800682a:	2308      	movs	r3, #8
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	429a      	cmp	r2, r3
 8006830:	d91e      	bls.n	8006870 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4413      	add	r3, r2
 8006838:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	2b00      	cmp	r3, #0
 8006842:	d009      	beq.n	8006858 <pvPortMalloc+0xf4>
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	e7fe      	b.n	8006856 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	1ad2      	subs	r2, r2, r3
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800686a:	69b8      	ldr	r0, [r7, #24]
 800686c:	f000 f8f6 	bl	8006a5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006870:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <pvPortMalloc+0x178>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	4a18      	ldr	r2, [pc, #96]	; (80068dc <pvPortMalloc+0x178>)
 800687c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800687e:	4b17      	ldr	r3, [pc, #92]	; (80068dc <pvPortMalloc+0x178>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4b18      	ldr	r3, [pc, #96]	; (80068e4 <pvPortMalloc+0x180>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d203      	bcs.n	8006892 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800688a:	4b14      	ldr	r3, [pc, #80]	; (80068dc <pvPortMalloc+0x178>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <pvPortMalloc+0x180>)
 8006890:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <pvPortMalloc+0x174>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	431a      	orrs	r2, r3
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068a6:	f7ff fa53 	bl	8005d50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <pvPortMalloc+0x164>
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	e7fe      	b.n	80068c6 <pvPortMalloc+0x162>
	return pvReturn;
 80068c8:	69fb      	ldr	r3, [r7, #28]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3728      	adds	r7, #40	; 0x28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	200040a0 	.word	0x200040a0
 80068d8:	200040ac 	.word	0x200040ac
 80068dc:	200040a4 	.word	0x200040a4
 80068e0:	20004098 	.word	0x20004098
 80068e4:	200040a8 	.word	0x200040a8

080068e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d046      	beq.n	8006988 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068fa:	2308      	movs	r3, #8
 80068fc:	425b      	negs	r3, r3
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	4413      	add	r3, r2
 8006902:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	4b20      	ldr	r3, [pc, #128]	; (8006990 <vPortFree+0xa8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4013      	ands	r3, r2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d109      	bne.n	800692a <vPortFree+0x42>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e7fe      	b.n	8006928 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <vPortFree+0x5e>
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	60bb      	str	r3, [r7, #8]
 8006944:	e7fe      	b.n	8006944 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	4b11      	ldr	r3, [pc, #68]	; (8006990 <vPortFree+0xa8>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4013      	ands	r3, r2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d019      	beq.n	8006988 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d115      	bne.n	8006988 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <vPortFree+0xa8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	43db      	mvns	r3, r3
 8006966:	401a      	ands	r2, r3
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800696c:	f7ff f9e2 	bl	8005d34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	4b07      	ldr	r3, [pc, #28]	; (8006994 <vPortFree+0xac>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4413      	add	r3, r2
 800697a:	4a06      	ldr	r2, [pc, #24]	; (8006994 <vPortFree+0xac>)
 800697c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800697e:	6938      	ldr	r0, [r7, #16]
 8006980:	f000 f86c 	bl	8006a5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006984:	f7ff f9e4 	bl	8005d50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006988:	bf00      	nop
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	200040ac 	.word	0x200040ac
 8006994:	200040a4 	.word	0x200040a4

08006998 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800699e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069a4:	4b27      	ldr	r3, [pc, #156]	; (8006a44 <prvHeapInit+0xac>)
 80069a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00c      	beq.n	80069cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3307      	adds	r3, #7
 80069b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0307 	bic.w	r3, r3, #7
 80069be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	4a1f      	ldr	r2, [pc, #124]	; (8006a44 <prvHeapInit+0xac>)
 80069c8:	4413      	add	r3, r2
 80069ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069d0:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <prvHeapInit+0xb0>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069d6:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <prvHeapInit+0xb0>)
 80069d8:	2200      	movs	r2, #0
 80069da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4413      	add	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069e4:	2208      	movs	r2, #8
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0307 	bic.w	r3, r3, #7
 80069f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <prvHeapInit+0xb4>)
 80069f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069fa:	4b14      	ldr	r3, [pc, #80]	; (8006a4c <prvHeapInit+0xb4>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2200      	movs	r2, #0
 8006a00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <prvHeapInit+0xb4>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	1ad2      	subs	r2, r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <prvHeapInit+0xb4>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	4a0a      	ldr	r2, [pc, #40]	; (8006a50 <prvHeapInit+0xb8>)
 8006a26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <prvHeapInit+0xbc>)
 8006a2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a30:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <prvHeapInit+0xc0>)
 8006a32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a36:	601a      	str	r2, [r3, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	20000498 	.word	0x20000498
 8006a48:	20004098 	.word	0x20004098
 8006a4c:	200040a0 	.word	0x200040a0
 8006a50:	200040a8 	.word	0x200040a8
 8006a54:	200040a4 	.word	0x200040a4
 8006a58:	200040ac 	.word	0x200040ac

08006a5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a64:	4b28      	ldr	r3, [pc, #160]	; (8006b08 <prvInsertBlockIntoFreeList+0xac>)
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	e002      	b.n	8006a70 <prvInsertBlockIntoFreeList+0x14>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d8f7      	bhi.n	8006a6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	4413      	add	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d108      	bne.n	8006a9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	441a      	add	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	441a      	add	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d118      	bne.n	8006ae4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <prvInsertBlockIntoFreeList+0xb0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d00d      	beq.n	8006ada <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	441a      	add	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	e008      	b.n	8006aec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ada:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <prvInsertBlockIntoFreeList+0xb0>)
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	e003      	b.n	8006aec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d002      	beq.n	8006afa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	20004098 	.word	0x20004098
 8006b0c:	200040a0 	.word	0x200040a0

08006b10 <__errno>:
 8006b10:	4b01      	ldr	r3, [pc, #4]	; (8006b18 <__errno+0x8>)
 8006b12:	6818      	ldr	r0, [r3, #0]
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	20000014 	.word	0x20000014

08006b1c <__libc_init_array>:
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	4e0d      	ldr	r6, [pc, #52]	; (8006b54 <__libc_init_array+0x38>)
 8006b20:	4c0d      	ldr	r4, [pc, #52]	; (8006b58 <__libc_init_array+0x3c>)
 8006b22:	1ba4      	subs	r4, r4, r6
 8006b24:	10a4      	asrs	r4, r4, #2
 8006b26:	2500      	movs	r5, #0
 8006b28:	42a5      	cmp	r5, r4
 8006b2a:	d109      	bne.n	8006b40 <__libc_init_array+0x24>
 8006b2c:	4e0b      	ldr	r6, [pc, #44]	; (8006b5c <__libc_init_array+0x40>)
 8006b2e:	4c0c      	ldr	r4, [pc, #48]	; (8006b60 <__libc_init_array+0x44>)
 8006b30:	f000 fc28 	bl	8007384 <_init>
 8006b34:	1ba4      	subs	r4, r4, r6
 8006b36:	10a4      	asrs	r4, r4, #2
 8006b38:	2500      	movs	r5, #0
 8006b3a:	42a5      	cmp	r5, r4
 8006b3c:	d105      	bne.n	8006b4a <__libc_init_array+0x2e>
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
 8006b40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b44:	4798      	blx	r3
 8006b46:	3501      	adds	r5, #1
 8006b48:	e7ee      	b.n	8006b28 <__libc_init_array+0xc>
 8006b4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b4e:	4798      	blx	r3
 8006b50:	3501      	adds	r5, #1
 8006b52:	e7f2      	b.n	8006b3a <__libc_init_array+0x1e>
 8006b54:	08007454 	.word	0x08007454
 8006b58:	08007454 	.word	0x08007454
 8006b5c:	08007454 	.word	0x08007454
 8006b60:	08007458 	.word	0x08007458

08006b64 <memcpy>:
 8006b64:	b510      	push	{r4, lr}
 8006b66:	1e43      	subs	r3, r0, #1
 8006b68:	440a      	add	r2, r1
 8006b6a:	4291      	cmp	r1, r2
 8006b6c:	d100      	bne.n	8006b70 <memcpy+0xc>
 8006b6e:	bd10      	pop	{r4, pc}
 8006b70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b78:	e7f7      	b.n	8006b6a <memcpy+0x6>

08006b7a <memset>:
 8006b7a:	4402      	add	r2, r0
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d100      	bne.n	8006b84 <memset+0xa>
 8006b82:	4770      	bx	lr
 8006b84:	f803 1b01 	strb.w	r1, [r3], #1
 8006b88:	e7f9      	b.n	8006b7e <memset+0x4>
	...

08006b8c <siprintf>:
 8006b8c:	b40e      	push	{r1, r2, r3}
 8006b8e:	b500      	push	{lr}
 8006b90:	b09c      	sub	sp, #112	; 0x70
 8006b92:	ab1d      	add	r3, sp, #116	; 0x74
 8006b94:	9002      	str	r0, [sp, #8]
 8006b96:	9006      	str	r0, [sp, #24]
 8006b98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b9c:	4809      	ldr	r0, [pc, #36]	; (8006bc4 <siprintf+0x38>)
 8006b9e:	9107      	str	r1, [sp, #28]
 8006ba0:	9104      	str	r1, [sp, #16]
 8006ba2:	4909      	ldr	r1, [pc, #36]	; (8006bc8 <siprintf+0x3c>)
 8006ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba8:	9105      	str	r1, [sp, #20]
 8006baa:	6800      	ldr	r0, [r0, #0]
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	a902      	add	r1, sp, #8
 8006bb0:	f000 f866 	bl	8006c80 <_svfiprintf_r>
 8006bb4:	9b02      	ldr	r3, [sp, #8]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	b01c      	add	sp, #112	; 0x70
 8006bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bc0:	b003      	add	sp, #12
 8006bc2:	4770      	bx	lr
 8006bc4:	20000014 	.word	0x20000014
 8006bc8:	ffff0208 	.word	0xffff0208

08006bcc <__ssputs_r>:
 8006bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd0:	688e      	ldr	r6, [r1, #8]
 8006bd2:	429e      	cmp	r6, r3
 8006bd4:	4682      	mov	sl, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	4690      	mov	r8, r2
 8006bda:	4699      	mov	r9, r3
 8006bdc:	d837      	bhi.n	8006c4e <__ssputs_r+0x82>
 8006bde:	898a      	ldrh	r2, [r1, #12]
 8006be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006be4:	d031      	beq.n	8006c4a <__ssputs_r+0x7e>
 8006be6:	6825      	ldr	r5, [r4, #0]
 8006be8:	6909      	ldr	r1, [r1, #16]
 8006bea:	1a6f      	subs	r7, r5, r1
 8006bec:	6965      	ldr	r5, [r4, #20]
 8006bee:	2302      	movs	r3, #2
 8006bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bf4:	fb95 f5f3 	sdiv	r5, r5, r3
 8006bf8:	f109 0301 	add.w	r3, r9, #1
 8006bfc:	443b      	add	r3, r7
 8006bfe:	429d      	cmp	r5, r3
 8006c00:	bf38      	it	cc
 8006c02:	461d      	movcc	r5, r3
 8006c04:	0553      	lsls	r3, r2, #21
 8006c06:	d530      	bpl.n	8006c6a <__ssputs_r+0x9e>
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f000 fb21 	bl	8007250 <_malloc_r>
 8006c0e:	4606      	mov	r6, r0
 8006c10:	b950      	cbnz	r0, 8006c28 <__ssputs_r+0x5c>
 8006c12:	230c      	movs	r3, #12
 8006c14:	f8ca 3000 	str.w	r3, [sl]
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295
 8006c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c28:	463a      	mov	r2, r7
 8006c2a:	6921      	ldr	r1, [r4, #16]
 8006c2c:	f7ff ff9a 	bl	8006b64 <memcpy>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	6126      	str	r6, [r4, #16]
 8006c3e:	6165      	str	r5, [r4, #20]
 8006c40:	443e      	add	r6, r7
 8006c42:	1bed      	subs	r5, r5, r7
 8006c44:	6026      	str	r6, [r4, #0]
 8006c46:	60a5      	str	r5, [r4, #8]
 8006c48:	464e      	mov	r6, r9
 8006c4a:	454e      	cmp	r6, r9
 8006c4c:	d900      	bls.n	8006c50 <__ssputs_r+0x84>
 8006c4e:	464e      	mov	r6, r9
 8006c50:	4632      	mov	r2, r6
 8006c52:	4641      	mov	r1, r8
 8006c54:	6820      	ldr	r0, [r4, #0]
 8006c56:	f000 fa93 	bl	8007180 <memmove>
 8006c5a:	68a3      	ldr	r3, [r4, #8]
 8006c5c:	1b9b      	subs	r3, r3, r6
 8006c5e:	60a3      	str	r3, [r4, #8]
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	441e      	add	r6, r3
 8006c64:	6026      	str	r6, [r4, #0]
 8006c66:	2000      	movs	r0, #0
 8006c68:	e7dc      	b.n	8006c24 <__ssputs_r+0x58>
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	f000 fb4a 	bl	8007304 <_realloc_r>
 8006c70:	4606      	mov	r6, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d1e2      	bne.n	8006c3c <__ssputs_r+0x70>
 8006c76:	6921      	ldr	r1, [r4, #16]
 8006c78:	4650      	mov	r0, sl
 8006c7a:	f000 fa9b 	bl	80071b4 <_free_r>
 8006c7e:	e7c8      	b.n	8006c12 <__ssputs_r+0x46>

08006c80 <_svfiprintf_r>:
 8006c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c84:	461d      	mov	r5, r3
 8006c86:	898b      	ldrh	r3, [r1, #12]
 8006c88:	061f      	lsls	r7, r3, #24
 8006c8a:	b09d      	sub	sp, #116	; 0x74
 8006c8c:	4680      	mov	r8, r0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	4616      	mov	r6, r2
 8006c92:	d50f      	bpl.n	8006cb4 <_svfiprintf_r+0x34>
 8006c94:	690b      	ldr	r3, [r1, #16]
 8006c96:	b96b      	cbnz	r3, 8006cb4 <_svfiprintf_r+0x34>
 8006c98:	2140      	movs	r1, #64	; 0x40
 8006c9a:	f000 fad9 	bl	8007250 <_malloc_r>
 8006c9e:	6020      	str	r0, [r4, #0]
 8006ca0:	6120      	str	r0, [r4, #16]
 8006ca2:	b928      	cbnz	r0, 8006cb0 <_svfiprintf_r+0x30>
 8006ca4:	230c      	movs	r3, #12
 8006ca6:	f8c8 3000 	str.w	r3, [r8]
 8006caa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cae:	e0c8      	b.n	8006e42 <_svfiprintf_r+0x1c2>
 8006cb0:	2340      	movs	r3, #64	; 0x40
 8006cb2:	6163      	str	r3, [r4, #20]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb8:	2320      	movs	r3, #32
 8006cba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cbe:	2330      	movs	r3, #48	; 0x30
 8006cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cc4:	9503      	str	r5, [sp, #12]
 8006cc6:	f04f 0b01 	mov.w	fp, #1
 8006cca:	4637      	mov	r7, r6
 8006ccc:	463d      	mov	r5, r7
 8006cce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006cd2:	b10b      	cbz	r3, 8006cd8 <_svfiprintf_r+0x58>
 8006cd4:	2b25      	cmp	r3, #37	; 0x25
 8006cd6:	d13e      	bne.n	8006d56 <_svfiprintf_r+0xd6>
 8006cd8:	ebb7 0a06 	subs.w	sl, r7, r6
 8006cdc:	d00b      	beq.n	8006cf6 <_svfiprintf_r+0x76>
 8006cde:	4653      	mov	r3, sl
 8006ce0:	4632      	mov	r2, r6
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	4640      	mov	r0, r8
 8006ce6:	f7ff ff71 	bl	8006bcc <__ssputs_r>
 8006cea:	3001      	adds	r0, #1
 8006cec:	f000 80a4 	beq.w	8006e38 <_svfiprintf_r+0x1b8>
 8006cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf2:	4453      	add	r3, sl
 8006cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf6:	783b      	ldrb	r3, [r7, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 809d 	beq.w	8006e38 <_svfiprintf_r+0x1b8>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f04f 32ff 	mov.w	r2, #4294967295
 8006d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d08:	9304      	str	r3, [sp, #16]
 8006d0a:	9307      	str	r3, [sp, #28]
 8006d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d10:	931a      	str	r3, [sp, #104]	; 0x68
 8006d12:	462f      	mov	r7, r5
 8006d14:	2205      	movs	r2, #5
 8006d16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006d1a:	4850      	ldr	r0, [pc, #320]	; (8006e5c <_svfiprintf_r+0x1dc>)
 8006d1c:	f7f9 fa80 	bl	8000220 <memchr>
 8006d20:	9b04      	ldr	r3, [sp, #16]
 8006d22:	b9d0      	cbnz	r0, 8006d5a <_svfiprintf_r+0xda>
 8006d24:	06d9      	lsls	r1, r3, #27
 8006d26:	bf44      	itt	mi
 8006d28:	2220      	movmi	r2, #32
 8006d2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d2e:	071a      	lsls	r2, r3, #28
 8006d30:	bf44      	itt	mi
 8006d32:	222b      	movmi	r2, #43	; 0x2b
 8006d34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d38:	782a      	ldrb	r2, [r5, #0]
 8006d3a:	2a2a      	cmp	r2, #42	; 0x2a
 8006d3c:	d015      	beq.n	8006d6a <_svfiprintf_r+0xea>
 8006d3e:	9a07      	ldr	r2, [sp, #28]
 8006d40:	462f      	mov	r7, r5
 8006d42:	2000      	movs	r0, #0
 8006d44:	250a      	movs	r5, #10
 8006d46:	4639      	mov	r1, r7
 8006d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d4c:	3b30      	subs	r3, #48	; 0x30
 8006d4e:	2b09      	cmp	r3, #9
 8006d50:	d94d      	bls.n	8006dee <_svfiprintf_r+0x16e>
 8006d52:	b1b8      	cbz	r0, 8006d84 <_svfiprintf_r+0x104>
 8006d54:	e00f      	b.n	8006d76 <_svfiprintf_r+0xf6>
 8006d56:	462f      	mov	r7, r5
 8006d58:	e7b8      	b.n	8006ccc <_svfiprintf_r+0x4c>
 8006d5a:	4a40      	ldr	r2, [pc, #256]	; (8006e5c <_svfiprintf_r+0x1dc>)
 8006d5c:	1a80      	subs	r0, r0, r2
 8006d5e:	fa0b f000 	lsl.w	r0, fp, r0
 8006d62:	4318      	orrs	r0, r3
 8006d64:	9004      	str	r0, [sp, #16]
 8006d66:	463d      	mov	r5, r7
 8006d68:	e7d3      	b.n	8006d12 <_svfiprintf_r+0x92>
 8006d6a:	9a03      	ldr	r2, [sp, #12]
 8006d6c:	1d11      	adds	r1, r2, #4
 8006d6e:	6812      	ldr	r2, [r2, #0]
 8006d70:	9103      	str	r1, [sp, #12]
 8006d72:	2a00      	cmp	r2, #0
 8006d74:	db01      	blt.n	8006d7a <_svfiprintf_r+0xfa>
 8006d76:	9207      	str	r2, [sp, #28]
 8006d78:	e004      	b.n	8006d84 <_svfiprintf_r+0x104>
 8006d7a:	4252      	negs	r2, r2
 8006d7c:	f043 0302 	orr.w	r3, r3, #2
 8006d80:	9207      	str	r2, [sp, #28]
 8006d82:	9304      	str	r3, [sp, #16]
 8006d84:	783b      	ldrb	r3, [r7, #0]
 8006d86:	2b2e      	cmp	r3, #46	; 0x2e
 8006d88:	d10c      	bne.n	8006da4 <_svfiprintf_r+0x124>
 8006d8a:	787b      	ldrb	r3, [r7, #1]
 8006d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d8e:	d133      	bne.n	8006df8 <_svfiprintf_r+0x178>
 8006d90:	9b03      	ldr	r3, [sp, #12]
 8006d92:	1d1a      	adds	r2, r3, #4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	9203      	str	r2, [sp, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bfb8      	it	lt
 8006d9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006da0:	3702      	adds	r7, #2
 8006da2:	9305      	str	r3, [sp, #20]
 8006da4:	4d2e      	ldr	r5, [pc, #184]	; (8006e60 <_svfiprintf_r+0x1e0>)
 8006da6:	7839      	ldrb	r1, [r7, #0]
 8006da8:	2203      	movs	r2, #3
 8006daa:	4628      	mov	r0, r5
 8006dac:	f7f9 fa38 	bl	8000220 <memchr>
 8006db0:	b138      	cbz	r0, 8006dc2 <_svfiprintf_r+0x142>
 8006db2:	2340      	movs	r3, #64	; 0x40
 8006db4:	1b40      	subs	r0, r0, r5
 8006db6:	fa03 f000 	lsl.w	r0, r3, r0
 8006dba:	9b04      	ldr	r3, [sp, #16]
 8006dbc:	4303      	orrs	r3, r0
 8006dbe:	3701      	adds	r7, #1
 8006dc0:	9304      	str	r3, [sp, #16]
 8006dc2:	7839      	ldrb	r1, [r7, #0]
 8006dc4:	4827      	ldr	r0, [pc, #156]	; (8006e64 <_svfiprintf_r+0x1e4>)
 8006dc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dca:	2206      	movs	r2, #6
 8006dcc:	1c7e      	adds	r6, r7, #1
 8006dce:	f7f9 fa27 	bl	8000220 <memchr>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d038      	beq.n	8006e48 <_svfiprintf_r+0x1c8>
 8006dd6:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <_svfiprintf_r+0x1e8>)
 8006dd8:	bb13      	cbnz	r3, 8006e20 <_svfiprintf_r+0x1a0>
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	3307      	adds	r3, #7
 8006dde:	f023 0307 	bic.w	r3, r3, #7
 8006de2:	3308      	adds	r3, #8
 8006de4:	9303      	str	r3, [sp, #12]
 8006de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de8:	444b      	add	r3, r9
 8006dea:	9309      	str	r3, [sp, #36]	; 0x24
 8006dec:	e76d      	b.n	8006cca <_svfiprintf_r+0x4a>
 8006dee:	fb05 3202 	mla	r2, r5, r2, r3
 8006df2:	2001      	movs	r0, #1
 8006df4:	460f      	mov	r7, r1
 8006df6:	e7a6      	b.n	8006d46 <_svfiprintf_r+0xc6>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	3701      	adds	r7, #1
 8006dfc:	9305      	str	r3, [sp, #20]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	250a      	movs	r5, #10
 8006e02:	4638      	mov	r0, r7
 8006e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e08:	3a30      	subs	r2, #48	; 0x30
 8006e0a:	2a09      	cmp	r2, #9
 8006e0c:	d903      	bls.n	8006e16 <_svfiprintf_r+0x196>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0c8      	beq.n	8006da4 <_svfiprintf_r+0x124>
 8006e12:	9105      	str	r1, [sp, #20]
 8006e14:	e7c6      	b.n	8006da4 <_svfiprintf_r+0x124>
 8006e16:	fb05 2101 	mla	r1, r5, r1, r2
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	4607      	mov	r7, r0
 8006e1e:	e7f0      	b.n	8006e02 <_svfiprintf_r+0x182>
 8006e20:	ab03      	add	r3, sp, #12
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	4622      	mov	r2, r4
 8006e26:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <_svfiprintf_r+0x1ec>)
 8006e28:	a904      	add	r1, sp, #16
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	f3af 8000 	nop.w
 8006e30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e34:	4681      	mov	r9, r0
 8006e36:	d1d6      	bne.n	8006de6 <_svfiprintf_r+0x166>
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	065b      	lsls	r3, r3, #25
 8006e3c:	f53f af35 	bmi.w	8006caa <_svfiprintf_r+0x2a>
 8006e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e42:	b01d      	add	sp, #116	; 0x74
 8006e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e48:	ab03      	add	r3, sp, #12
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	4622      	mov	r2, r4
 8006e4e:	4b07      	ldr	r3, [pc, #28]	; (8006e6c <_svfiprintf_r+0x1ec>)
 8006e50:	a904      	add	r1, sp, #16
 8006e52:	4640      	mov	r0, r8
 8006e54:	f000 f882 	bl	8006f5c <_printf_i>
 8006e58:	e7ea      	b.n	8006e30 <_svfiprintf_r+0x1b0>
 8006e5a:	bf00      	nop
 8006e5c:	08007418 	.word	0x08007418
 8006e60:	0800741e 	.word	0x0800741e
 8006e64:	08007422 	.word	0x08007422
 8006e68:	00000000 	.word	0x00000000
 8006e6c:	08006bcd 	.word	0x08006bcd

08006e70 <_printf_common>:
 8006e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e74:	4691      	mov	r9, r2
 8006e76:	461f      	mov	r7, r3
 8006e78:	688a      	ldr	r2, [r1, #8]
 8006e7a:	690b      	ldr	r3, [r1, #16]
 8006e7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e80:	4293      	cmp	r3, r2
 8006e82:	bfb8      	it	lt
 8006e84:	4613      	movlt	r3, r2
 8006e86:	f8c9 3000 	str.w	r3, [r9]
 8006e8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460c      	mov	r4, r1
 8006e92:	b112      	cbz	r2, 8006e9a <_printf_common+0x2a>
 8006e94:	3301      	adds	r3, #1
 8006e96:	f8c9 3000 	str.w	r3, [r9]
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	0699      	lsls	r1, r3, #26
 8006e9e:	bf42      	ittt	mi
 8006ea0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ea4:	3302      	addmi	r3, #2
 8006ea6:	f8c9 3000 	strmi.w	r3, [r9]
 8006eaa:	6825      	ldr	r5, [r4, #0]
 8006eac:	f015 0506 	ands.w	r5, r5, #6
 8006eb0:	d107      	bne.n	8006ec2 <_printf_common+0x52>
 8006eb2:	f104 0a19 	add.w	sl, r4, #25
 8006eb6:	68e3      	ldr	r3, [r4, #12]
 8006eb8:	f8d9 2000 	ldr.w	r2, [r9]
 8006ebc:	1a9b      	subs	r3, r3, r2
 8006ebe:	42ab      	cmp	r3, r5
 8006ec0:	dc28      	bgt.n	8006f14 <_printf_common+0xa4>
 8006ec2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ec6:	6822      	ldr	r2, [r4, #0]
 8006ec8:	3300      	adds	r3, #0
 8006eca:	bf18      	it	ne
 8006ecc:	2301      	movne	r3, #1
 8006ece:	0692      	lsls	r2, r2, #26
 8006ed0:	d42d      	bmi.n	8006f2e <_printf_common+0xbe>
 8006ed2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ed6:	4639      	mov	r1, r7
 8006ed8:	4630      	mov	r0, r6
 8006eda:	47c0      	blx	r8
 8006edc:	3001      	adds	r0, #1
 8006ede:	d020      	beq.n	8006f22 <_printf_common+0xb2>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	68e5      	ldr	r5, [r4, #12]
 8006ee4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ee8:	f003 0306 	and.w	r3, r3, #6
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	bf08      	it	eq
 8006ef0:	1aad      	subeq	r5, r5, r2
 8006ef2:	68a3      	ldr	r3, [r4, #8]
 8006ef4:	6922      	ldr	r2, [r4, #16]
 8006ef6:	bf0c      	ite	eq
 8006ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006efc:	2500      	movne	r5, #0
 8006efe:	4293      	cmp	r3, r2
 8006f00:	bfc4      	itt	gt
 8006f02:	1a9b      	subgt	r3, r3, r2
 8006f04:	18ed      	addgt	r5, r5, r3
 8006f06:	f04f 0900 	mov.w	r9, #0
 8006f0a:	341a      	adds	r4, #26
 8006f0c:	454d      	cmp	r5, r9
 8006f0e:	d11a      	bne.n	8006f46 <_printf_common+0xd6>
 8006f10:	2000      	movs	r0, #0
 8006f12:	e008      	b.n	8006f26 <_printf_common+0xb6>
 8006f14:	2301      	movs	r3, #1
 8006f16:	4652      	mov	r2, sl
 8006f18:	4639      	mov	r1, r7
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	47c0      	blx	r8
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d103      	bne.n	8006f2a <_printf_common+0xba>
 8006f22:	f04f 30ff 	mov.w	r0, #4294967295
 8006f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f2a:	3501      	adds	r5, #1
 8006f2c:	e7c3      	b.n	8006eb6 <_printf_common+0x46>
 8006f2e:	18e1      	adds	r1, r4, r3
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	2030      	movs	r0, #48	; 0x30
 8006f34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f38:	4422      	add	r2, r4
 8006f3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f42:	3302      	adds	r3, #2
 8006f44:	e7c5      	b.n	8006ed2 <_printf_common+0x62>
 8006f46:	2301      	movs	r3, #1
 8006f48:	4622      	mov	r2, r4
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	47c0      	blx	r8
 8006f50:	3001      	adds	r0, #1
 8006f52:	d0e6      	beq.n	8006f22 <_printf_common+0xb2>
 8006f54:	f109 0901 	add.w	r9, r9, #1
 8006f58:	e7d8      	b.n	8006f0c <_printf_common+0x9c>
	...

08006f5c <_printf_i>:
 8006f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f64:	460c      	mov	r4, r1
 8006f66:	7e09      	ldrb	r1, [r1, #24]
 8006f68:	b085      	sub	sp, #20
 8006f6a:	296e      	cmp	r1, #110	; 0x6e
 8006f6c:	4617      	mov	r7, r2
 8006f6e:	4606      	mov	r6, r0
 8006f70:	4698      	mov	r8, r3
 8006f72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f74:	f000 80b3 	beq.w	80070de <_printf_i+0x182>
 8006f78:	d822      	bhi.n	8006fc0 <_printf_i+0x64>
 8006f7a:	2963      	cmp	r1, #99	; 0x63
 8006f7c:	d036      	beq.n	8006fec <_printf_i+0x90>
 8006f7e:	d80a      	bhi.n	8006f96 <_printf_i+0x3a>
 8006f80:	2900      	cmp	r1, #0
 8006f82:	f000 80b9 	beq.w	80070f8 <_printf_i+0x19c>
 8006f86:	2958      	cmp	r1, #88	; 0x58
 8006f88:	f000 8083 	beq.w	8007092 <_printf_i+0x136>
 8006f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f94:	e032      	b.n	8006ffc <_printf_i+0xa0>
 8006f96:	2964      	cmp	r1, #100	; 0x64
 8006f98:	d001      	beq.n	8006f9e <_printf_i+0x42>
 8006f9a:	2969      	cmp	r1, #105	; 0x69
 8006f9c:	d1f6      	bne.n	8006f8c <_printf_i+0x30>
 8006f9e:	6820      	ldr	r0, [r4, #0]
 8006fa0:	6813      	ldr	r3, [r2, #0]
 8006fa2:	0605      	lsls	r5, r0, #24
 8006fa4:	f103 0104 	add.w	r1, r3, #4
 8006fa8:	d52a      	bpl.n	8007000 <_printf_i+0xa4>
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6011      	str	r1, [r2, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	da03      	bge.n	8006fba <_printf_i+0x5e>
 8006fb2:	222d      	movs	r2, #45	; 0x2d
 8006fb4:	425b      	negs	r3, r3
 8006fb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006fba:	486f      	ldr	r0, [pc, #444]	; (8007178 <_printf_i+0x21c>)
 8006fbc:	220a      	movs	r2, #10
 8006fbe:	e039      	b.n	8007034 <_printf_i+0xd8>
 8006fc0:	2973      	cmp	r1, #115	; 0x73
 8006fc2:	f000 809d 	beq.w	8007100 <_printf_i+0x1a4>
 8006fc6:	d808      	bhi.n	8006fda <_printf_i+0x7e>
 8006fc8:	296f      	cmp	r1, #111	; 0x6f
 8006fca:	d020      	beq.n	800700e <_printf_i+0xb2>
 8006fcc:	2970      	cmp	r1, #112	; 0x70
 8006fce:	d1dd      	bne.n	8006f8c <_printf_i+0x30>
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	f043 0320 	orr.w	r3, r3, #32
 8006fd6:	6023      	str	r3, [r4, #0]
 8006fd8:	e003      	b.n	8006fe2 <_printf_i+0x86>
 8006fda:	2975      	cmp	r1, #117	; 0x75
 8006fdc:	d017      	beq.n	800700e <_printf_i+0xb2>
 8006fde:	2978      	cmp	r1, #120	; 0x78
 8006fe0:	d1d4      	bne.n	8006f8c <_printf_i+0x30>
 8006fe2:	2378      	movs	r3, #120	; 0x78
 8006fe4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fe8:	4864      	ldr	r0, [pc, #400]	; (800717c <_printf_i+0x220>)
 8006fea:	e055      	b.n	8007098 <_printf_i+0x13c>
 8006fec:	6813      	ldr	r3, [r2, #0]
 8006fee:	1d19      	adds	r1, r3, #4
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6011      	str	r1, [r2, #0]
 8006ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e08c      	b.n	800711a <_printf_i+0x1be>
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6011      	str	r1, [r2, #0]
 8007004:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007008:	bf18      	it	ne
 800700a:	b21b      	sxthne	r3, r3
 800700c:	e7cf      	b.n	8006fae <_printf_i+0x52>
 800700e:	6813      	ldr	r3, [r2, #0]
 8007010:	6825      	ldr	r5, [r4, #0]
 8007012:	1d18      	adds	r0, r3, #4
 8007014:	6010      	str	r0, [r2, #0]
 8007016:	0628      	lsls	r0, r5, #24
 8007018:	d501      	bpl.n	800701e <_printf_i+0xc2>
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	e002      	b.n	8007024 <_printf_i+0xc8>
 800701e:	0668      	lsls	r0, r5, #25
 8007020:	d5fb      	bpl.n	800701a <_printf_i+0xbe>
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	4854      	ldr	r0, [pc, #336]	; (8007178 <_printf_i+0x21c>)
 8007026:	296f      	cmp	r1, #111	; 0x6f
 8007028:	bf14      	ite	ne
 800702a:	220a      	movne	r2, #10
 800702c:	2208      	moveq	r2, #8
 800702e:	2100      	movs	r1, #0
 8007030:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007034:	6865      	ldr	r5, [r4, #4]
 8007036:	60a5      	str	r5, [r4, #8]
 8007038:	2d00      	cmp	r5, #0
 800703a:	f2c0 8095 	blt.w	8007168 <_printf_i+0x20c>
 800703e:	6821      	ldr	r1, [r4, #0]
 8007040:	f021 0104 	bic.w	r1, r1, #4
 8007044:	6021      	str	r1, [r4, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d13d      	bne.n	80070c6 <_printf_i+0x16a>
 800704a:	2d00      	cmp	r5, #0
 800704c:	f040 808e 	bne.w	800716c <_printf_i+0x210>
 8007050:	4665      	mov	r5, ip
 8007052:	2a08      	cmp	r2, #8
 8007054:	d10b      	bne.n	800706e <_printf_i+0x112>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	07db      	lsls	r3, r3, #31
 800705a:	d508      	bpl.n	800706e <_printf_i+0x112>
 800705c:	6923      	ldr	r3, [r4, #16]
 800705e:	6862      	ldr	r2, [r4, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	bfde      	ittt	le
 8007064:	2330      	movle	r3, #48	; 0x30
 8007066:	f805 3c01 	strble.w	r3, [r5, #-1]
 800706a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800706e:	ebac 0305 	sub.w	r3, ip, r5
 8007072:	6123      	str	r3, [r4, #16]
 8007074:	f8cd 8000 	str.w	r8, [sp]
 8007078:	463b      	mov	r3, r7
 800707a:	aa03      	add	r2, sp, #12
 800707c:	4621      	mov	r1, r4
 800707e:	4630      	mov	r0, r6
 8007080:	f7ff fef6 	bl	8006e70 <_printf_common>
 8007084:	3001      	adds	r0, #1
 8007086:	d14d      	bne.n	8007124 <_printf_i+0x1c8>
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	b005      	add	sp, #20
 800708e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007092:	4839      	ldr	r0, [pc, #228]	; (8007178 <_printf_i+0x21c>)
 8007094:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007098:	6813      	ldr	r3, [r2, #0]
 800709a:	6821      	ldr	r1, [r4, #0]
 800709c:	1d1d      	adds	r5, r3, #4
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6015      	str	r5, [r2, #0]
 80070a2:	060a      	lsls	r2, r1, #24
 80070a4:	d50b      	bpl.n	80070be <_printf_i+0x162>
 80070a6:	07ca      	lsls	r2, r1, #31
 80070a8:	bf44      	itt	mi
 80070aa:	f041 0120 	orrmi.w	r1, r1, #32
 80070ae:	6021      	strmi	r1, [r4, #0]
 80070b0:	b91b      	cbnz	r3, 80070ba <_printf_i+0x15e>
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	f022 0220 	bic.w	r2, r2, #32
 80070b8:	6022      	str	r2, [r4, #0]
 80070ba:	2210      	movs	r2, #16
 80070bc:	e7b7      	b.n	800702e <_printf_i+0xd2>
 80070be:	064d      	lsls	r5, r1, #25
 80070c0:	bf48      	it	mi
 80070c2:	b29b      	uxthmi	r3, r3
 80070c4:	e7ef      	b.n	80070a6 <_printf_i+0x14a>
 80070c6:	4665      	mov	r5, ip
 80070c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80070cc:	fb02 3311 	mls	r3, r2, r1, r3
 80070d0:	5cc3      	ldrb	r3, [r0, r3]
 80070d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80070d6:	460b      	mov	r3, r1
 80070d8:	2900      	cmp	r1, #0
 80070da:	d1f5      	bne.n	80070c8 <_printf_i+0x16c>
 80070dc:	e7b9      	b.n	8007052 <_printf_i+0xf6>
 80070de:	6813      	ldr	r3, [r2, #0]
 80070e0:	6825      	ldr	r5, [r4, #0]
 80070e2:	6961      	ldr	r1, [r4, #20]
 80070e4:	1d18      	adds	r0, r3, #4
 80070e6:	6010      	str	r0, [r2, #0]
 80070e8:	0628      	lsls	r0, r5, #24
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	d501      	bpl.n	80070f2 <_printf_i+0x196>
 80070ee:	6019      	str	r1, [r3, #0]
 80070f0:	e002      	b.n	80070f8 <_printf_i+0x19c>
 80070f2:	066a      	lsls	r2, r5, #25
 80070f4:	d5fb      	bpl.n	80070ee <_printf_i+0x192>
 80070f6:	8019      	strh	r1, [r3, #0]
 80070f8:	2300      	movs	r3, #0
 80070fa:	6123      	str	r3, [r4, #16]
 80070fc:	4665      	mov	r5, ip
 80070fe:	e7b9      	b.n	8007074 <_printf_i+0x118>
 8007100:	6813      	ldr	r3, [r2, #0]
 8007102:	1d19      	adds	r1, r3, #4
 8007104:	6011      	str	r1, [r2, #0]
 8007106:	681d      	ldr	r5, [r3, #0]
 8007108:	6862      	ldr	r2, [r4, #4]
 800710a:	2100      	movs	r1, #0
 800710c:	4628      	mov	r0, r5
 800710e:	f7f9 f887 	bl	8000220 <memchr>
 8007112:	b108      	cbz	r0, 8007118 <_printf_i+0x1bc>
 8007114:	1b40      	subs	r0, r0, r5
 8007116:	6060      	str	r0, [r4, #4]
 8007118:	6863      	ldr	r3, [r4, #4]
 800711a:	6123      	str	r3, [r4, #16]
 800711c:	2300      	movs	r3, #0
 800711e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007122:	e7a7      	b.n	8007074 <_printf_i+0x118>
 8007124:	6923      	ldr	r3, [r4, #16]
 8007126:	462a      	mov	r2, r5
 8007128:	4639      	mov	r1, r7
 800712a:	4630      	mov	r0, r6
 800712c:	47c0      	blx	r8
 800712e:	3001      	adds	r0, #1
 8007130:	d0aa      	beq.n	8007088 <_printf_i+0x12c>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	079b      	lsls	r3, r3, #30
 8007136:	d413      	bmi.n	8007160 <_printf_i+0x204>
 8007138:	68e0      	ldr	r0, [r4, #12]
 800713a:	9b03      	ldr	r3, [sp, #12]
 800713c:	4298      	cmp	r0, r3
 800713e:	bfb8      	it	lt
 8007140:	4618      	movlt	r0, r3
 8007142:	e7a3      	b.n	800708c <_printf_i+0x130>
 8007144:	2301      	movs	r3, #1
 8007146:	464a      	mov	r2, r9
 8007148:	4639      	mov	r1, r7
 800714a:	4630      	mov	r0, r6
 800714c:	47c0      	blx	r8
 800714e:	3001      	adds	r0, #1
 8007150:	d09a      	beq.n	8007088 <_printf_i+0x12c>
 8007152:	3501      	adds	r5, #1
 8007154:	68e3      	ldr	r3, [r4, #12]
 8007156:	9a03      	ldr	r2, [sp, #12]
 8007158:	1a9b      	subs	r3, r3, r2
 800715a:	42ab      	cmp	r3, r5
 800715c:	dcf2      	bgt.n	8007144 <_printf_i+0x1e8>
 800715e:	e7eb      	b.n	8007138 <_printf_i+0x1dc>
 8007160:	2500      	movs	r5, #0
 8007162:	f104 0919 	add.w	r9, r4, #25
 8007166:	e7f5      	b.n	8007154 <_printf_i+0x1f8>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1ac      	bne.n	80070c6 <_printf_i+0x16a>
 800716c:	7803      	ldrb	r3, [r0, #0]
 800716e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007172:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007176:	e76c      	b.n	8007052 <_printf_i+0xf6>
 8007178:	08007429 	.word	0x08007429
 800717c:	0800743a 	.word	0x0800743a

08007180 <memmove>:
 8007180:	4288      	cmp	r0, r1
 8007182:	b510      	push	{r4, lr}
 8007184:	eb01 0302 	add.w	r3, r1, r2
 8007188:	d807      	bhi.n	800719a <memmove+0x1a>
 800718a:	1e42      	subs	r2, r0, #1
 800718c:	4299      	cmp	r1, r3
 800718e:	d00a      	beq.n	80071a6 <memmove+0x26>
 8007190:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007194:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007198:	e7f8      	b.n	800718c <memmove+0xc>
 800719a:	4283      	cmp	r3, r0
 800719c:	d9f5      	bls.n	800718a <memmove+0xa>
 800719e:	1881      	adds	r1, r0, r2
 80071a0:	1ad2      	subs	r2, r2, r3
 80071a2:	42d3      	cmn	r3, r2
 80071a4:	d100      	bne.n	80071a8 <memmove+0x28>
 80071a6:	bd10      	pop	{r4, pc}
 80071a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80071b0:	e7f7      	b.n	80071a2 <memmove+0x22>
	...

080071b4 <_free_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4605      	mov	r5, r0
 80071b8:	2900      	cmp	r1, #0
 80071ba:	d045      	beq.n	8007248 <_free_r+0x94>
 80071bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071c0:	1f0c      	subs	r4, r1, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bfb8      	it	lt
 80071c6:	18e4      	addlt	r4, r4, r3
 80071c8:	f000 f8d2 	bl	8007370 <__malloc_lock>
 80071cc:	4a1f      	ldr	r2, [pc, #124]	; (800724c <_free_r+0x98>)
 80071ce:	6813      	ldr	r3, [r2, #0]
 80071d0:	4610      	mov	r0, r2
 80071d2:	b933      	cbnz	r3, 80071e2 <_free_r+0x2e>
 80071d4:	6063      	str	r3, [r4, #4]
 80071d6:	6014      	str	r4, [r2, #0]
 80071d8:	4628      	mov	r0, r5
 80071da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071de:	f000 b8c8 	b.w	8007372 <__malloc_unlock>
 80071e2:	42a3      	cmp	r3, r4
 80071e4:	d90c      	bls.n	8007200 <_free_r+0x4c>
 80071e6:	6821      	ldr	r1, [r4, #0]
 80071e8:	1862      	adds	r2, r4, r1
 80071ea:	4293      	cmp	r3, r2
 80071ec:	bf04      	itt	eq
 80071ee:	681a      	ldreq	r2, [r3, #0]
 80071f0:	685b      	ldreq	r3, [r3, #4]
 80071f2:	6063      	str	r3, [r4, #4]
 80071f4:	bf04      	itt	eq
 80071f6:	1852      	addeq	r2, r2, r1
 80071f8:	6022      	streq	r2, [r4, #0]
 80071fa:	6004      	str	r4, [r0, #0]
 80071fc:	e7ec      	b.n	80071d8 <_free_r+0x24>
 80071fe:	4613      	mov	r3, r2
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	b10a      	cbz	r2, 8007208 <_free_r+0x54>
 8007204:	42a2      	cmp	r2, r4
 8007206:	d9fa      	bls.n	80071fe <_free_r+0x4a>
 8007208:	6819      	ldr	r1, [r3, #0]
 800720a:	1858      	adds	r0, r3, r1
 800720c:	42a0      	cmp	r0, r4
 800720e:	d10b      	bne.n	8007228 <_free_r+0x74>
 8007210:	6820      	ldr	r0, [r4, #0]
 8007212:	4401      	add	r1, r0
 8007214:	1858      	adds	r0, r3, r1
 8007216:	4282      	cmp	r2, r0
 8007218:	6019      	str	r1, [r3, #0]
 800721a:	d1dd      	bne.n	80071d8 <_free_r+0x24>
 800721c:	6810      	ldr	r0, [r2, #0]
 800721e:	6852      	ldr	r2, [r2, #4]
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	4401      	add	r1, r0
 8007224:	6019      	str	r1, [r3, #0]
 8007226:	e7d7      	b.n	80071d8 <_free_r+0x24>
 8007228:	d902      	bls.n	8007230 <_free_r+0x7c>
 800722a:	230c      	movs	r3, #12
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	e7d3      	b.n	80071d8 <_free_r+0x24>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	1821      	adds	r1, r4, r0
 8007234:	428a      	cmp	r2, r1
 8007236:	bf04      	itt	eq
 8007238:	6811      	ldreq	r1, [r2, #0]
 800723a:	6852      	ldreq	r2, [r2, #4]
 800723c:	6062      	str	r2, [r4, #4]
 800723e:	bf04      	itt	eq
 8007240:	1809      	addeq	r1, r1, r0
 8007242:	6021      	streq	r1, [r4, #0]
 8007244:	605c      	str	r4, [r3, #4]
 8007246:	e7c7      	b.n	80071d8 <_free_r+0x24>
 8007248:	bd38      	pop	{r3, r4, r5, pc}
 800724a:	bf00      	nop
 800724c:	200040b0 	.word	0x200040b0

08007250 <_malloc_r>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	1ccd      	adds	r5, r1, #3
 8007254:	f025 0503 	bic.w	r5, r5, #3
 8007258:	3508      	adds	r5, #8
 800725a:	2d0c      	cmp	r5, #12
 800725c:	bf38      	it	cc
 800725e:	250c      	movcc	r5, #12
 8007260:	2d00      	cmp	r5, #0
 8007262:	4606      	mov	r6, r0
 8007264:	db01      	blt.n	800726a <_malloc_r+0x1a>
 8007266:	42a9      	cmp	r1, r5
 8007268:	d903      	bls.n	8007272 <_malloc_r+0x22>
 800726a:	230c      	movs	r3, #12
 800726c:	6033      	str	r3, [r6, #0]
 800726e:	2000      	movs	r0, #0
 8007270:	bd70      	pop	{r4, r5, r6, pc}
 8007272:	f000 f87d 	bl	8007370 <__malloc_lock>
 8007276:	4a21      	ldr	r2, [pc, #132]	; (80072fc <_malloc_r+0xac>)
 8007278:	6814      	ldr	r4, [r2, #0]
 800727a:	4621      	mov	r1, r4
 800727c:	b991      	cbnz	r1, 80072a4 <_malloc_r+0x54>
 800727e:	4c20      	ldr	r4, [pc, #128]	; (8007300 <_malloc_r+0xb0>)
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	b91b      	cbnz	r3, 800728c <_malloc_r+0x3c>
 8007284:	4630      	mov	r0, r6
 8007286:	f000 f863 	bl	8007350 <_sbrk_r>
 800728a:	6020      	str	r0, [r4, #0]
 800728c:	4629      	mov	r1, r5
 800728e:	4630      	mov	r0, r6
 8007290:	f000 f85e 	bl	8007350 <_sbrk_r>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d124      	bne.n	80072e2 <_malloc_r+0x92>
 8007298:	230c      	movs	r3, #12
 800729a:	6033      	str	r3, [r6, #0]
 800729c:	4630      	mov	r0, r6
 800729e:	f000 f868 	bl	8007372 <__malloc_unlock>
 80072a2:	e7e4      	b.n	800726e <_malloc_r+0x1e>
 80072a4:	680b      	ldr	r3, [r1, #0]
 80072a6:	1b5b      	subs	r3, r3, r5
 80072a8:	d418      	bmi.n	80072dc <_malloc_r+0x8c>
 80072aa:	2b0b      	cmp	r3, #11
 80072ac:	d90f      	bls.n	80072ce <_malloc_r+0x7e>
 80072ae:	600b      	str	r3, [r1, #0]
 80072b0:	50cd      	str	r5, [r1, r3]
 80072b2:	18cc      	adds	r4, r1, r3
 80072b4:	4630      	mov	r0, r6
 80072b6:	f000 f85c 	bl	8007372 <__malloc_unlock>
 80072ba:	f104 000b 	add.w	r0, r4, #11
 80072be:	1d23      	adds	r3, r4, #4
 80072c0:	f020 0007 	bic.w	r0, r0, #7
 80072c4:	1ac3      	subs	r3, r0, r3
 80072c6:	d0d3      	beq.n	8007270 <_malloc_r+0x20>
 80072c8:	425a      	negs	r2, r3
 80072ca:	50e2      	str	r2, [r4, r3]
 80072cc:	e7d0      	b.n	8007270 <_malloc_r+0x20>
 80072ce:	428c      	cmp	r4, r1
 80072d0:	684b      	ldr	r3, [r1, #4]
 80072d2:	bf16      	itet	ne
 80072d4:	6063      	strne	r3, [r4, #4]
 80072d6:	6013      	streq	r3, [r2, #0]
 80072d8:	460c      	movne	r4, r1
 80072da:	e7eb      	b.n	80072b4 <_malloc_r+0x64>
 80072dc:	460c      	mov	r4, r1
 80072de:	6849      	ldr	r1, [r1, #4]
 80072e0:	e7cc      	b.n	800727c <_malloc_r+0x2c>
 80072e2:	1cc4      	adds	r4, r0, #3
 80072e4:	f024 0403 	bic.w	r4, r4, #3
 80072e8:	42a0      	cmp	r0, r4
 80072ea:	d005      	beq.n	80072f8 <_malloc_r+0xa8>
 80072ec:	1a21      	subs	r1, r4, r0
 80072ee:	4630      	mov	r0, r6
 80072f0:	f000 f82e 	bl	8007350 <_sbrk_r>
 80072f4:	3001      	adds	r0, #1
 80072f6:	d0cf      	beq.n	8007298 <_malloc_r+0x48>
 80072f8:	6025      	str	r5, [r4, #0]
 80072fa:	e7db      	b.n	80072b4 <_malloc_r+0x64>
 80072fc:	200040b0 	.word	0x200040b0
 8007300:	200040b4 	.word	0x200040b4

08007304 <_realloc_r>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	4607      	mov	r7, r0
 8007308:	4614      	mov	r4, r2
 800730a:	460e      	mov	r6, r1
 800730c:	b921      	cbnz	r1, 8007318 <_realloc_r+0x14>
 800730e:	4611      	mov	r1, r2
 8007310:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007314:	f7ff bf9c 	b.w	8007250 <_malloc_r>
 8007318:	b922      	cbnz	r2, 8007324 <_realloc_r+0x20>
 800731a:	f7ff ff4b 	bl	80071b4 <_free_r>
 800731e:	4625      	mov	r5, r4
 8007320:	4628      	mov	r0, r5
 8007322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007324:	f000 f826 	bl	8007374 <_malloc_usable_size_r>
 8007328:	42a0      	cmp	r0, r4
 800732a:	d20f      	bcs.n	800734c <_realloc_r+0x48>
 800732c:	4621      	mov	r1, r4
 800732e:	4638      	mov	r0, r7
 8007330:	f7ff ff8e 	bl	8007250 <_malloc_r>
 8007334:	4605      	mov	r5, r0
 8007336:	2800      	cmp	r0, #0
 8007338:	d0f2      	beq.n	8007320 <_realloc_r+0x1c>
 800733a:	4631      	mov	r1, r6
 800733c:	4622      	mov	r2, r4
 800733e:	f7ff fc11 	bl	8006b64 <memcpy>
 8007342:	4631      	mov	r1, r6
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff ff35 	bl	80071b4 <_free_r>
 800734a:	e7e9      	b.n	8007320 <_realloc_r+0x1c>
 800734c:	4635      	mov	r5, r6
 800734e:	e7e7      	b.n	8007320 <_realloc_r+0x1c>

08007350 <_sbrk_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4c06      	ldr	r4, [pc, #24]	; (800736c <_sbrk_r+0x1c>)
 8007354:	2300      	movs	r3, #0
 8007356:	4605      	mov	r5, r0
 8007358:	4608      	mov	r0, r1
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	f7fa fc60 	bl	8001c20 <_sbrk>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_sbrk_r+0x1a>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	b103      	cbz	r3, 800736a <_sbrk_r+0x1a>
 8007368:	602b      	str	r3, [r5, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	20004200 	.word	0x20004200

08007370 <__malloc_lock>:
 8007370:	4770      	bx	lr

08007372 <__malloc_unlock>:
 8007372:	4770      	bx	lr

08007374 <_malloc_usable_size_r>:
 8007374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007378:	1f18      	subs	r0, r3, #4
 800737a:	2b00      	cmp	r3, #0
 800737c:	bfbc      	itt	lt
 800737e:	580b      	ldrlt	r3, [r1, r0]
 8007380:	18c0      	addlt	r0, r0, r3
 8007382:	4770      	bx	lr

08007384 <_init>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	bf00      	nop
 8007388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738a:	bc08      	pop	{r3}
 800738c:	469e      	mov	lr, r3
 800738e:	4770      	bx	lr

08007390 <_fini>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	bf00      	nop
 8007394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007396:	bc08      	pop	{r3}
 8007398:	469e      	mov	lr, r3
 800739a:	4770      	bx	lr
