
STM32_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000566c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c4  080058c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058cc  080058cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058d0  080058d0  000158d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080058d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040a4  20000074  08005948  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004118  08005948  00024118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c74  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002839  00000000  00000000  00031d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001050  00000000  00000000  00034558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f18  00000000  00000000  000355a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023721  00000000  00000000  000364c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c6f6  00000000  00000000  00059be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7afa  00000000  00000000  000662d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ddd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e8  00000000  00000000  0013de4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005824 	.word	0x08005824

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005824 	.word	0x08005824

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <vApplicationGetIdleTaskMemory+0x30>)
 8000db2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000090 	.word	0x20000090
 8000dcc:	200000e4 	.word	0x200000e4

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd6:	f000 fc99 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dda:	f000 f827 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dde:	f000 f939 	bl	8001054 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000de2:	f000 f90d 	bl	8001000 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000de6:	f000 f88f 	bl	8000f08 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000dea:	f000 f8df 	bl	8000fac <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <main+0x50>)
 8000df0:	1d3c      	adds	r4, r7, #4
 8000df2:	461d      	mov	r5, r3
 8000df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 feb4 	bl	8003b72 <osThreadCreate>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <main+0x54>)
 8000e0e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000e10:	2100      	movs	r1, #0
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <main+0x58>)
 8000e14:	f001 fcea 	bl	80027ec <HAL_TIM_IC_Start_IT>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e18:	f002 fea4 	bl	8003b64 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <main+0x4c>
 8000e1e:	bf00      	nop
 8000e20:	08005848 	.word	0x08005848
 8000e24:	2000404c 	.word	0x2000404c
 8000e28:	20004090 	.word	0x20004090

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b094      	sub	sp, #80	; 0x50
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	2234      	movs	r2, #52	; 0x34
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 f8ed 	bl	800501a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <SystemClock_Config+0xd4>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	4a29      	ldr	r2, [pc, #164]	; (8000f00 <SystemClock_Config+0xd4>)
 8000e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <SystemClock_Config+0xd4>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <SystemClock_Config+0xd8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e78:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <SystemClock_Config+0xd8>)
 8000e7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <SystemClock_Config+0xd8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e94:	2310      	movs	r3, #16
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ea4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ea8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fa10 	bl	80022e0 <HAL_RCC_OscConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ec6:	f000 fa65 	bl	8001394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eca:	230f      	movs	r3, #15
 8000ecc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 ff40 	bl	8001d6c <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ef2:	f000 fa4f 	bl	8001394 <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3750      	adds	r7, #80	; 0x50
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40007000 	.word	0x40007000

08000f08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <MX_TIM2_Init+0xa0>)
 8000f26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <MX_TIM2_Init+0xa0>)
 8000f2e:	2253      	movs	r2, #83	; 0x53
 8000f30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_TIM2_Init+0xa0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_TIM2_Init+0xa0>)
 8000f3a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <MX_TIM2_Init+0xa0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_TIM2_Init+0xa0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f4c:	4816      	ldr	r0, [pc, #88]	; (8000fa8 <MX_TIM2_Init+0xa0>)
 8000f4e:	f001 fc21 	bl	8002794 <HAL_TIM_IC_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f58:	f000 fa1c 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <MX_TIM2_Init+0xa0>)
 8000f6c:	f002 f8a6 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f76:	f000 fa0d 	bl	8001394 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_TIM2_Init+0xa0>)
 8000f92:	f001 fd9b 	bl	8002acc <HAL_TIM_IC_ConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f9c:	f000 f9fa 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20004090 	.word	0x20004090

08000fac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <MX_USART1_UART_Init+0x50>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fe4:	f002 f8fa 	bl	80031dc <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fee:	f000 f9d1 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20004050 	.word	0x20004050
 8000ffc:	40011000 	.word	0x40011000

08001000 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_USART2_UART_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001038:	f002 f8d0 	bl	80031dc <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001042:	f000 f9a7 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200040d0 	.word	0x200040d0
 8001050:	40004400 	.word	0x40004400

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <MX_GPIO_Init+0xd4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a2d      	ldr	r2, [pc, #180]	; (8001128 <MX_GPIO_Init+0xd4>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_GPIO_Init+0xd4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b27      	ldr	r3, [pc, #156]	; (8001128 <MX_GPIO_Init+0xd4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a26      	ldr	r2, [pc, #152]	; (8001128 <MX_GPIO_Init+0xd4>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b24      	ldr	r3, [pc, #144]	; (8001128 <MX_GPIO_Init+0xd4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <MX_GPIO_Init+0xd4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <MX_GPIO_Init+0xd4>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_GPIO_Init+0xd4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_GPIO_Init+0xd4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MX_GPIO_Init+0xd4>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_GPIO_Init+0xd4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 7108 	mov.w	r1, #544	; 0x220
 80010e0:	4812      	ldr	r0, [pc, #72]	; (800112c <MX_GPIO_Init+0xd8>)
 80010e2:	f000 fe29 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_GPIO_Init+0xdc>)
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	480e      	ldr	r0, [pc, #56]	; (8001134 <MX_GPIO_Init+0xe0>)
 80010fc:	f000 fc8a 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8001100:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_GPIO_Init+0xd8>)
 800111a:	f000 fc7b 	bl	8001a14 <HAL_GPIO_Init>

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000
 8001130:	10210000 	.word	0x10210000
 8001134:	40020800 	.word	0x40020800

08001138 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7f1b      	ldrb	r3, [r3, #28]
 8001144:	2b01      	cmp	r3, #1
 8001146:	f040 8083 	bne.w	8001250 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 800114a:	4b45      	ldr	r3, [pc, #276]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x128>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d11a      	bne.n	8001188 <HAL_TIM_IC_CaptureCallback+0x50>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001152:	2100      	movs	r1, #0
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f001 fd55 	bl	8002c04 <HAL_TIM_ReadCapturedValue>
 800115a:	4602      	mov	r2, r0
 800115c:	4b41      	ldr	r3, [pc, #260]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800115e:	601a      	str	r2, [r3, #0]
				Is_First_Captured = 1;  // set the first captured as true
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 020a 	bic.w	r2, r2, #10
 8001174:	621a      	str	r2, [r3, #32]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f042 0202 	orr.w	r2, r2, #2
 8001184:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
			}
		}

}
 8001186:	e063      	b.n	8001250 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured==1)   // if the first is already captured
 8001188:	4b35      	ldr	r3, [pc, #212]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x128>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d15f      	bne.n	8001250 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001190:	2100      	movs	r1, #0
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f001 fd36 	bl	8002c04 <HAL_TIM_ReadCapturedValue>
 8001198:	4602      	mov	r2, r0
 800119a:	4b33      	ldr	r3, [pc, #204]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x130>)
 800119c:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d907      	bls.n	80011c2 <HAL_TIM_IC_CaptureCallback+0x8a>
					Difference = IC_Val2-IC_Val1;
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	4a2b      	ldr	r2, [pc, #172]	; (800126c <HAL_TIM_IC_CaptureCallback+0x134>)
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e00f      	b.n	80011e2 <HAL_TIM_IC_CaptureCallback+0xaa>
				else if (IC_Val1 > IC_Val2)
 80011c2:	4b28      	ldr	r3, [pc, #160]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4b28      	ldr	r3, [pc, #160]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d909      	bls.n	80011e2 <HAL_TIM_IC_CaptureCallback+0xaa>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011dc:	33ff      	adds	r3, #255	; 0xff
 80011de:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_TIM_IC_CaptureCallback+0x134>)
 80011e0:	6013      	str	r3, [r2, #0]
				Distance = Difference * .034/2;
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <HAL_TIM_IC_CaptureCallback+0x134>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f9ac 	bl	8000544 <__aeabi_ui2d>
 80011ec:	a31a      	add	r3, pc, #104	; (adr r3, 8001258 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff fa21 	bl	8000638 <__aeabi_dmul>
 80011f6:	4603      	mov	r3, r0
 80011f8:	460c      	mov	r4, r1
 80011fa:	4618      	mov	r0, r3
 80011fc:	4621      	mov	r1, r4
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001206:	f7ff fb41 	bl	800088c <__aeabi_ddiv>
 800120a:	4603      	mov	r3, r0
 800120c:	460c      	mov	r4, r1
 800120e:	4618      	mov	r0, r3
 8001210:	4621      	mov	r1, r4
 8001212:	f7ff fc23 	bl	8000a5c <__aeabi_d2uiz>
 8001216:	4603      	mov	r3, r0
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x138>)
 800121c:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6a1a      	ldr	r2, [r3, #32]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 020a 	bic.w	r2, r2, #10
 8001232:	621a      	str	r2, [r3, #32]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6a12      	ldr	r2, [r2, #32]
 800123e:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0202 	bic.w	r2, r2, #2
 800124e:	60da      	str	r2, [r3, #12]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	b020c49c 	.word	0xb020c49c
 800125c:	3fa16872 	.word	0x3fa16872
 8001260:	200002f0 	.word	0x200002f0
 8001264:	200002e4 	.word	0x200002e4
 8001268:	200002e8 	.word	0x200002e8
 800126c:	200002ec 	.word	0x200002ec
 8001270:	200002f1 	.word	0x200002f1
 8001274:	20004090 	.word	0x20004090

08001278 <delay_us>:

void delay_us(uint16_t time)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <delay_us+0x2c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < time );
 800128a:	bf00      	nop
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <delay_us+0x2c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	429a      	cmp	r2, r3
 8001296:	d3f9      	bcc.n	800128c <delay_us+0x14>
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20004090 	.word	0x20004090

080012a8 <HCSR04_Read>:

void HCSR04_Read (void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b2:	480b      	ldr	r0, [pc, #44]	; (80012e0 <HCSR04_Read+0x38>)
 80012b4:	f000 fd40 	bl	8001d38 <HAL_GPIO_WritePin>
	delay_us(100);  // wait for 10 us
 80012b8:	2064      	movs	r0, #100	; 0x64
 80012ba:	f7ff ffdd 	bl	8001278 <delay_us>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c4:	4806      	ldr	r0, [pc, #24]	; (80012e0 <HCSR04_Read+0x38>)
 80012c6:	f000 fd37 	bl	8001d38 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HCSR04_Read+0x3c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <HCSR04_Read+0x3c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0202 	orr.w	r2, r2, #2
 80012d8:	60da      	str	r2, [r3, #12]
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40020000 	.word	0x40020000
 80012e4:	20004090 	.word	0x20004090

080012e8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char pData[20];
	memset(pData,0,sizeof(pData));
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2214      	movs	r2, #20
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 fe8e 	bl	800501a <memset>
	uint8_t Hexa[1]={0xFF};
 80012fe:	23ff      	movs	r3, #255	; 0xff
 8001300:	723b      	strb	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	HCSR04_Read ();
 8001302:	f7ff ffd1 	bl	80012a8 <HCSR04_Read>
//	HAL_Delay(1);
	//Send Distance to Nextion display
	sprintf(pData,"n0.val=%d",Distance%400);
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <StartDefaultTask+0x9c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <StartDefaultTask+0xa0>)
 800130e:	fb83 1302 	smull	r1, r3, r3, r2
 8001312:	11d9      	asrs	r1, r3, #7
 8001314:	17d3      	asrs	r3, r2, #31
 8001316:	1acb      	subs	r3, r1, r3
 8001318:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f107 000c 	add.w	r0, r7, #12
 8001326:	461a      	mov	r2, r3
 8001328:	4918      	ldr	r1, [pc, #96]	; (800138c <StartDefaultTask+0xa4>)
 800132a:	f003 fe7f 	bl	800502c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, strlen(pData), 3000);
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ff6c 	bl	8000210 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f107 010c 	add.w	r1, r7, #12
 8001340:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001344:	4812      	ldr	r0, [pc, #72]	; (8001390 <StartDefaultTask+0xa8>)
 8001346:	f001 ff96 	bl	8003276 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1,Hexa, sizeof(Hexa), 3000);
 800134a:	f107 0108 	add.w	r1, r7, #8
 800134e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001352:	2201      	movs	r2, #1
 8001354:	480e      	ldr	r0, [pc, #56]	; (8001390 <StartDefaultTask+0xa8>)
 8001356:	f001 ff8e 	bl	8003276 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,Hexa, sizeof(Hexa), 3000);
 800135a:	f107 0108 	add.w	r1, r7, #8
 800135e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001362:	2201      	movs	r2, #1
 8001364:	480a      	ldr	r0, [pc, #40]	; (8001390 <StartDefaultTask+0xa8>)
 8001366:	f001 ff86 	bl	8003276 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,Hexa, sizeof(Hexa), 3000);
 800136a:	f107 0108 	add.w	r1, r7, #8
 800136e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001372:	2201      	movs	r2, #1
 8001374:	4806      	ldr	r0, [pc, #24]	; (8001390 <StartDefaultTask+0xa8>)
 8001376:	f001 ff7e 	bl	8003276 <HAL_UART_Transmit>

    osDelay(1);
 800137a:	2001      	movs	r0, #1
 800137c:	f002 fc45 	bl	8003c0a <osDelay>
	HCSR04_Read ();
 8001380:	e7bf      	b.n	8001302 <StartDefaultTask+0x1a>
 8001382:	bf00      	nop
 8001384:	200002f1 	.word	0x200002f1
 8001388:	51eb851f 	.word	0x51eb851f
 800138c:	08005864 	.word	0x08005864
 8001390:	20004050 	.word	0x20004050

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_MspInit+0x54>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <HAL_MspInit+0x54>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_MspInit+0x54>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_MspInit+0x54>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_MspInit+0x54>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_MspInit+0x54>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	210f      	movs	r1, #15
 80013e6:	f06f 0001 	mvn.w	r0, #1
 80013ea:	f000 fadc 	bl	80019a6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800141c:	d133      	bne.n	8001486 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_TIM_IC_MspInit+0x94>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a1a      	ldr	r2, [pc, #104]	; (8001490 <HAL_TIM_IC_MspInit+0x94>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_TIM_IC_MspInit+0x94>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_TIM_IC_MspInit+0x94>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a13      	ldr	r2, [pc, #76]	; (8001490 <HAL_TIM_IC_MspInit+0x94>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_TIM_IC_MspInit+0x94>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001456:	2301      	movs	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001466:	2301      	movs	r3, #1
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4808      	ldr	r0, [pc, #32]	; (8001494 <HAL_TIM_IC_MspInit+0x98>)
 8001472:	f000 facf 	bl	8001a14 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	201c      	movs	r0, #28
 800147c:	f000 fa93 	bl	80019a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001480:	201c      	movs	r0, #28
 8001482:	f000 faac 	bl	80019de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	; 0x30
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a41      	ldr	r2, [pc, #260]	; (80015bc <HAL_UART_MspInit+0x124>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d14b      	bne.n	8001552 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	4b40      	ldr	r3, [pc, #256]	; (80015c0 <HAL_UART_MspInit+0x128>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a3f      	ldr	r2, [pc, #252]	; (80015c0 <HAL_UART_MspInit+0x128>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <HAL_UART_MspInit+0x128>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_UART_MspInit+0x128>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <HAL_UART_MspInit+0x128>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <HAL_UART_MspInit+0x128>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <HAL_UART_MspInit+0x128>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a31      	ldr	r2, [pc, #196]	; (80015c0 <HAL_UART_MspInit+0x128>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <HAL_UART_MspInit+0x128>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800150e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001520:	2307      	movs	r3, #7
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	4826      	ldr	r0, [pc, #152]	; (80015c4 <HAL_UART_MspInit+0x12c>)
 800152c:	f000 fa72 	bl	8001a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001530:	2340      	movs	r3, #64	; 0x40
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001540:	2307      	movs	r3, #7
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	481f      	ldr	r0, [pc, #124]	; (80015c8 <HAL_UART_MspInit+0x130>)
 800154c:	f000 fa62 	bl	8001a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001550:	e030      	b.n	80015b4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <HAL_UART_MspInit+0x134>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d12b      	bne.n	80015b4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_UART_MspInit+0x128>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a16      	ldr	r2, [pc, #88]	; (80015c0 <HAL_UART_MspInit+0x128>)
 8001566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <HAL_UART_MspInit+0x128>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_UART_MspInit+0x128>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <HAL_UART_MspInit+0x128>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_UART_MspInit+0x128>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001594:	230c      	movs	r3, #12
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a4:	2307      	movs	r3, #7
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <HAL_UART_MspInit+0x12c>)
 80015b0:	f000 fa30 	bl	8001a14 <HAL_GPIO_Init>
}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	; 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40011000 	.word	0x40011000
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40004400 	.word	0x40004400

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001608:	f000 f8d2 	bl	80017b0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800160c:	f003 f874 	bl	80046f8 <xTaskGetSchedulerState>
 8001610:	4603      	mov	r3, r0
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001616:	f003 faa7 	bl	8004b68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <TIM2_IRQHandler+0x10>)
 8001626:	f001 f949 	bl	80028bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20004090 	.word	0x20004090

08001634 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <_sbrk+0x50>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x16>
		heap_end = &end;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <_sbrk+0x50>)
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <_sbrk+0x54>)
 8001648:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <_sbrk+0x50>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <_sbrk+0x50>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	466a      	mov	r2, sp
 800165a:	4293      	cmp	r3, r2
 800165c:	d907      	bls.n	800166e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800165e:	f003 fca7 	bl	8004fb0 <__errno>
 8001662:	4602      	mov	r2, r0
 8001664:	230c      	movs	r3, #12
 8001666:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	e006      	b.n	800167c <_sbrk+0x48>
	}

	heap_end += incr;
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <_sbrk+0x50>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a03      	ldr	r2, [pc, #12]	; (8001684 <_sbrk+0x50>)
 8001678:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200002f4 	.word	0x200002f4
 8001688:	20004118 	.word	0x20004118

0800168c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <SystemInit+0x28>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001696:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <SystemInit+0x28>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <SystemInit+0x28>)
 80016a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a6:	609a      	str	r2, [r3, #8]
#endif
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016be:	e003      	b.n	80016c8 <LoopCopyDataInit>

080016c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016c6:	3104      	adds	r1, #4

080016c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016d0:	d3f6      	bcc.n	80016c0 <CopyDataInit>
  ldr  r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016d4:	e002      	b.n	80016dc <LoopFillZerobss>

080016d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016d8:	f842 3b04 	str.w	r3, [r2], #4

080016dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016e0:	d3f9      	bcc.n	80016d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016e2:	f7ff ffd3 	bl	800168c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f003 fc69 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7ff fb71 	bl	8000dd0 <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016f4:	080058d4 	.word	0x080058d4
  ldr  r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016fc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001700:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001704:	20004118 	.word	0x20004118

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f92b 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	200f      	movs	r0, #15
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fe30 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f943 	bl	80019fa <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f90b 	bl	80019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20004110 	.word	0x20004110

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20004110 	.word	0x20004110

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195c:	d301      	bcc.n	8001962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195e:	2301      	movs	r3, #1
 8001960:	e00f      	b.n	8001982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <SysTick_Config+0x40>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196a:	210f      	movs	r1, #15
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f7ff ff8e 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <SysTick_Config+0x40>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <SysTick_Config+0x40>)
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010

08001990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff29 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b8:	f7ff ff3e 	bl	8001838 <__NVIC_GetPriorityGrouping>
 80019bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff ff8e 	bl	80018e4 <NVIC_EncodePriority>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5d 	bl	8001890 <__NVIC_SetPriority>
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff31 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffa2 	bl	800194c <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e165      	b.n	8001cfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	f040 8154 	bne.w	8001cf6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d00b      	beq.n	8001a6e <HAL_GPIO_Init+0x5a>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a62:	2b11      	cmp	r3, #17
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b12      	cmp	r3, #18
 8001a6c:	d130      	bne.n	8001ad0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 0201 	and.w	r2, r3, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0xfc>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b12      	cmp	r3, #18
 8001b0e:	d123      	bne.n	8001b58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3208      	adds	r2, #8
 8001b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	69b9      	ldr	r1, [r7, #24]
 8001b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80ae 	beq.w	8001cf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b5c      	ldr	r3, [pc, #368]	; (8001d10 <HAL_GPIO_Init+0x2fc>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a5b      	ldr	r2, [pc, #364]	; (8001d10 <HAL_GPIO_Init+0x2fc>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <HAL_GPIO_Init+0x2fc>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb6:	4a57      	ldr	r2, [pc, #348]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4e      	ldr	r2, [pc, #312]	; (8001d18 <HAL_GPIO_Init+0x304>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d025      	beq.n	8001c2e <HAL_GPIO_Init+0x21a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4d      	ldr	r2, [pc, #308]	; (8001d1c <HAL_GPIO_Init+0x308>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d01f      	beq.n	8001c2a <HAL_GPIO_Init+0x216>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4c      	ldr	r2, [pc, #304]	; (8001d20 <HAL_GPIO_Init+0x30c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d019      	beq.n	8001c26 <HAL_GPIO_Init+0x212>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4b      	ldr	r2, [pc, #300]	; (8001d24 <HAL_GPIO_Init+0x310>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d013      	beq.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4a      	ldr	r2, [pc, #296]	; (8001d28 <HAL_GPIO_Init+0x314>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00d      	beq.n	8001c1e <HAL_GPIO_Init+0x20a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a49      	ldr	r2, [pc, #292]	; (8001d2c <HAL_GPIO_Init+0x318>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <HAL_GPIO_Init+0x206>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a48      	ldr	r2, [pc, #288]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_GPIO_Init+0x202>
 8001c12:	2306      	movs	r3, #6
 8001c14:	e00c      	b.n	8001c30 <HAL_GPIO_Init+0x21c>
 8001c16:	2307      	movs	r3, #7
 8001c18:	e00a      	b.n	8001c30 <HAL_GPIO_Init+0x21c>
 8001c1a:	2305      	movs	r3, #5
 8001c1c:	e008      	b.n	8001c30 <HAL_GPIO_Init+0x21c>
 8001c1e:	2304      	movs	r3, #4
 8001c20:	e006      	b.n	8001c30 <HAL_GPIO_Init+0x21c>
 8001c22:	2303      	movs	r3, #3
 8001c24:	e004      	b.n	8001c30 <HAL_GPIO_Init+0x21c>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e002      	b.n	8001c30 <HAL_GPIO_Init+0x21c>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <HAL_GPIO_Init+0x21c>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	f002 0203 	and.w	r2, r2, #3
 8001c36:	0092      	lsls	r2, r2, #2
 8001c38:	4093      	lsls	r3, r2
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c40:	4934      	ldr	r1, [pc, #208]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	3302      	adds	r3, #2
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c4e:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c72:	4a30      	ldr	r2, [pc, #192]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c78:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c9c:	4a25      	ldr	r2, [pc, #148]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf0:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	f67f ae96 	bls.w	8001a30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d04:	bf00      	nop
 8001d06:	3724      	adds	r7, #36	; 0x24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	40021800 	.word	0x40021800
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
 8001d44:	4613      	mov	r3, r2
 8001d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d54:	e003      	b.n	8001d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d56:	887b      	ldrh	r3, [r7, #2]
 8001d58:	041a      	lsls	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	619a      	str	r2, [r3, #24]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0cc      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b68      	ldr	r3, [pc, #416]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d90c      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b65      	ldr	r3, [pc, #404]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b63      	ldr	r3, [pc, #396]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0b8      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc0:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4a58      	ldr	r2, [pc, #352]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a52      	ldr	r2, [pc, #328]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de4:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	494d      	ldr	r1, [pc, #308]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d044      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d119      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e07f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2a:	4b3f      	ldr	r3, [pc, #252]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e067      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4934      	ldr	r1, [pc, #208]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e5c:	f7ff fcbc 	bl	80017d8 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7ff fcb8 	bl	80017d8 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e04f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d20c      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e032      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4916      	ldr	r1, [pc, #88]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	490e      	ldr	r1, [pc, #56]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef2:	f000 f855 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4601      	mov	r1, r0
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	fa21 f303 	lsr.w	r3, r1, r3
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1c8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fc1c 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023c00 	.word	0x40023c00
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	08005878 	.word	0x08005878
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000000 	.word	0x20000000

08001f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f54:	f7ff fff0 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f58:	4601      	mov	r1, r0
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	0a9b      	lsrs	r3, r3, #10
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800
 8001f74:	08005888 	.word	0x08005888

08001f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f7c:	f7ff ffdc 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f80:	4601      	mov	r1, r0
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0b5b      	lsrs	r3, r3, #13
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4a03      	ldr	r2, [pc, #12]	; (8001f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	08005888 	.word	0x08005888

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fba:	4bc6      	ldr	r3, [pc, #792]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	f200 817e 	bhi.w	80022c4 <HAL_RCC_GetSysClockFreq+0x324>
 8001fc8:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <HAL_RCC_GetSysClockFreq+0x30>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	08002005 	.word	0x08002005
 8001fd4:	080022c5 	.word	0x080022c5
 8001fd8:	080022c5 	.word	0x080022c5
 8001fdc:	080022c5 	.word	0x080022c5
 8001fe0:	0800200b 	.word	0x0800200b
 8001fe4:	080022c5 	.word	0x080022c5
 8001fe8:	080022c5 	.word	0x080022c5
 8001fec:	080022c5 	.word	0x080022c5
 8001ff0:	08002011 	.word	0x08002011
 8001ff4:	080022c5 	.word	0x080022c5
 8001ff8:	080022c5 	.word	0x080022c5
 8001ffc:	080022c5 	.word	0x080022c5
 8002000:	0800216d 	.word	0x0800216d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4bb4      	ldr	r3, [pc, #720]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x338>)
 8002006:	613b      	str	r3, [r7, #16]
       break;
 8002008:	e15f      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800200a:	4bb4      	ldr	r3, [pc, #720]	; (80022dc <HAL_RCC_GetSysClockFreq+0x33c>)
 800200c:	613b      	str	r3, [r7, #16]
      break;
 800200e:	e15c      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002010:	4bb0      	ldr	r3, [pc, #704]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002018:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800201a:	4bae      	ldr	r3, [pc, #696]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x334>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d04a      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002026:	4bab      	ldr	r3, [pc, #684]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	099b      	lsrs	r3, r3, #6
 800202c:	f04f 0400 	mov.w	r4, #0
 8002030:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	ea03 0501 	and.w	r5, r3, r1
 800203c:	ea04 0602 	and.w	r6, r4, r2
 8002040:	4629      	mov	r1, r5
 8002042:	4632      	mov	r2, r6
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	f04f 0400 	mov.w	r4, #0
 800204c:	0154      	lsls	r4, r2, #5
 800204e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002052:	014b      	lsls	r3, r1, #5
 8002054:	4619      	mov	r1, r3
 8002056:	4622      	mov	r2, r4
 8002058:	1b49      	subs	r1, r1, r5
 800205a:	eb62 0206 	sbc.w	r2, r2, r6
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	f04f 0400 	mov.w	r4, #0
 8002066:	0194      	lsls	r4, r2, #6
 8002068:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800206c:	018b      	lsls	r3, r1, #6
 800206e:	1a5b      	subs	r3, r3, r1
 8002070:	eb64 0402 	sbc.w	r4, r4, r2
 8002074:	f04f 0100 	mov.w	r1, #0
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	00e2      	lsls	r2, r4, #3
 800207e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002082:	00d9      	lsls	r1, r3, #3
 8002084:	460b      	mov	r3, r1
 8002086:	4614      	mov	r4, r2
 8002088:	195b      	adds	r3, r3, r5
 800208a:	eb44 0406 	adc.w	r4, r4, r6
 800208e:	f04f 0100 	mov.w	r1, #0
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	0262      	lsls	r2, r4, #9
 8002098:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800209c:	0259      	lsls	r1, r3, #9
 800209e:	460b      	mov	r3, r1
 80020a0:	4614      	mov	r4, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	4621      	mov	r1, r4
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f04f 0400 	mov.w	r4, #0
 80020ac:	461a      	mov	r2, r3
 80020ae:	4623      	mov	r3, r4
 80020b0:	f7fe fcf4 	bl	8000a9c <__aeabi_uldivmod>
 80020b4:	4603      	mov	r3, r0
 80020b6:	460c      	mov	r4, r1
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e049      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020bc:	4b85      	ldr	r3, [pc, #532]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x334>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	f04f 0400 	mov.w	r4, #0
 80020c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	ea03 0501 	and.w	r5, r3, r1
 80020d2:	ea04 0602 	and.w	r6, r4, r2
 80020d6:	4629      	mov	r1, r5
 80020d8:	4632      	mov	r2, r6
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	f04f 0400 	mov.w	r4, #0
 80020e2:	0154      	lsls	r4, r2, #5
 80020e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020e8:	014b      	lsls	r3, r1, #5
 80020ea:	4619      	mov	r1, r3
 80020ec:	4622      	mov	r2, r4
 80020ee:	1b49      	subs	r1, r1, r5
 80020f0:	eb62 0206 	sbc.w	r2, r2, r6
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	f04f 0400 	mov.w	r4, #0
 80020fc:	0194      	lsls	r4, r2, #6
 80020fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002102:	018b      	lsls	r3, r1, #6
 8002104:	1a5b      	subs	r3, r3, r1
 8002106:	eb64 0402 	sbc.w	r4, r4, r2
 800210a:	f04f 0100 	mov.w	r1, #0
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	00e2      	lsls	r2, r4, #3
 8002114:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002118:	00d9      	lsls	r1, r3, #3
 800211a:	460b      	mov	r3, r1
 800211c:	4614      	mov	r4, r2
 800211e:	195b      	adds	r3, r3, r5
 8002120:	eb44 0406 	adc.w	r4, r4, r6
 8002124:	f04f 0100 	mov.w	r1, #0
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	02a2      	lsls	r2, r4, #10
 800212e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002132:	0299      	lsls	r1, r3, #10
 8002134:	460b      	mov	r3, r1
 8002136:	4614      	mov	r4, r2
 8002138:	4618      	mov	r0, r3
 800213a:	4621      	mov	r1, r4
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f04f 0400 	mov.w	r4, #0
 8002142:	461a      	mov	r2, r3
 8002144:	4623      	mov	r3, r4
 8002146:	f7fe fca9 	bl	8000a9c <__aeabi_uldivmod>
 800214a:	4603      	mov	r3, r0
 800214c:	460c      	mov	r4, r1
 800214e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002150:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	3301      	adds	r3, #1
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	613b      	str	r3, [r7, #16]
      break;
 800216a:	e0ae      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800216c:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x334>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002174:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002176:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d04a      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002182:	4b54      	ldr	r3, [pc, #336]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	099b      	lsrs	r3, r3, #6
 8002188:	f04f 0400 	mov.w	r4, #0
 800218c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	ea03 0501 	and.w	r5, r3, r1
 8002198:	ea04 0602 	and.w	r6, r4, r2
 800219c:	4629      	mov	r1, r5
 800219e:	4632      	mov	r2, r6
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	f04f 0400 	mov.w	r4, #0
 80021a8:	0154      	lsls	r4, r2, #5
 80021aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021ae:	014b      	lsls	r3, r1, #5
 80021b0:	4619      	mov	r1, r3
 80021b2:	4622      	mov	r2, r4
 80021b4:	1b49      	subs	r1, r1, r5
 80021b6:	eb62 0206 	sbc.w	r2, r2, r6
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	f04f 0400 	mov.w	r4, #0
 80021c2:	0194      	lsls	r4, r2, #6
 80021c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021c8:	018b      	lsls	r3, r1, #6
 80021ca:	1a5b      	subs	r3, r3, r1
 80021cc:	eb64 0402 	sbc.w	r4, r4, r2
 80021d0:	f04f 0100 	mov.w	r1, #0
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	00e2      	lsls	r2, r4, #3
 80021da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021de:	00d9      	lsls	r1, r3, #3
 80021e0:	460b      	mov	r3, r1
 80021e2:	4614      	mov	r4, r2
 80021e4:	195b      	adds	r3, r3, r5
 80021e6:	eb44 0406 	adc.w	r4, r4, r6
 80021ea:	f04f 0100 	mov.w	r1, #0
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	0262      	lsls	r2, r4, #9
 80021f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80021f8:	0259      	lsls	r1, r3, #9
 80021fa:	460b      	mov	r3, r1
 80021fc:	4614      	mov	r4, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	4621      	mov	r1, r4
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f04f 0400 	mov.w	r4, #0
 8002208:	461a      	mov	r2, r3
 800220a:	4623      	mov	r3, r4
 800220c:	f7fe fc46 	bl	8000a9c <__aeabi_uldivmod>
 8002210:	4603      	mov	r3, r0
 8002212:	460c      	mov	r4, r1
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e049      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x334>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	f04f 0400 	mov.w	r4, #0
 8002222:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	ea03 0501 	and.w	r5, r3, r1
 800222e:	ea04 0602 	and.w	r6, r4, r2
 8002232:	4629      	mov	r1, r5
 8002234:	4632      	mov	r2, r6
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f04f 0400 	mov.w	r4, #0
 800223e:	0154      	lsls	r4, r2, #5
 8002240:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002244:	014b      	lsls	r3, r1, #5
 8002246:	4619      	mov	r1, r3
 8002248:	4622      	mov	r2, r4
 800224a:	1b49      	subs	r1, r1, r5
 800224c:	eb62 0206 	sbc.w	r2, r2, r6
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	f04f 0400 	mov.w	r4, #0
 8002258:	0194      	lsls	r4, r2, #6
 800225a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800225e:	018b      	lsls	r3, r1, #6
 8002260:	1a5b      	subs	r3, r3, r1
 8002262:	eb64 0402 	sbc.w	r4, r4, r2
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	00e2      	lsls	r2, r4, #3
 8002270:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002274:	00d9      	lsls	r1, r3, #3
 8002276:	460b      	mov	r3, r1
 8002278:	4614      	mov	r4, r2
 800227a:	195b      	adds	r3, r3, r5
 800227c:	eb44 0406 	adc.w	r4, r4, r6
 8002280:	f04f 0100 	mov.w	r1, #0
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	02a2      	lsls	r2, r4, #10
 800228a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800228e:	0299      	lsls	r1, r3, #10
 8002290:	460b      	mov	r3, r1
 8002292:	4614      	mov	r4, r2
 8002294:	4618      	mov	r0, r3
 8002296:	4621      	mov	r1, r4
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f04f 0400 	mov.w	r4, #0
 800229e:	461a      	mov	r2, r3
 80022a0:	4623      	mov	r3, r4
 80022a2:	f7fe fbfb 	bl	8000a9c <__aeabi_uldivmod>
 80022a6:	4603      	mov	r3, r0
 80022a8:	460c      	mov	r4, r1
 80022aa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x334>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	0f1b      	lsrs	r3, r3, #28
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	613b      	str	r3, [r7, #16]
      break;
 80022c2:	e002      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x338>)
 80022c6:	613b      	str	r3, [r7, #16]
      break;
 80022c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ca:	693b      	ldr	r3, [r7, #16]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	00f42400 	.word	0x00f42400
 80022dc:	007a1200 	.word	0x007a1200

080022e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 8083 	beq.w	8002400 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022fa:	4b95      	ldr	r3, [pc, #596]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b04      	cmp	r3, #4
 8002304:	d019      	beq.n	800233a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002306:	4b92      	ldr	r3, [pc, #584]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800230e:	2b08      	cmp	r3, #8
 8002310:	d106      	bne.n	8002320 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002312:	4b8f      	ldr	r3, [pc, #572]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800231e:	d00c      	beq.n	800233a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002320:	4b8b      	ldr	r3, [pc, #556]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002328:	2b0c      	cmp	r3, #12
 800232a:	d112      	bne.n	8002352 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232c:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002338:	d10b      	bne.n	8002352 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233a:	4b85      	ldr	r3, [pc, #532]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d05b      	beq.n	80023fe <HAL_RCC_OscConfig+0x11e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d157      	bne.n	80023fe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e216      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x8a>
 800235c:	4b7c      	ldr	r3, [pc, #496]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a7b      	ldr	r2, [pc, #492]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e01d      	b.n	80023a6 <HAL_RCC_OscConfig+0xc6>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002372:	d10c      	bne.n	800238e <HAL_RCC_OscConfig+0xae>
 8002374:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a75      	ldr	r2, [pc, #468]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800237a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b73      	ldr	r3, [pc, #460]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a72      	ldr	r2, [pc, #456]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e00b      	b.n	80023a6 <HAL_RCC_OscConfig+0xc6>
 800238e:	4b70      	ldr	r3, [pc, #448]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a6f      	ldr	r2, [pc, #444]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6c      	ldr	r2, [pc, #432]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80023a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d013      	beq.n	80023d6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7ff fa13 	bl	80017d8 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b6:	f7ff fa0f 	bl	80017d8 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b64      	cmp	r3, #100	; 0x64
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e1db      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c8:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0xd6>
 80023d4:	e014      	b.n	8002400 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7ff f9ff 	bl	80017d8 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023de:	f7ff f9fb 	bl	80017d8 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b64      	cmp	r3, #100	; 0x64
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e1c7      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f0:	4b57      	ldr	r3, [pc, #348]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0xfe>
 80023fc:	e000      	b.n	8002400 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d06f      	beq.n	80024ec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800240c:	4b50      	ldr	r3, [pc, #320]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b00      	cmp	r3, #0
 8002416:	d017      	beq.n	8002448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002418:	4b4d      	ldr	r3, [pc, #308]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002420:	2b08      	cmp	r3, #8
 8002422:	d105      	bne.n	8002430 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002424:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00b      	beq.n	8002448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002430:	4b47      	ldr	r3, [pc, #284]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002438:	2b0c      	cmp	r3, #12
 800243a:	d11c      	bne.n	8002476 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243c:	4b44      	ldr	r3, [pc, #272]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d116      	bne.n	8002476 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002448:	4b41      	ldr	r3, [pc, #260]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x180>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d001      	beq.n	8002460 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e18f      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002460:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4938      	ldr	r1, [pc, #224]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002474:	e03a      	b.n	80024ec <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d020      	beq.n	80024c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800247e:	4b35      	ldr	r3, [pc, #212]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff f9a8 	bl	80017d8 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248c:	f7ff f9a4 	bl	80017d8 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e170      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	4b2c      	ldr	r3, [pc, #176]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	4b29      	ldr	r3, [pc, #164]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4925      	ldr	r1, [pc, #148]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
 80024be:	e015      	b.n	80024ec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c0:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7ff f987 	bl	80017d8 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ce:	f7ff f983 	bl	80017d8 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e14f      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f0      	bne.n	80024ce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d037      	beq.n	8002568 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d016      	beq.n	800252e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_RCC_OscConfig+0x278>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7ff f967 	bl	80017d8 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250e:	f7ff f963 	bl	80017d8 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e12f      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x22e>
 800252c:	e01c      	b.n	8002568 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_RCC_OscConfig+0x278>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7ff f950 	bl	80017d8 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253a:	e00f      	b.n	800255c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253c:	f7ff f94c 	bl	80017d8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d908      	bls.n	800255c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e118      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	42470000 	.word	0x42470000
 8002558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	4b8a      	ldr	r3, [pc, #552]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 800255e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e9      	bne.n	800253c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8097 	beq.w	80026a4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257a:	4b83      	ldr	r3, [pc, #524]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b7f      	ldr	r3, [pc, #508]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a7e      	ldr	r2, [pc, #504]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b7c      	ldr	r3, [pc, #496]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	4b79      	ldr	r3, [pc, #484]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d118      	bne.n	80025e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b2:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a75      	ldr	r2, [pc, #468]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025be:	f7ff f90b 	bl	80017d8 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c6:	f7ff f907 	bl	80017d8 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0d3      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b6c      	ldr	r3, [pc, #432]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x31a>
 80025ec:	4b66      	ldr	r3, [pc, #408]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a65      	ldr	r2, [pc, #404]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e01c      	b.n	8002634 <HAL_RCC_OscConfig+0x354>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x33c>
 8002602:	4b61      	ldr	r3, [pc, #388]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a60      	ldr	r2, [pc, #384]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
 800260e:	4b5e      	ldr	r3, [pc, #376]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a5d      	ldr	r2, [pc, #372]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
 800261a:	e00b      	b.n	8002634 <HAL_RCC_OscConfig+0x354>
 800261c:	4b5a      	ldr	r3, [pc, #360]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a59      	ldr	r2, [pc, #356]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	4b57      	ldr	r3, [pc, #348]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a56      	ldr	r2, [pc, #344]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 800262e:	f023 0304 	bic.w	r3, r3, #4
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d015      	beq.n	8002668 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7ff f8cc 	bl	80017d8 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7ff f8c8 	bl	80017d8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e092      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	4b4b      	ldr	r3, [pc, #300]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0ee      	beq.n	8002644 <HAL_RCC_OscConfig+0x364>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7ff f8b6 	bl	80017d8 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7ff f8b2 	bl	80017d8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e07c      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002686:	4b40      	ldr	r3, [pc, #256]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1ee      	bne.n	8002670 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d105      	bne.n	80026a4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	4a3a      	ldr	r2, [pc, #232]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 800269e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d068      	beq.n	800277e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ac:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d060      	beq.n	800277a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d145      	bne.n	800274c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c0:	4b33      	ldr	r3, [pc, #204]	; (8002790 <HAL_RCC_OscConfig+0x4b0>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7ff f887 	bl	80017d8 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ce:	f7ff f883 	bl	80017d8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e04f      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	019b      	lsls	r3, r3, #6
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	3b01      	subs	r3, #1
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	061b      	lsls	r3, r3, #24
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	071b      	lsls	r3, r3, #28
 8002718:	491b      	ldr	r1, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <HAL_RCC_OscConfig+0x4b0>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7ff f858 	bl	80017d8 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272c:	f7ff f854 	bl	80017d8 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e020      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x44c>
 800274a:	e018      	b.n	800277e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_RCC_OscConfig+0x4b0>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7ff f841 	bl	80017d8 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275a:	f7ff f83d 	bl	80017d8 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e009      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_RCC_OscConfig+0x4a8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x47a>
 8002778:	e001      	b.n	800277e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	40007000 	.word	0x40007000
 8002790:	42470060 	.word	0x42470060

08002794 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e01d      	b.n	80027e2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fe fe1e 	bl	80013fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3304      	adds	r3, #4
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f000 fa82 	bl	8002cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	d841      	bhi.n	8002880 <HAL_TIM_IC_Start_IT+0x94>
 80027fc:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <HAL_TIM_IC_Start_IT+0x18>)
 80027fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002802:	bf00      	nop
 8002804:	08002839 	.word	0x08002839
 8002808:	08002881 	.word	0x08002881
 800280c:	08002881 	.word	0x08002881
 8002810:	08002881 	.word	0x08002881
 8002814:	0800284b 	.word	0x0800284b
 8002818:	08002881 	.word	0x08002881
 800281c:	08002881 	.word	0x08002881
 8002820:	08002881 	.word	0x08002881
 8002824:	0800285d 	.word	0x0800285d
 8002828:	08002881 	.word	0x08002881
 800282c:	08002881 	.word	0x08002881
 8002830:	08002881 	.word	0x08002881
 8002834:	0800286f 	.word	0x0800286f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0202 	orr.w	r2, r2, #2
 8002846:	60da      	str	r2, [r3, #12]
      break;
 8002848:	e01b      	b.n	8002882 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0204 	orr.w	r2, r2, #4
 8002858:	60da      	str	r2, [r3, #12]
      break;
 800285a:	e012      	b.n	8002882 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0208 	orr.w	r2, r2, #8
 800286a:	60da      	str	r2, [r3, #12]
      break;
 800286c:	e009      	b.n	8002882 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0210 	orr.w	r2, r2, #16
 800287c:	60da      	str	r2, [r3, #12]
      break;
 800287e:	e000      	b.n	8002882 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002880:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2201      	movs	r2, #1
 8002888:	6839      	ldr	r1, [r7, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fbf0 	bl	8003070 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d007      	beq.n	80028b2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0202 	mvn.w	r2, #2
 80028e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fc1a 	bl	8001138 <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f9ca 	bl	8002ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f9d1 	bl	8002cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d122      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11b      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0204 	mvn.w	r2, #4
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fbf0 	bl	8001138 <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f9a0 	bl	8002ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f9a7 	bl	8002cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b08      	cmp	r3, #8
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0208 	mvn.w	r2, #8
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2204      	movs	r2, #4
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fbc6 	bl	8001138 <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f976 	bl	8002ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f97d 	bl	8002cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d122      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d11b      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0210 	mvn.w	r2, #16
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2208      	movs	r2, #8
 80029ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe fb9c 	bl	8001138 <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f94c 	bl	8002ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f953 	bl	8002cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10e      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f926 	bl	8002c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d10e      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b80      	cmp	r3, #128	; 0x80
 8002a5a:	d107      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fbae 	bl	80031c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d10e      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d107      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f918 	bl	8002cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0220 	mvn.w	r2, #32
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fb78 	bl	80031b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e08a      	b.n	8002bfc <HAL_TIM_IC_ConfigChannel+0x130>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d11b      	bne.n	8002b34 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f000 f986 	bl	8002e1c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 020c 	bic.w	r2, r2, #12
 8002b1e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6999      	ldr	r1, [r3, #24]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	619a      	str	r2, [r3, #24]
 8002b32:	e05a      	b.n	8002bea <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d11c      	bne.n	8002b74 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	6819      	ldr	r1, [r3, #0]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f000 f9db 	bl	8002f04 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b5c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6999      	ldr	r1, [r3, #24]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	021a      	lsls	r2, r3, #8
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	619a      	str	r2, [r3, #24]
 8002b72:	e03a      	b.n	8002bea <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d11b      	bne.n	8002bb2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f000 f9f8 	bl	8002f7e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 020c 	bic.w	r2, r2, #12
 8002b9c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69d9      	ldr	r1, [r3, #28]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	61da      	str	r2, [r3, #28]
 8002bb0:	e01b      	b.n	8002bea <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f000 fa18 	bl	8002ff6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bd4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69d9      	ldr	r1, [r3, #28]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	021a      	lsls	r2, r3, #8
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	d831      	bhi.n	8002c7c <HAL_TIM_ReadCapturedValue+0x78>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c55 	.word	0x08002c55
 8002c24:	08002c7d 	.word	0x08002c7d
 8002c28:	08002c7d 	.word	0x08002c7d
 8002c2c:	08002c7d 	.word	0x08002c7d
 8002c30:	08002c5f 	.word	0x08002c5f
 8002c34:	08002c7d 	.word	0x08002c7d
 8002c38:	08002c7d 	.word	0x08002c7d
 8002c3c:	08002c7d 	.word	0x08002c7d
 8002c40:	08002c69 	.word	0x08002c69
 8002c44:	08002c7d 	.word	0x08002c7d
 8002c48:	08002c7d 	.word	0x08002c7d
 8002c4c:	08002c7d 	.word	0x08002c7d
 8002c50:	08002c73 	.word	0x08002c73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	60fb      	str	r3, [r7, #12]

      break;
 8002c5c:	e00f      	b.n	8002c7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	60fb      	str	r3, [r7, #12]

      break;
 8002c66:	e00a      	b.n	8002c7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	60fb      	str	r3, [r7, #12]

      break;
 8002c70:	e005      	b.n	8002c7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	60fb      	str	r3, [r7, #12]

      break;
 8002c7a:	e000      	b.n	8002c7e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002c7c:	bf00      	nop
  }

  return tmpreg;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a40      	ldr	r2, [pc, #256]	; (8002df0 <TIM_Base_SetConfig+0x114>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfa:	d00f      	beq.n	8002d1c <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3d      	ldr	r2, [pc, #244]	; (8002df4 <TIM_Base_SetConfig+0x118>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3c      	ldr	r2, [pc, #240]	; (8002df8 <TIM_Base_SetConfig+0x11c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d007      	beq.n	8002d1c <TIM_Base_SetConfig+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a3b      	ldr	r2, [pc, #236]	; (8002dfc <TIM_Base_SetConfig+0x120>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <TIM_Base_SetConfig+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <TIM_Base_SetConfig+0x124>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d108      	bne.n	8002d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2f      	ldr	r2, [pc, #188]	; (8002df0 <TIM_Base_SetConfig+0x114>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d02b      	beq.n	8002d8e <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3c:	d027      	beq.n	8002d8e <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a2c      	ldr	r2, [pc, #176]	; (8002df4 <TIM_Base_SetConfig+0x118>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d023      	beq.n	8002d8e <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2b      	ldr	r2, [pc, #172]	; (8002df8 <TIM_Base_SetConfig+0x11c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01f      	beq.n	8002d8e <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <TIM_Base_SetConfig+0x120>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01b      	beq.n	8002d8e <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a29      	ldr	r2, [pc, #164]	; (8002e00 <TIM_Base_SetConfig+0x124>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d017      	beq.n	8002d8e <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a28      	ldr	r2, [pc, #160]	; (8002e04 <TIM_Base_SetConfig+0x128>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <TIM_Base_SetConfig+0x12c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00f      	beq.n	8002d8e <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a26      	ldr	r2, [pc, #152]	; (8002e0c <TIM_Base_SetConfig+0x130>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00b      	beq.n	8002d8e <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a25      	ldr	r2, [pc, #148]	; (8002e10 <TIM_Base_SetConfig+0x134>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d007      	beq.n	8002d8e <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a24      	ldr	r2, [pc, #144]	; (8002e14 <TIM_Base_SetConfig+0x138>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d003      	beq.n	8002d8e <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a23      	ldr	r2, [pc, #140]	; (8002e18 <TIM_Base_SetConfig+0x13c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d108      	bne.n	8002da0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <TIM_Base_SetConfig+0x114>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <TIM_Base_SetConfig+0xf8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a0c      	ldr	r2, [pc, #48]	; (8002e00 <TIM_Base_SetConfig+0x124>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d103      	bne.n	8002ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	615a      	str	r2, [r3, #20]
}
 8002de2:	bf00      	nop
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40010000 	.word	0x40010000
 8002df4:	40000400 	.word	0x40000400
 8002df8:	40000800 	.word	0x40000800
 8002dfc:	40000c00 	.word	0x40000c00
 8002e00:	40010400 	.word	0x40010400
 8002e04:	40014000 	.word	0x40014000
 8002e08:	40014400 	.word	0x40014400
 8002e0c:	40014800 	.word	0x40014800
 8002e10:	40001800 	.word	0x40001800
 8002e14:	40001c00 	.word	0x40001c00
 8002e18:	40002000 	.word	0x40002000

08002e1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f023 0201 	bic.w	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <TIM_TI1_SetConfig+0xcc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01b      	beq.n	8002e82 <TIM_TI1_SetConfig+0x66>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e50:	d017      	beq.n	8002e82 <TIM_TI1_SetConfig+0x66>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a25      	ldr	r2, [pc, #148]	; (8002eec <TIM_TI1_SetConfig+0xd0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <TIM_TI1_SetConfig+0x66>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a24      	ldr	r2, [pc, #144]	; (8002ef0 <TIM_TI1_SetConfig+0xd4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00f      	beq.n	8002e82 <TIM_TI1_SetConfig+0x66>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <TIM_TI1_SetConfig+0xd8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <TIM_TI1_SetConfig+0x66>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <TIM_TI1_SetConfig+0xdc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <TIM_TI1_SetConfig+0x66>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a21      	ldr	r2, [pc, #132]	; (8002efc <TIM_TI1_SetConfig+0xe0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d003      	beq.n	8002e82 <TIM_TI1_SetConfig+0x66>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a20      	ldr	r2, [pc, #128]	; (8002f00 <TIM_TI1_SetConfig+0xe4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <TIM_TI1_SetConfig+0x6a>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <TIM_TI1_SetConfig+0x6c>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	e003      	b.n	8002ea6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f023 030a 	bic.w	r3, r3, #10
 8002ec0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f003 030a 	and.w	r3, r3, #10
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40000400 	.word	0x40000400
 8002ef0:	40000800 	.word	0x40000800
 8002ef4:	40000c00 	.word	0x40000c00
 8002ef8:	40010400 	.word	0x40010400
 8002efc:	40014000 	.word	0x40014000
 8002f00:	40001800 	.word	0x40001800

08002f04 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f023 0210 	bic.w	r2, r3, #16
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	031b      	lsls	r3, r3, #12
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f56:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b087      	sub	sp, #28
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002fce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b087      	sub	sp, #28
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003022:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003034:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	031b      	lsls	r3, r3, #12
 800303a:	b29b      	uxth	r3, r3
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003048:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	031b      	lsls	r3, r3, #12
 800304e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	621a      	str	r2, [r3, #32]
}
 8003064:	bf00      	nop
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	2201      	movs	r2, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	43db      	mvns	r3, r3
 8003092:	401a      	ands	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e05a      	b.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a21      	ldr	r2, [pc, #132]	; (8003198 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d022      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003120:	d01d      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1d      	ldr	r2, [pc, #116]	; (800319c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d018      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00e      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d009      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a17      	ldr	r2, [pc, #92]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d004      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d10c      	bne.n	8003178 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	4313      	orrs	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40010000 	.word	0x40010000
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800
 80031a4:	40000c00 	.word	0x40000c00
 80031a8:	40010400 	.word	0x40010400
 80031ac:	40014000 	.word	0x40014000
 80031b0:	40001800 	.word	0x40001800

080031b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e03f      	b.n	800326e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fe f948 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2224      	movs	r2, #36	; 0x24
 800320c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800321e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f90b 	bl	800343c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003234:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003244:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003254:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b088      	sub	sp, #32
 800327a:	af02      	add	r7, sp, #8
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	4613      	mov	r3, r2
 8003284:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b20      	cmp	r3, #32
 8003294:	f040 8083 	bne.w	800339e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_UART_Transmit+0x2e>
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e07b      	b.n	80033a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Transmit+0x40>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e074      	b.n	80033a0 <HAL_UART_Transmit+0x12a>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2221      	movs	r2, #33	; 0x21
 80032c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80032cc:	f7fe fa84 	bl	80017d8 <HAL_GetTick>
 80032d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80032e6:	e042      	b.n	800336e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fe:	d122      	bne.n	8003346 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2200      	movs	r2, #0
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f84c 	bl	80033a8 <UART_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e042      	b.n	80033a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800332c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d103      	bne.n	800333e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3302      	adds	r3, #2
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	e017      	b.n	800336e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3301      	adds	r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	e013      	b.n	800336e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2200      	movs	r2, #0
 800334e:	2180      	movs	r1, #128	; 0x80
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f829 	bl	80033a8 <UART_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e01f      	b.n	80033a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	60ba      	str	r2, [r7, #8]
 8003366:	781a      	ldrb	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1b7      	bne.n	80032e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2200      	movs	r2, #0
 8003380:	2140      	movs	r1, #64	; 0x40
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f810 	bl	80033a8 <UART_WaitOnFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e006      	b.n	80033a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	e000      	b.n	80033a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
  }
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b8:	e02c      	b.n	8003414 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d028      	beq.n	8003414 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80033c8:	f7fe fa06 	bl	80017d8 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d21d      	bcs.n	8003414 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e00f      	b.n	8003434 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	429a      	cmp	r2, r3
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	429a      	cmp	r2, r3
 8003430:	d0c3      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800343c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003440:	b085      	sub	sp, #20
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800347e:	f023 030c 	bic.w	r3, r3, #12
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	430b      	orrs	r3, r1
 800348a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034aa:	f040 818b 	bne.w	80037c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4ac1      	ldr	r2, [pc, #772]	; (80037b8 <UART_SetConfig+0x37c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d005      	beq.n	80034c4 <UART_SetConfig+0x88>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4abf      	ldr	r2, [pc, #764]	; (80037bc <UART_SetConfig+0x380>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	f040 80bd 	bne.w	800363e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034c4:	f7fe fd58 	bl	8001f78 <HAL_RCC_GetPCLK2Freq>
 80034c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	461d      	mov	r5, r3
 80034ce:	f04f 0600 	mov.w	r6, #0
 80034d2:	46a8      	mov	r8, r5
 80034d4:	46b1      	mov	r9, r6
 80034d6:	eb18 0308 	adds.w	r3, r8, r8
 80034da:	eb49 0409 	adc.w	r4, r9, r9
 80034de:	4698      	mov	r8, r3
 80034e0:	46a1      	mov	r9, r4
 80034e2:	eb18 0805 	adds.w	r8, r8, r5
 80034e6:	eb49 0906 	adc.w	r9, r9, r6
 80034ea:	f04f 0100 	mov.w	r1, #0
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034fe:	4688      	mov	r8, r1
 8003500:	4691      	mov	r9, r2
 8003502:	eb18 0005 	adds.w	r0, r8, r5
 8003506:	eb49 0106 	adc.w	r1, r9, r6
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	461d      	mov	r5, r3
 8003510:	f04f 0600 	mov.w	r6, #0
 8003514:	196b      	adds	r3, r5, r5
 8003516:	eb46 0406 	adc.w	r4, r6, r6
 800351a:	461a      	mov	r2, r3
 800351c:	4623      	mov	r3, r4
 800351e:	f7fd fabd 	bl	8000a9c <__aeabi_uldivmod>
 8003522:	4603      	mov	r3, r0
 8003524:	460c      	mov	r4, r1
 8003526:	461a      	mov	r2, r3
 8003528:	4ba5      	ldr	r3, [pc, #660]	; (80037c0 <UART_SetConfig+0x384>)
 800352a:	fba3 2302 	umull	r2, r3, r3, r2
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	461d      	mov	r5, r3
 8003538:	f04f 0600 	mov.w	r6, #0
 800353c:	46a9      	mov	r9, r5
 800353e:	46b2      	mov	sl, r6
 8003540:	eb19 0309 	adds.w	r3, r9, r9
 8003544:	eb4a 040a 	adc.w	r4, sl, sl
 8003548:	4699      	mov	r9, r3
 800354a:	46a2      	mov	sl, r4
 800354c:	eb19 0905 	adds.w	r9, r9, r5
 8003550:	eb4a 0a06 	adc.w	sl, sl, r6
 8003554:	f04f 0100 	mov.w	r1, #0
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003560:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003564:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003568:	4689      	mov	r9, r1
 800356a:	4692      	mov	sl, r2
 800356c:	eb19 0005 	adds.w	r0, r9, r5
 8003570:	eb4a 0106 	adc.w	r1, sl, r6
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	461d      	mov	r5, r3
 800357a:	f04f 0600 	mov.w	r6, #0
 800357e:	196b      	adds	r3, r5, r5
 8003580:	eb46 0406 	adc.w	r4, r6, r6
 8003584:	461a      	mov	r2, r3
 8003586:	4623      	mov	r3, r4
 8003588:	f7fd fa88 	bl	8000a9c <__aeabi_uldivmod>
 800358c:	4603      	mov	r3, r0
 800358e:	460c      	mov	r4, r1
 8003590:	461a      	mov	r2, r3
 8003592:	4b8b      	ldr	r3, [pc, #556]	; (80037c0 <UART_SetConfig+0x384>)
 8003594:	fba3 1302 	umull	r1, r3, r3, r2
 8003598:	095b      	lsrs	r3, r3, #5
 800359a:	2164      	movs	r1, #100	; 0x64
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	3332      	adds	r3, #50	; 0x32
 80035a6:	4a86      	ldr	r2, [pc, #536]	; (80037c0 <UART_SetConfig+0x384>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035b4:	4498      	add	r8, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	461d      	mov	r5, r3
 80035ba:	f04f 0600 	mov.w	r6, #0
 80035be:	46a9      	mov	r9, r5
 80035c0:	46b2      	mov	sl, r6
 80035c2:	eb19 0309 	adds.w	r3, r9, r9
 80035c6:	eb4a 040a 	adc.w	r4, sl, sl
 80035ca:	4699      	mov	r9, r3
 80035cc:	46a2      	mov	sl, r4
 80035ce:	eb19 0905 	adds.w	r9, r9, r5
 80035d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035ea:	4689      	mov	r9, r1
 80035ec:	4692      	mov	sl, r2
 80035ee:	eb19 0005 	adds.w	r0, r9, r5
 80035f2:	eb4a 0106 	adc.w	r1, sl, r6
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	461d      	mov	r5, r3
 80035fc:	f04f 0600 	mov.w	r6, #0
 8003600:	196b      	adds	r3, r5, r5
 8003602:	eb46 0406 	adc.w	r4, r6, r6
 8003606:	461a      	mov	r2, r3
 8003608:	4623      	mov	r3, r4
 800360a:	f7fd fa47 	bl	8000a9c <__aeabi_uldivmod>
 800360e:	4603      	mov	r3, r0
 8003610:	460c      	mov	r4, r1
 8003612:	461a      	mov	r2, r3
 8003614:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <UART_SetConfig+0x384>)
 8003616:	fba3 1302 	umull	r1, r3, r3, r2
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2164      	movs	r1, #100	; 0x64
 800361e:	fb01 f303 	mul.w	r3, r1, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	3332      	adds	r3, #50	; 0x32
 8003628:	4a65      	ldr	r2, [pc, #404]	; (80037c0 <UART_SetConfig+0x384>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	f003 0207 	and.w	r2, r3, #7
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4442      	add	r2, r8
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	e26f      	b.n	8003b1e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800363e:	f7fe fc87 	bl	8001f50 <HAL_RCC_GetPCLK1Freq>
 8003642:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	461d      	mov	r5, r3
 8003648:	f04f 0600 	mov.w	r6, #0
 800364c:	46a8      	mov	r8, r5
 800364e:	46b1      	mov	r9, r6
 8003650:	eb18 0308 	adds.w	r3, r8, r8
 8003654:	eb49 0409 	adc.w	r4, r9, r9
 8003658:	4698      	mov	r8, r3
 800365a:	46a1      	mov	r9, r4
 800365c:	eb18 0805 	adds.w	r8, r8, r5
 8003660:	eb49 0906 	adc.w	r9, r9, r6
 8003664:	f04f 0100 	mov.w	r1, #0
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003670:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003674:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003678:	4688      	mov	r8, r1
 800367a:	4691      	mov	r9, r2
 800367c:	eb18 0005 	adds.w	r0, r8, r5
 8003680:	eb49 0106 	adc.w	r1, r9, r6
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	461d      	mov	r5, r3
 800368a:	f04f 0600 	mov.w	r6, #0
 800368e:	196b      	adds	r3, r5, r5
 8003690:	eb46 0406 	adc.w	r4, r6, r6
 8003694:	461a      	mov	r2, r3
 8003696:	4623      	mov	r3, r4
 8003698:	f7fd fa00 	bl	8000a9c <__aeabi_uldivmod>
 800369c:	4603      	mov	r3, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <UART_SetConfig+0x384>)
 80036a4:	fba3 2302 	umull	r2, r3, r3, r2
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	461d      	mov	r5, r3
 80036b2:	f04f 0600 	mov.w	r6, #0
 80036b6:	46a9      	mov	r9, r5
 80036b8:	46b2      	mov	sl, r6
 80036ba:	eb19 0309 	adds.w	r3, r9, r9
 80036be:	eb4a 040a 	adc.w	r4, sl, sl
 80036c2:	4699      	mov	r9, r3
 80036c4:	46a2      	mov	sl, r4
 80036c6:	eb19 0905 	adds.w	r9, r9, r5
 80036ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80036ce:	f04f 0100 	mov.w	r1, #0
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036e2:	4689      	mov	r9, r1
 80036e4:	4692      	mov	sl, r2
 80036e6:	eb19 0005 	adds.w	r0, r9, r5
 80036ea:	eb4a 0106 	adc.w	r1, sl, r6
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	461d      	mov	r5, r3
 80036f4:	f04f 0600 	mov.w	r6, #0
 80036f8:	196b      	adds	r3, r5, r5
 80036fa:	eb46 0406 	adc.w	r4, r6, r6
 80036fe:	461a      	mov	r2, r3
 8003700:	4623      	mov	r3, r4
 8003702:	f7fd f9cb 	bl	8000a9c <__aeabi_uldivmod>
 8003706:	4603      	mov	r3, r0
 8003708:	460c      	mov	r4, r1
 800370a:	461a      	mov	r2, r3
 800370c:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <UART_SetConfig+0x384>)
 800370e:	fba3 1302 	umull	r1, r3, r3, r2
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2164      	movs	r1, #100	; 0x64
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	3332      	adds	r3, #50	; 0x32
 8003720:	4a27      	ldr	r2, [pc, #156]	; (80037c0 <UART_SetConfig+0x384>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800372e:	4498      	add	r8, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	461d      	mov	r5, r3
 8003734:	f04f 0600 	mov.w	r6, #0
 8003738:	46a9      	mov	r9, r5
 800373a:	46b2      	mov	sl, r6
 800373c:	eb19 0309 	adds.w	r3, r9, r9
 8003740:	eb4a 040a 	adc.w	r4, sl, sl
 8003744:	4699      	mov	r9, r3
 8003746:	46a2      	mov	sl, r4
 8003748:	eb19 0905 	adds.w	r9, r9, r5
 800374c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003750:	f04f 0100 	mov.w	r1, #0
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800375c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003760:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003764:	4689      	mov	r9, r1
 8003766:	4692      	mov	sl, r2
 8003768:	eb19 0005 	adds.w	r0, r9, r5
 800376c:	eb4a 0106 	adc.w	r1, sl, r6
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	461d      	mov	r5, r3
 8003776:	f04f 0600 	mov.w	r6, #0
 800377a:	196b      	adds	r3, r5, r5
 800377c:	eb46 0406 	adc.w	r4, r6, r6
 8003780:	461a      	mov	r2, r3
 8003782:	4623      	mov	r3, r4
 8003784:	f7fd f98a 	bl	8000a9c <__aeabi_uldivmod>
 8003788:	4603      	mov	r3, r0
 800378a:	460c      	mov	r4, r1
 800378c:	461a      	mov	r2, r3
 800378e:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <UART_SetConfig+0x384>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	; 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	3332      	adds	r3, #50	; 0x32
 80037a2:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <UART_SetConfig+0x384>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 0207 	and.w	r2, r3, #7
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4442      	add	r2, r8
 80037b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80037b6:	e1b2      	b.n	8003b1e <UART_SetConfig+0x6e2>
 80037b8:	40011000 	.word	0x40011000
 80037bc:	40011400 	.word	0x40011400
 80037c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4ad7      	ldr	r2, [pc, #860]	; (8003b28 <UART_SetConfig+0x6ec>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d005      	beq.n	80037da <UART_SetConfig+0x39e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4ad6      	ldr	r2, [pc, #856]	; (8003b2c <UART_SetConfig+0x6f0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	f040 80d1 	bne.w	800397c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80037da:	f7fe fbcd 	bl	8001f78 <HAL_RCC_GetPCLK2Freq>
 80037de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	469a      	mov	sl, r3
 80037e4:	f04f 0b00 	mov.w	fp, #0
 80037e8:	46d0      	mov	r8, sl
 80037ea:	46d9      	mov	r9, fp
 80037ec:	eb18 0308 	adds.w	r3, r8, r8
 80037f0:	eb49 0409 	adc.w	r4, r9, r9
 80037f4:	4698      	mov	r8, r3
 80037f6:	46a1      	mov	r9, r4
 80037f8:	eb18 080a 	adds.w	r8, r8, sl
 80037fc:	eb49 090b 	adc.w	r9, r9, fp
 8003800:	f04f 0100 	mov.w	r1, #0
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800380c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003810:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003814:	4688      	mov	r8, r1
 8003816:	4691      	mov	r9, r2
 8003818:	eb1a 0508 	adds.w	r5, sl, r8
 800381c:	eb4b 0609 	adc.w	r6, fp, r9
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4619      	mov	r1, r3
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	f04f 0400 	mov.w	r4, #0
 8003832:	0094      	lsls	r4, r2, #2
 8003834:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003838:	008b      	lsls	r3, r1, #2
 800383a:	461a      	mov	r2, r3
 800383c:	4623      	mov	r3, r4
 800383e:	4628      	mov	r0, r5
 8003840:	4631      	mov	r1, r6
 8003842:	f7fd f92b 	bl	8000a9c <__aeabi_uldivmod>
 8003846:	4603      	mov	r3, r0
 8003848:	460c      	mov	r4, r1
 800384a:	461a      	mov	r2, r3
 800384c:	4bb8      	ldr	r3, [pc, #736]	; (8003b30 <UART_SetConfig+0x6f4>)
 800384e:	fba3 2302 	umull	r2, r3, r3, r2
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	469b      	mov	fp, r3
 800385c:	f04f 0c00 	mov.w	ip, #0
 8003860:	46d9      	mov	r9, fp
 8003862:	46e2      	mov	sl, ip
 8003864:	eb19 0309 	adds.w	r3, r9, r9
 8003868:	eb4a 040a 	adc.w	r4, sl, sl
 800386c:	4699      	mov	r9, r3
 800386e:	46a2      	mov	sl, r4
 8003870:	eb19 090b 	adds.w	r9, r9, fp
 8003874:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003878:	f04f 0100 	mov.w	r1, #0
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003884:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003888:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800388c:	4689      	mov	r9, r1
 800388e:	4692      	mov	sl, r2
 8003890:	eb1b 0509 	adds.w	r5, fp, r9
 8003894:	eb4c 060a 	adc.w	r6, ip, sl
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4619      	mov	r1, r3
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	f04f 0400 	mov.w	r4, #0
 80038aa:	0094      	lsls	r4, r2, #2
 80038ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038b0:	008b      	lsls	r3, r1, #2
 80038b2:	461a      	mov	r2, r3
 80038b4:	4623      	mov	r3, r4
 80038b6:	4628      	mov	r0, r5
 80038b8:	4631      	mov	r1, r6
 80038ba:	f7fd f8ef 	bl	8000a9c <__aeabi_uldivmod>
 80038be:	4603      	mov	r3, r0
 80038c0:	460c      	mov	r4, r1
 80038c2:	461a      	mov	r2, r3
 80038c4:	4b9a      	ldr	r3, [pc, #616]	; (8003b30 <UART_SetConfig+0x6f4>)
 80038c6:	fba3 1302 	umull	r1, r3, r3, r2
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2164      	movs	r1, #100	; 0x64
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	3332      	adds	r3, #50	; 0x32
 80038d8:	4a95      	ldr	r2, [pc, #596]	; (8003b30 <UART_SetConfig+0x6f4>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e4:	4498      	add	r8, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	469b      	mov	fp, r3
 80038ea:	f04f 0c00 	mov.w	ip, #0
 80038ee:	46d9      	mov	r9, fp
 80038f0:	46e2      	mov	sl, ip
 80038f2:	eb19 0309 	adds.w	r3, r9, r9
 80038f6:	eb4a 040a 	adc.w	r4, sl, sl
 80038fa:	4699      	mov	r9, r3
 80038fc:	46a2      	mov	sl, r4
 80038fe:	eb19 090b 	adds.w	r9, r9, fp
 8003902:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003912:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003916:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800391a:	4689      	mov	r9, r1
 800391c:	4692      	mov	sl, r2
 800391e:	eb1b 0509 	adds.w	r5, fp, r9
 8003922:	eb4c 060a 	adc.w	r6, ip, sl
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4619      	mov	r1, r3
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	f04f 0400 	mov.w	r4, #0
 8003938:	0094      	lsls	r4, r2, #2
 800393a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800393e:	008b      	lsls	r3, r1, #2
 8003940:	461a      	mov	r2, r3
 8003942:	4623      	mov	r3, r4
 8003944:	4628      	mov	r0, r5
 8003946:	4631      	mov	r1, r6
 8003948:	f7fd f8a8 	bl	8000a9c <__aeabi_uldivmod>
 800394c:	4603      	mov	r3, r0
 800394e:	460c      	mov	r4, r1
 8003950:	461a      	mov	r2, r3
 8003952:	4b77      	ldr	r3, [pc, #476]	; (8003b30 <UART_SetConfig+0x6f4>)
 8003954:	fba3 1302 	umull	r1, r3, r3, r2
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	2164      	movs	r1, #100	; 0x64
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	3332      	adds	r3, #50	; 0x32
 8003966:	4a72      	ldr	r2, [pc, #456]	; (8003b30 <UART_SetConfig+0x6f4>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	f003 020f 	and.w	r2, r3, #15
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4442      	add	r2, r8
 8003978:	609a      	str	r2, [r3, #8]
 800397a:	e0d0      	b.n	8003b1e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800397c:	f7fe fae8 	bl	8001f50 <HAL_RCC_GetPCLK1Freq>
 8003980:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	469a      	mov	sl, r3
 8003986:	f04f 0b00 	mov.w	fp, #0
 800398a:	46d0      	mov	r8, sl
 800398c:	46d9      	mov	r9, fp
 800398e:	eb18 0308 	adds.w	r3, r8, r8
 8003992:	eb49 0409 	adc.w	r4, r9, r9
 8003996:	4698      	mov	r8, r3
 8003998:	46a1      	mov	r9, r4
 800399a:	eb18 080a 	adds.w	r8, r8, sl
 800399e:	eb49 090b 	adc.w	r9, r9, fp
 80039a2:	f04f 0100 	mov.w	r1, #0
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039b6:	4688      	mov	r8, r1
 80039b8:	4691      	mov	r9, r2
 80039ba:	eb1a 0508 	adds.w	r5, sl, r8
 80039be:	eb4b 0609 	adc.w	r6, fp, r9
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4619      	mov	r1, r3
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	f04f 0400 	mov.w	r4, #0
 80039d4:	0094      	lsls	r4, r2, #2
 80039d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039da:	008b      	lsls	r3, r1, #2
 80039dc:	461a      	mov	r2, r3
 80039de:	4623      	mov	r3, r4
 80039e0:	4628      	mov	r0, r5
 80039e2:	4631      	mov	r1, r6
 80039e4:	f7fd f85a 	bl	8000a9c <__aeabi_uldivmod>
 80039e8:	4603      	mov	r3, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b50      	ldr	r3, [pc, #320]	; (8003b30 <UART_SetConfig+0x6f4>)
 80039f0:	fba3 2302 	umull	r2, r3, r3, r2
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	469b      	mov	fp, r3
 80039fe:	f04f 0c00 	mov.w	ip, #0
 8003a02:	46d9      	mov	r9, fp
 8003a04:	46e2      	mov	sl, ip
 8003a06:	eb19 0309 	adds.w	r3, r9, r9
 8003a0a:	eb4a 040a 	adc.w	r4, sl, sl
 8003a0e:	4699      	mov	r9, r3
 8003a10:	46a2      	mov	sl, r4
 8003a12:	eb19 090b 	adds.w	r9, r9, fp
 8003a16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a2e:	4689      	mov	r9, r1
 8003a30:	4692      	mov	sl, r2
 8003a32:	eb1b 0509 	adds.w	r5, fp, r9
 8003a36:	eb4c 060a 	adc.w	r6, ip, sl
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	f04f 0400 	mov.w	r4, #0
 8003a4c:	0094      	lsls	r4, r2, #2
 8003a4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a52:	008b      	lsls	r3, r1, #2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4623      	mov	r3, r4
 8003a58:	4628      	mov	r0, r5
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	f7fd f81e 	bl	8000a9c <__aeabi_uldivmod>
 8003a60:	4603      	mov	r3, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	461a      	mov	r2, r3
 8003a66:	4b32      	ldr	r3, [pc, #200]	; (8003b30 <UART_SetConfig+0x6f4>)
 8003a68:	fba3 1302 	umull	r1, r3, r3, r2
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	2164      	movs	r1, #100	; 0x64
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	3332      	adds	r3, #50	; 0x32
 8003a7a:	4a2d      	ldr	r2, [pc, #180]	; (8003b30 <UART_SetConfig+0x6f4>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a86:	4498      	add	r8, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	469b      	mov	fp, r3
 8003a8c:	f04f 0c00 	mov.w	ip, #0
 8003a90:	46d9      	mov	r9, fp
 8003a92:	46e2      	mov	sl, ip
 8003a94:	eb19 0309 	adds.w	r3, r9, r9
 8003a98:	eb4a 040a 	adc.w	r4, sl, sl
 8003a9c:	4699      	mov	r9, r3
 8003a9e:	46a2      	mov	sl, r4
 8003aa0:	eb19 090b 	adds.w	r9, r9, fp
 8003aa4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ab8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003abc:	4689      	mov	r9, r1
 8003abe:	4692      	mov	sl, r2
 8003ac0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ac4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4619      	mov	r1, r3
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	f04f 0400 	mov.w	r4, #0
 8003ada:	0094      	lsls	r4, r2, #2
 8003adc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ae0:	008b      	lsls	r3, r1, #2
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4623      	mov	r3, r4
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	4631      	mov	r1, r6
 8003aea:	f7fc ffd7 	bl	8000a9c <__aeabi_uldivmod>
 8003aee:	4603      	mov	r3, r0
 8003af0:	460c      	mov	r4, r1
 8003af2:	461a      	mov	r2, r3
 8003af4:	4b0e      	ldr	r3, [pc, #56]	; (8003b30 <UART_SetConfig+0x6f4>)
 8003af6:	fba3 1302 	umull	r1, r3, r3, r2
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	2164      	movs	r1, #100	; 0x64
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	3332      	adds	r3, #50	; 0x32
 8003b08:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <UART_SetConfig+0x6f4>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	f003 020f 	and.w	r2, r3, #15
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4442      	add	r2, r8
 8003b1a:	609a      	str	r2, [r3, #8]
}
 8003b1c:	e7ff      	b.n	8003b1e <UART_SetConfig+0x6e2>
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b28:	40011000 	.word	0x40011000
 8003b2c:	40011400 	.word	0x40011400
 8003b30:	51eb851f 	.word	0x51eb851f

08003b34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b46:	2b84      	cmp	r3, #132	; 0x84
 8003b48:	d005      	beq.n	8003b56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4413      	add	r3, r2
 8003b52:	3303      	adds	r3, #3
 8003b54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b56:	68fb      	ldr	r3, [r7, #12]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b68:	f000 fada 	bl	8004120 <vTaskStartScheduler>
  
  return osOK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b74:	b089      	sub	sp, #36	; 0x24
 8003b76:	af04      	add	r7, sp, #16
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d020      	beq.n	8003bc6 <osThreadCreate+0x54>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01c      	beq.n	8003bc6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685c      	ldr	r4, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681d      	ldr	r5, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691e      	ldr	r6, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff ffc8 	bl	8003b34 <makeFreeRtosPriority>
 8003ba4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bae:	9202      	str	r2, [sp, #8]
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	9100      	str	r1, [sp, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	4632      	mov	r2, r6
 8003bb8:	4629      	mov	r1, r5
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f000 f8ed 	bl	8003d9a <xTaskCreateStatic>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e01c      	b.n	8003c00 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685c      	ldr	r4, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bd2:	b29e      	uxth	r6, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ffaa 	bl	8003b34 <makeFreeRtosPriority>
 8003be0:	4602      	mov	r2, r0
 8003be2:	f107 030c 	add.w	r3, r7, #12
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	9200      	str	r2, [sp, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	4632      	mov	r2, r6
 8003bee:	4629      	mov	r1, r5
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f000 f92c 	bl	8003e4e <xTaskCreate>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d001      	beq.n	8003c00 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c00:	68fb      	ldr	r3, [r7, #12]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c0a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <osDelay+0x16>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	e000      	b.n	8003c22 <osDelay+0x18>
 8003c20:	2301      	movs	r3, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fa48 	bl	80040b8 <vTaskDelay>
  
  return osOK;
 8003c28:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f103 0208 	add.w	r2, r3, #8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f103 0208 	add.w	r2, r3, #8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f103 0208 	add.w	r2, r3, #8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	601a      	str	r2, [r3, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d103      	bne.n	8003cf4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e00c      	b.n	8003d0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e002      	b.n	8003d02 <vListInsert+0x2e>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d2f6      	bcs.n	8003cfc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	601a      	str	r2, [r3, #0]
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6892      	ldr	r2, [r2, #8]
 8003d5c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6852      	ldr	r2, [r2, #4]
 8003d66:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d103      	bne.n	8003d7a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	1e5a      	subs	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b08e      	sub	sp, #56	; 0x38
 8003d9e:	af04      	add	r7, sp, #16
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	623b      	str	r3, [r7, #32]
 8003dc0:	e7fe      	b.n	8003dc0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <xTaskCreateStatic+0x42>
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	e7fe      	b.n	8003dda <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ddc:	2354      	movs	r3, #84	; 0x54
 8003dde:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b54      	cmp	r3, #84	; 0x54
 8003de4:	d009      	beq.n	8003dfa <xTaskCreateStatic+0x60>
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	e7fe      	b.n	8003df8 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003dfa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01e      	beq.n	8003e40 <xTaskCreateStatic+0xa6>
 8003e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01b      	beq.n	8003e40 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	2202      	movs	r2, #2
 8003e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9303      	str	r3, [sp, #12]
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	9302      	str	r3, [sp, #8]
 8003e22:	f107 0314 	add.w	r3, r7, #20
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f850 	bl	8003ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e3a:	f000 f8d3 	bl	8003fe4 <prvAddNewTaskToReadyList>
 8003e3e:	e001      	b.n	8003e44 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e44:	697b      	ldr	r3, [r7, #20]
	}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3728      	adds	r7, #40	; 0x28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b08c      	sub	sp, #48	; 0x30
 8003e52:	af04      	add	r7, sp, #16
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fece 	bl	8004c04 <pvPortMalloc>
 8003e68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00e      	beq.n	8003e8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e70:	2054      	movs	r0, #84	; 0x54
 8003e72:	f000 fec7 	bl	8004c04 <pvPortMalloc>
 8003e76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
 8003e84:	e005      	b.n	8003e92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	f000 ff7e 	bl	8004d88 <vPortFree>
 8003e8c:	e001      	b.n	8003e92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d017      	beq.n	8003ec8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	9303      	str	r3, [sp, #12]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	9302      	str	r3, [sp, #8]
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f80e 	bl	8003ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ebc:	69f8      	ldr	r0, [r7, #28]
 8003ebe:	f000 f891 	bl	8003fe4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	e002      	b.n	8003ece <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ecc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ece:	69bb      	ldr	r3, [r7, #24]
	}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3720      	adds	r7, #32
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f023 0307 	bic.w	r3, r3, #7
 8003efe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <prvInitialiseNewTask+0x46>
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e7fe      	b.n	8003f1c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01f      	beq.n	8003f64 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e012      	b.n	8003f50 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	4413      	add	r3, r2
 8003f30:	7819      	ldrb	r1, [r3, #0]
 8003f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	4413      	add	r3, r2
 8003f38:	3334      	adds	r3, #52	; 0x34
 8003f3a:	460a      	mov	r2, r1
 8003f3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	4413      	add	r3, r2
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d006      	beq.n	8003f58 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	61fb      	str	r3, [r7, #28]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	2b0f      	cmp	r3, #15
 8003f54:	d9e9      	bls.n	8003f2a <prvInitialiseNewTask+0x52>
 8003f56:	e000      	b.n	8003f5a <prvInitialiseNewTask+0x82>
			{
				break;
 8003f58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f62:	e003      	b.n	8003f6c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	d901      	bls.n	8003f76 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f72:	2306      	movs	r3, #6
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	2200      	movs	r2, #0
 8003f86:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fe70 	bl	8003c72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	3318      	adds	r3, #24
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fe6b 	bl	8003c72 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa4:	f1c3 0207 	rsb	r2, r3, #7
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	68f9      	ldr	r1, [r7, #12]
 8003fc4:	69b8      	ldr	r0, [r7, #24]
 8003fc6:	f000 fc1b 	bl	8004800 <pxPortInitialiseStack>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fdc:	bf00      	nop
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fec:	f000 fd2e 	bl	8004a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	; (800409c <prvAddNewTaskToReadyList+0xb8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	4a29      	ldr	r2, [pc, #164]	; (800409c <prvAddNewTaskToReadyList+0xb8>)
 8003ff8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ffa:	4b29      	ldr	r3, [pc, #164]	; (80040a0 <prvAddNewTaskToReadyList+0xbc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004002:	4a27      	ldr	r2, [pc, #156]	; (80040a0 <prvAddNewTaskToReadyList+0xbc>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004008:	4b24      	ldr	r3, [pc, #144]	; (800409c <prvAddNewTaskToReadyList+0xb8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d110      	bne.n	8004032 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004010:	f000 fab8 	bl	8004584 <prvInitialiseTaskLists>
 8004014:	e00d      	b.n	8004032 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004016:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <prvAddNewTaskToReadyList+0xc0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800401e:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <prvAddNewTaskToReadyList+0xbc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	429a      	cmp	r2, r3
 800402a:	d802      	bhi.n	8004032 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800402c:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <prvAddNewTaskToReadyList+0xbc>)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <prvAddNewTaskToReadyList+0xc4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3301      	adds	r3, #1
 8004038:	4a1b      	ldr	r2, [pc, #108]	; (80040a8 <prvAddNewTaskToReadyList+0xc4>)
 800403a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	2201      	movs	r2, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	4b19      	ldr	r3, [pc, #100]	; (80040ac <prvAddNewTaskToReadyList+0xc8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4313      	orrs	r3, r2
 800404a:	4a18      	ldr	r2, [pc, #96]	; (80040ac <prvAddNewTaskToReadyList+0xc8>)
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <prvAddNewTaskToReadyList+0xcc>)
 800405c:	441a      	add	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f7ff fe11 	bl	8003c8c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800406a:	f000 fd1d 	bl	8004aa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <prvAddNewTaskToReadyList+0xc0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00e      	beq.n	8004094 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <prvAddNewTaskToReadyList+0xbc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	429a      	cmp	r2, r3
 8004082:	d207      	bcs.n	8004094 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <prvAddNewTaskToReadyList+0xd0>)
 8004086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	200003f8 	.word	0x200003f8
 80040a0:	200002f8 	.word	0x200002f8
 80040a4:	20000404 	.word	0x20000404
 80040a8:	20000414 	.word	0x20000414
 80040ac:	20000400 	.word	0x20000400
 80040b0:	200002fc 	.word	0x200002fc
 80040b4:	e000ed04 	.word	0xe000ed04

080040b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040ca:	4b13      	ldr	r3, [pc, #76]	; (8004118 <vTaskDelay+0x60>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <vTaskDelay+0x2e>
 80040d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	e7fe      	b.n	80040e4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80040e6:	f000 f879 	bl	80041dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040ea:	2100      	movs	r1, #0
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fb21 	bl	8004734 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040f2:	f000 f881 	bl	80041f8 <xTaskResumeAll>
 80040f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d107      	bne.n	800410e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <vTaskDelay+0x64>)
 8004100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000420 	.word	0x20000420
 800411c:	e000ed04 	.word	0xe000ed04

08004120 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800412e:	463a      	mov	r2, r7
 8004130:	1d39      	adds	r1, r7, #4
 8004132:	f107 0308 	add.w	r3, r7, #8
 8004136:	4618      	mov	r0, r3
 8004138:	f7fc fe30 	bl	8000d9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800413c:	6839      	ldr	r1, [r7, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	9202      	str	r2, [sp, #8]
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	2300      	movs	r3, #0
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2300      	movs	r3, #0
 800414c:	460a      	mov	r2, r1
 800414e:	491d      	ldr	r1, [pc, #116]	; (80041c4 <vTaskStartScheduler+0xa4>)
 8004150:	481d      	ldr	r0, [pc, #116]	; (80041c8 <vTaskStartScheduler+0xa8>)
 8004152:	f7ff fe22 	bl	8003d9a <xTaskCreateStatic>
 8004156:	4602      	mov	r2, r0
 8004158:	4b1c      	ldr	r3, [pc, #112]	; (80041cc <vTaskStartScheduler+0xac>)
 800415a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800415c:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <vTaskStartScheduler+0xac>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004164:	2301      	movs	r3, #1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e001      	b.n	800416e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d115      	bne.n	80041a0 <vTaskStartScheduler+0x80>
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004186:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <vTaskStartScheduler+0xb0>)
 8004188:	f04f 32ff 	mov.w	r2, #4294967295
 800418c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <vTaskStartScheduler+0xb4>)
 8004190:	2201      	movs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004194:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <vTaskStartScheduler+0xb8>)
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800419a:	f000 fbb9 	bl	8004910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800419e:	e00d      	b.n	80041bc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a6:	d109      	bne.n	80041bc <vTaskStartScheduler+0x9c>
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e7fe      	b.n	80041ba <vTaskStartScheduler+0x9a>
}
 80041bc:	bf00      	nop
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	08005870 	.word	0x08005870
 80041c8:	08004555 	.word	0x08004555
 80041cc:	2000041c 	.word	0x2000041c
 80041d0:	20000418 	.word	0x20000418
 80041d4:	20000404 	.word	0x20000404
 80041d8:	200003fc 	.word	0x200003fc

080041dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <vTaskSuspendAll+0x18>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	4a03      	ldr	r2, [pc, #12]	; (80041f4 <vTaskSuspendAll+0x18>)
 80041e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80041ea:	bf00      	nop
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	20000420 	.word	0x20000420

080041f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004206:	4b41      	ldr	r3, [pc, #260]	; (800430c <xTaskResumeAll+0x114>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <xTaskResumeAll+0x2a>
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	e7fe      	b.n	8004220 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004222:	f000 fc13 	bl	8004a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004226:	4b39      	ldr	r3, [pc, #228]	; (800430c <xTaskResumeAll+0x114>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3b01      	subs	r3, #1
 800422c:	4a37      	ldr	r2, [pc, #220]	; (800430c <xTaskResumeAll+0x114>)
 800422e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004230:	4b36      	ldr	r3, [pc, #216]	; (800430c <xTaskResumeAll+0x114>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d161      	bne.n	80042fc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004238:	4b35      	ldr	r3, [pc, #212]	; (8004310 <xTaskResumeAll+0x118>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d05d      	beq.n	80042fc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004240:	e02e      	b.n	80042a0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004242:	4b34      	ldr	r3, [pc, #208]	; (8004314 <xTaskResumeAll+0x11c>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3318      	adds	r3, #24
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fd79 	bl	8003d46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3304      	adds	r3, #4
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fd74 	bl	8003d46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	2201      	movs	r2, #1
 8004264:	409a      	lsls	r2, r3
 8004266:	4b2c      	ldr	r3, [pc, #176]	; (8004318 <xTaskResumeAll+0x120>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4313      	orrs	r3, r2
 800426c:	4a2a      	ldr	r2, [pc, #168]	; (8004318 <xTaskResumeAll+0x120>)
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4a27      	ldr	r2, [pc, #156]	; (800431c <xTaskResumeAll+0x124>)
 800427e:	441a      	add	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3304      	adds	r3, #4
 8004284:	4619      	mov	r1, r3
 8004286:	4610      	mov	r0, r2
 8004288:	f7ff fd00 	bl	8003c8c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	4b23      	ldr	r3, [pc, #140]	; (8004320 <xTaskResumeAll+0x128>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800429a:	4b22      	ldr	r3, [pc, #136]	; (8004324 <xTaskResumeAll+0x12c>)
 800429c:	2201      	movs	r2, #1
 800429e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042a0:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <xTaskResumeAll+0x11c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1cc      	bne.n	8004242 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042ae:	f000 fa03 	bl	80046b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <xTaskResumeAll+0x130>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d010      	beq.n	80042e0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042be:	f000 f837 	bl	8004330 <xTaskIncrementTick>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <xTaskResumeAll+0x12c>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f1      	bne.n	80042be <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <xTaskResumeAll+0x130>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042e0:	4b10      	ldr	r3, [pc, #64]	; (8004324 <xTaskResumeAll+0x12c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042e8:	2301      	movs	r3, #1
 80042ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <xTaskResumeAll+0x134>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042fc:	f000 fbd4 	bl	8004aa8 <vPortExitCritical>

	return xAlreadyYielded;
 8004300:	68bb      	ldr	r3, [r7, #8]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000420 	.word	0x20000420
 8004310:	200003f8 	.word	0x200003f8
 8004314:	200003b8 	.word	0x200003b8
 8004318:	20000400 	.word	0x20000400
 800431c:	200002fc 	.word	0x200002fc
 8004320:	200002f8 	.word	0x200002f8
 8004324:	2000040c 	.word	0x2000040c
 8004328:	20000408 	.word	0x20000408
 800432c:	e000ed04 	.word	0xe000ed04

08004330 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433a:	4b4e      	ldr	r3, [pc, #312]	; (8004474 <xTaskIncrementTick+0x144>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f040 8087 	bne.w	8004452 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004344:	4b4c      	ldr	r3, [pc, #304]	; (8004478 <xTaskIncrementTick+0x148>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800434c:	4a4a      	ldr	r2, [pc, #296]	; (8004478 <xTaskIncrementTick+0x148>)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11f      	bne.n	8004398 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004358:	4b48      	ldr	r3, [pc, #288]	; (800447c <xTaskIncrementTick+0x14c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <xTaskIncrementTick+0x46>
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	e7fe      	b.n	8004374 <xTaskIncrementTick+0x44>
 8004376:	4b41      	ldr	r3, [pc, #260]	; (800447c <xTaskIncrementTick+0x14c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	4b40      	ldr	r3, [pc, #256]	; (8004480 <xTaskIncrementTick+0x150>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a3e      	ldr	r2, [pc, #248]	; (800447c <xTaskIncrementTick+0x14c>)
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4a3e      	ldr	r2, [pc, #248]	; (8004480 <xTaskIncrementTick+0x150>)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <xTaskIncrementTick+0x154>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	4a3c      	ldr	r2, [pc, #240]	; (8004484 <xTaskIncrementTick+0x154>)
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	f000 f990 	bl	80046b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004398:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <xTaskIncrementTick+0x158>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d348      	bcc.n	8004434 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043a2:	4b36      	ldr	r3, [pc, #216]	; (800447c <xTaskIncrementTick+0x14c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ac:	4b36      	ldr	r3, [pc, #216]	; (8004488 <xTaskIncrementTick+0x158>)
 80043ae:	f04f 32ff 	mov.w	r2, #4294967295
 80043b2:	601a      	str	r2, [r3, #0]
					break;
 80043b4:	e03e      	b.n	8004434 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b6:	4b31      	ldr	r3, [pc, #196]	; (800447c <xTaskIncrementTick+0x14c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d203      	bcs.n	80043d6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043ce:	4a2e      	ldr	r2, [pc, #184]	; (8004488 <xTaskIncrementTick+0x158>)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043d4:	e02e      	b.n	8004434 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	3304      	adds	r3, #4
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fcb3 	bl	8003d46 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	3318      	adds	r3, #24
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fcaa 	bl	8003d46 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	2201      	movs	r2, #1
 80043f8:	409a      	lsls	r2, r3
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <xTaskIncrementTick+0x15c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4313      	orrs	r3, r2
 8004400:	4a22      	ldr	r2, [pc, #136]	; (800448c <xTaskIncrementTick+0x15c>)
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <xTaskIncrementTick+0x160>)
 8004412:	441a      	add	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	3304      	adds	r3, #4
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f7ff fc36 	bl	8003c8c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <xTaskIncrementTick+0x164>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	429a      	cmp	r2, r3
 800442c:	d3b9      	bcc.n	80043a2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800442e:	2301      	movs	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004432:	e7b6      	b.n	80043a2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004434:	4b17      	ldr	r3, [pc, #92]	; (8004494 <xTaskIncrementTick+0x164>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443a:	4915      	ldr	r1, [pc, #84]	; (8004490 <xTaskIncrementTick+0x160>)
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d907      	bls.n	800445c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800444c:	2301      	movs	r3, #1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e004      	b.n	800445c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004452:	4b11      	ldr	r3, [pc, #68]	; (8004498 <xTaskIncrementTick+0x168>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3301      	adds	r3, #1
 8004458:	4a0f      	ldr	r2, [pc, #60]	; (8004498 <xTaskIncrementTick+0x168>)
 800445a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <xTaskIncrementTick+0x16c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004464:	2301      	movs	r3, #1
 8004466:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004468:	697b      	ldr	r3, [r7, #20]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000420 	.word	0x20000420
 8004478:	200003fc 	.word	0x200003fc
 800447c:	200003b0 	.word	0x200003b0
 8004480:	200003b4 	.word	0x200003b4
 8004484:	20000410 	.word	0x20000410
 8004488:	20000418 	.word	0x20000418
 800448c:	20000400 	.word	0x20000400
 8004490:	200002fc 	.word	0x200002fc
 8004494:	200002f8 	.word	0x200002f8
 8004498:	20000408 	.word	0x20000408
 800449c:	2000040c 	.word	0x2000040c

080044a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044a6:	4b26      	ldr	r3, [pc, #152]	; (8004540 <vTaskSwitchContext+0xa0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <vTaskSwitchContext+0xa4>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044b4:	e03e      	b.n	8004534 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80044b6:	4b23      	ldr	r3, [pc, #140]	; (8004544 <vTaskSwitchContext+0xa4>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044bc:	4b22      	ldr	r3, [pc, #136]	; (8004548 <vTaskSwitchContext+0xa8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80044ca:	7afb      	ldrb	r3, [r7, #11]
 80044cc:	f1c3 031f 	rsb	r3, r3, #31
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	491e      	ldr	r1, [pc, #120]	; (800454c <vTaskSwitchContext+0xac>)
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <vTaskSwitchContext+0x5a>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	e7fe      	b.n	80044f8 <vTaskSwitchContext+0x58>
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4a11      	ldr	r2, [pc, #68]	; (800454c <vTaskSwitchContext+0xac>)
 8004506:	4413      	add	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	605a      	str	r2, [r3, #4]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	3308      	adds	r3, #8
 800451c:	429a      	cmp	r2, r3
 800451e:	d104      	bne.n	800452a <vTaskSwitchContext+0x8a>
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a07      	ldr	r2, [pc, #28]	; (8004550 <vTaskSwitchContext+0xb0>)
 8004532:	6013      	str	r3, [r2, #0]
}
 8004534:	bf00      	nop
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	20000420 	.word	0x20000420
 8004544:	2000040c 	.word	0x2000040c
 8004548:	20000400 	.word	0x20000400
 800454c:	200002fc 	.word	0x200002fc
 8004550:	200002f8 	.word	0x200002f8

08004554 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800455c:	f000 f852 	bl	8004604 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <prvIdleTask+0x28>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d9f9      	bls.n	800455c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <prvIdleTask+0x2c>)
 800456a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004578:	e7f0      	b.n	800455c <prvIdleTask+0x8>
 800457a:	bf00      	nop
 800457c:	200002fc 	.word	0x200002fc
 8004580:	e000ed04 	.word	0xe000ed04

08004584 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800458a:	2300      	movs	r3, #0
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	e00c      	b.n	80045aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4a12      	ldr	r2, [pc, #72]	; (80045e4 <prvInitialiseTaskLists+0x60>)
 800459c:	4413      	add	r3, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fb47 	bl	8003c32 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3301      	adds	r3, #1
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b06      	cmp	r3, #6
 80045ae:	d9ef      	bls.n	8004590 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045b0:	480d      	ldr	r0, [pc, #52]	; (80045e8 <prvInitialiseTaskLists+0x64>)
 80045b2:	f7ff fb3e 	bl	8003c32 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045b6:	480d      	ldr	r0, [pc, #52]	; (80045ec <prvInitialiseTaskLists+0x68>)
 80045b8:	f7ff fb3b 	bl	8003c32 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045bc:	480c      	ldr	r0, [pc, #48]	; (80045f0 <prvInitialiseTaskLists+0x6c>)
 80045be:	f7ff fb38 	bl	8003c32 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045c2:	480c      	ldr	r0, [pc, #48]	; (80045f4 <prvInitialiseTaskLists+0x70>)
 80045c4:	f7ff fb35 	bl	8003c32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045c8:	480b      	ldr	r0, [pc, #44]	; (80045f8 <prvInitialiseTaskLists+0x74>)
 80045ca:	f7ff fb32 	bl	8003c32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <prvInitialiseTaskLists+0x78>)
 80045d0:	4a05      	ldr	r2, [pc, #20]	; (80045e8 <prvInitialiseTaskLists+0x64>)
 80045d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <prvInitialiseTaskLists+0x7c>)
 80045d6:	4a05      	ldr	r2, [pc, #20]	; (80045ec <prvInitialiseTaskLists+0x68>)
 80045d8:	601a      	str	r2, [r3, #0]
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	200002fc 	.word	0x200002fc
 80045e8:	20000388 	.word	0x20000388
 80045ec:	2000039c 	.word	0x2000039c
 80045f0:	200003b8 	.word	0x200003b8
 80045f4:	200003cc 	.word	0x200003cc
 80045f8:	200003e4 	.word	0x200003e4
 80045fc:	200003b0 	.word	0x200003b0
 8004600:	200003b4 	.word	0x200003b4

08004604 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800460a:	e019      	b.n	8004640 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800460c:	f000 fa1e 	bl	8004a4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004610:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <prvCheckTasksWaitingTermination+0x4c>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fb92 	bl	8003d46 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004622:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <prvCheckTasksWaitingTermination+0x50>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3b01      	subs	r3, #1
 8004628:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <prvCheckTasksWaitingTermination+0x50>)
 800462a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <prvCheckTasksWaitingTermination+0x54>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3b01      	subs	r3, #1
 8004632:	4a09      	ldr	r2, [pc, #36]	; (8004658 <prvCheckTasksWaitingTermination+0x54>)
 8004634:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004636:	f000 fa37 	bl	8004aa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f80e 	bl	800465c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <prvCheckTasksWaitingTermination+0x54>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e1      	bne.n	800460c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	200003cc 	.word	0x200003cc
 8004654:	200003f8 	.word	0x200003f8
 8004658:	200003e0 	.word	0x200003e0

0800465c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800466a:	2b00      	cmp	r3, #0
 800466c:	d108      	bne.n	8004680 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fb88 	bl	8004d88 <vPortFree>
				vPortFree( pxTCB );
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fb85 	bl	8004d88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800467e:	e017      	b.n	80046b0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004686:	2b01      	cmp	r3, #1
 8004688:	d103      	bne.n	8004692 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fb7c 	bl	8004d88 <vPortFree>
	}
 8004690:	e00e      	b.n	80046b0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004698:	2b02      	cmp	r3, #2
 800469a:	d009      	beq.n	80046b0 <prvDeleteTCB+0x54>
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	e7fe      	b.n	80046ae <prvDeleteTCB+0x52>
	}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <prvResetNextTaskUnblockTime+0x38>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d104      	bne.n	80046d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046c8:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <prvResetNextTaskUnblockTime+0x3c>)
 80046ca:	f04f 32ff 	mov.w	r2, #4294967295
 80046ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046d0:	e008      	b.n	80046e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d2:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <prvResetNextTaskUnblockTime+0x38>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <prvResetNextTaskUnblockTime+0x3c>)
 80046e2:	6013      	str	r3, [r2, #0]
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	200003b0 	.word	0x200003b0
 80046f4:	20000418 	.word	0x20000418

080046f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046fe:	4b0b      	ldr	r3, [pc, #44]	; (800472c <xTaskGetSchedulerState+0x34>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004706:	2301      	movs	r3, #1
 8004708:	607b      	str	r3, [r7, #4]
 800470a:	e008      	b.n	800471e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800470c:	4b08      	ldr	r3, [pc, #32]	; (8004730 <xTaskGetSchedulerState+0x38>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004714:	2302      	movs	r3, #2
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	e001      	b.n	800471e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800471a:	2300      	movs	r3, #0
 800471c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800471e:	687b      	ldr	r3, [r7, #4]
	}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	20000404 	.word	0x20000404
 8004730:	20000420 	.word	0x20000420

08004734 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800473e:	4b29      	ldr	r3, [pc, #164]	; (80047e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004744:	4b28      	ldr	r3, [pc, #160]	; (80047e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3304      	adds	r3, #4
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fafb 	bl	8003d46 <uxListRemove>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004756:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	2201      	movs	r2, #1
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43da      	mvns	r2, r3
 8004764:	4b21      	ldr	r3, [pc, #132]	; (80047ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4013      	ands	r3, r2
 800476a:	4a20      	ldr	r2, [pc, #128]	; (80047ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800476c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d10a      	bne.n	800478c <prvAddCurrentTaskToDelayedList+0x58>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800477c:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	481a      	ldr	r0, [pc, #104]	; (80047f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004786:	f7ff fa81 	bl	8003c8c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800478a:	e026      	b.n	80047da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004794:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d209      	bcs.n	80047b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047a4:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	4610      	mov	r0, r2
 80047b2:	f7ff fa8f 	bl	8003cd4 <vListInsert>
}
 80047b6:	e010      	b.n	80047da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047b8:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4619      	mov	r1, r3
 80047c4:	4610      	mov	r0, r2
 80047c6:	f7ff fa85 	bl	8003cd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d202      	bcs.n	80047da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047d4:	4a09      	ldr	r2, [pc, #36]	; (80047fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6013      	str	r3, [r2, #0]
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	200003fc 	.word	0x200003fc
 80047e8:	200002f8 	.word	0x200002f8
 80047ec:	20000400 	.word	0x20000400
 80047f0:	200003e4 	.word	0x200003e4
 80047f4:	200003b4 	.word	0x200003b4
 80047f8:	200003b0 	.word	0x200003b0
 80047fc:	20000418 	.word	0x20000418

08004800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3b04      	subs	r3, #4
 8004810:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3b04      	subs	r3, #4
 800481e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f023 0201 	bic.w	r2, r3, #1
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3b04      	subs	r3, #4
 800482e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004830:	4a0c      	ldr	r2, [pc, #48]	; (8004864 <pxPortInitialiseStack+0x64>)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3b14      	subs	r3, #20
 800483a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3b04      	subs	r3, #4
 8004846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f06f 0202 	mvn.w	r2, #2
 800484e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3b20      	subs	r3, #32
 8004854:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004856:	68fb      	ldr	r3, [r7, #12]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	08004869 	.word	0x08004869

08004868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <prvTaskExitError+0x50>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d009      	beq.n	8004890 <prvTaskExitError+0x28>
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e7fe      	b.n	800488e <prvTaskExitError+0x26>
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048a2:	bf00      	nop
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0fc      	beq.n	80048a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	2000000c 	.word	0x2000000c
 80048bc:	00000000 	.word	0x00000000

080048c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <pxCurrentTCBConst2>)
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	6808      	ldr	r0, [r1, #0]
 80048c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ca:	f380 8809 	msr	PSP, r0
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f04f 0000 	mov.w	r0, #0
 80048d6:	f380 8811 	msr	BASEPRI, r0
 80048da:	4770      	bx	lr
 80048dc:	f3af 8000 	nop.w

080048e0 <pxCurrentTCBConst2>:
 80048e0:	200002f8 	.word	0x200002f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048e8:	4808      	ldr	r0, [pc, #32]	; (800490c <prvPortStartFirstTask+0x24>)
 80048ea:	6800      	ldr	r0, [r0, #0]
 80048ec:	6800      	ldr	r0, [r0, #0]
 80048ee:	f380 8808 	msr	MSP, r0
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8814 	msr	CONTROL, r0
 80048fa:	b662      	cpsie	i
 80048fc:	b661      	cpsie	f
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	df00      	svc	0
 8004908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800490a:	bf00      	nop
 800490c:	e000ed08 	.word	0xe000ed08

08004910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004916:	4b44      	ldr	r3, [pc, #272]	; (8004a28 <xPortStartScheduler+0x118>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a44      	ldr	r2, [pc, #272]	; (8004a2c <xPortStartScheduler+0x11c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d109      	bne.n	8004934 <xPortStartScheduler+0x24>
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	e7fe      	b.n	8004932 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004934:	4b3c      	ldr	r3, [pc, #240]	; (8004a28 <xPortStartScheduler+0x118>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a3d      	ldr	r2, [pc, #244]	; (8004a30 <xPortStartScheduler+0x120>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d109      	bne.n	8004952 <xPortStartScheduler+0x42>
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	e7fe      	b.n	8004950 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004952:	4b38      	ldr	r3, [pc, #224]	; (8004a34 <xPortStartScheduler+0x124>)
 8004954:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	22ff      	movs	r2, #255	; 0xff
 8004962:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004974:	b2da      	uxtb	r2, r3
 8004976:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <xPortStartScheduler+0x128>)
 8004978:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800497a:	4b30      	ldr	r3, [pc, #192]	; (8004a3c <xPortStartScheduler+0x12c>)
 800497c:	2207      	movs	r2, #7
 800497e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004980:	e009      	b.n	8004996 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004982:	4b2e      	ldr	r3, [pc, #184]	; (8004a3c <xPortStartScheduler+0x12c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3b01      	subs	r3, #1
 8004988:	4a2c      	ldr	r2, [pc, #176]	; (8004a3c <xPortStartScheduler+0x12c>)
 800498a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	b2db      	uxtb	r3, r3
 8004994:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b80      	cmp	r3, #128	; 0x80
 80049a0:	d0ef      	beq.n	8004982 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049a2:	4b26      	ldr	r3, [pc, #152]	; (8004a3c <xPortStartScheduler+0x12c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f1c3 0307 	rsb	r3, r3, #7
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d009      	beq.n	80049c2 <xPortStartScheduler+0xb2>
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	e7fe      	b.n	80049c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049c2:	4b1e      	ldr	r3, [pc, #120]	; (8004a3c <xPortStartScheduler+0x12c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <xPortStartScheduler+0x12c>)
 80049ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049cc:	4b1b      	ldr	r3, [pc, #108]	; (8004a3c <xPortStartScheduler+0x12c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <xPortStartScheduler+0x12c>)
 80049d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049e0:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <xPortStartScheduler+0x130>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <xPortStartScheduler+0x130>)
 80049e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <xPortStartScheduler+0x130>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <xPortStartScheduler+0x130>)
 80049f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049f8:	f000 f8d6 	bl	8004ba8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <xPortStartScheduler+0x134>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a02:	f000 f8f5 	bl	8004bf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <xPortStartScheduler+0x138>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a0f      	ldr	r2, [pc, #60]	; (8004a48 <xPortStartScheduler+0x138>)
 8004a0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a12:	f7ff ff69 	bl	80048e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a16:	f7ff fd43 	bl	80044a0 <vTaskSwitchContext>
	prvTaskExitError();
 8004a1a:	f7ff ff25 	bl	8004868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	e000ed00 	.word	0xe000ed00
 8004a2c:	410fc271 	.word	0x410fc271
 8004a30:	410fc270 	.word	0x410fc270
 8004a34:	e000e400 	.word	0xe000e400
 8004a38:	20000424 	.word	0x20000424
 8004a3c:	20000428 	.word	0x20000428
 8004a40:	e000ed20 	.word	0xe000ed20
 8004a44:	2000000c 	.word	0x2000000c
 8004a48:	e000ef34 	.word	0xe000ef34

08004a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a64:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <vPortEnterCritical+0x54>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	4a0d      	ldr	r2, [pc, #52]	; (8004aa0 <vPortEnterCritical+0x54>)
 8004a6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <vPortEnterCritical+0x54>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d10e      	bne.n	8004a94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <vPortEnterCritical+0x58>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <vPortEnterCritical+0x48>
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	603b      	str	r3, [r7, #0]
 8004a92:	e7fe      	b.n	8004a92 <vPortEnterCritical+0x46>
	}
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	2000000c 	.word	0x2000000c
 8004aa4:	e000ed04 	.word	0xe000ed04

08004aa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004aae:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <vPortExitCritical+0x4c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <vPortExitCritical+0x22>
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	e7fe      	b.n	8004ac8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <vPortExitCritical+0x4c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	4a08      	ldr	r2, [pc, #32]	; (8004af4 <vPortExitCritical+0x4c>)
 8004ad2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ad4:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <vPortExitCritical+0x4c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d104      	bne.n	8004ae6 <vPortExitCritical+0x3e>
 8004adc:	2300      	movs	r3, #0
 8004ade:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	2000000c 	.word	0x2000000c
	...

08004b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b00:	f3ef 8009 	mrs	r0, PSP
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <pxCurrentTCBConst>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	f01e 0f10 	tst.w	lr, #16
 8004b10:	bf08      	it	eq
 8004b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1a:	6010      	str	r0, [r2, #0]
 8004b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b24:	f380 8811 	msr	BASEPRI, r0
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f7ff fcb6 	bl	80044a0 <vTaskSwitchContext>
 8004b34:	f04f 0000 	mov.w	r0, #0
 8004b38:	f380 8811 	msr	BASEPRI, r0
 8004b3c:	bc09      	pop	{r0, r3}
 8004b3e:	6819      	ldr	r1, [r3, #0]
 8004b40:	6808      	ldr	r0, [r1, #0]
 8004b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b46:	f01e 0f10 	tst.w	lr, #16
 8004b4a:	bf08      	it	eq
 8004b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b50:	f380 8809 	msr	PSP, r0
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	f3af 8000 	nop.w

08004b60 <pxCurrentTCBConst>:
 8004b60:	200002f8 	.word	0x200002f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop

08004b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b80:	f7ff fbd6 	bl	8004330 <xTaskIncrementTick>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <xPortSysTickHandler+0x3c>)
 8004b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	2300      	movs	r3, #0
 8004b94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b9c:	bf00      	nop
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	e000ed04 	.word	0xe000ed04

08004ba8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <vPortSetupTimerInterrupt+0x34>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <vPortSetupTimerInterrupt+0x38>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <vPortSetupTimerInterrupt+0x3c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <vPortSetupTimerInterrupt+0x40>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	099b      	lsrs	r3, r3, #6
 8004bc4:	4a09      	ldr	r2, [pc, #36]	; (8004bec <vPortSetupTimerInterrupt+0x44>)
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bca:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <vPortSetupTimerInterrupt+0x34>)
 8004bcc:	2207      	movs	r2, #7
 8004bce:	601a      	str	r2, [r3, #0]
}
 8004bd0:	bf00      	nop
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	e000e010 	.word	0xe000e010
 8004be0:	e000e018 	.word	0xe000e018
 8004be4:	20000000 	.word	0x20000000
 8004be8:	10624dd3 	.word	0x10624dd3
 8004bec:	e000e014 	.word	0xe000e014

08004bf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004bf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c00 <vPortEnableVFP+0x10>
 8004bf4:	6801      	ldr	r1, [r0, #0]
 8004bf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bfa:	6001      	str	r1, [r0, #0]
 8004bfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bfe:	bf00      	nop
 8004c00:	e000ed88 	.word	0xe000ed88

08004c04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	; 0x28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c10:	f7ff fae4 	bl	80041dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c14:	4b57      	ldr	r3, [pc, #348]	; (8004d74 <pvPortMalloc+0x170>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c1c:	f000 f90c 	bl	8004e38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c20:	4b55      	ldr	r3, [pc, #340]	; (8004d78 <pvPortMalloc+0x174>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f040 808c 	bne.w	8004d46 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01c      	beq.n	8004c6e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004c34:	2208      	movs	r2, #8
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4413      	add	r3, r2
 8004c3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d013      	beq.n	8004c6e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f023 0307 	bic.w	r3, r3, #7
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <pvPortMalloc+0x6a>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e7fe      	b.n	8004c6c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d068      	beq.n	8004d46 <pvPortMalloc+0x142>
 8004c74:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <pvPortMalloc+0x178>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d863      	bhi.n	8004d46 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c7e:	4b40      	ldr	r3, [pc, #256]	; (8004d80 <pvPortMalloc+0x17c>)
 8004c80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c82:	4b3f      	ldr	r3, [pc, #252]	; (8004d80 <pvPortMalloc+0x17c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c88:	e004      	b.n	8004c94 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d903      	bls.n	8004ca6 <pvPortMalloc+0xa2>
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f1      	bne.n	8004c8a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ca6:	4b33      	ldr	r3, [pc, #204]	; (8004d74 <pvPortMalloc+0x170>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d04a      	beq.n	8004d46 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	4413      	add	r3, r2
 8004cb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	1ad2      	subs	r2, r2, r3
 8004cca:	2308      	movs	r3, #8
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d91e      	bls.n	8004d10 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <pvPortMalloc+0xf4>
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	e7fe      	b.n	8004cf6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	1ad2      	subs	r2, r2, r3
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d0a:	69b8      	ldr	r0, [r7, #24]
 8004d0c:	f000 f8f6 	bl	8004efc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <pvPortMalloc+0x178>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	4a18      	ldr	r2, [pc, #96]	; (8004d7c <pvPortMalloc+0x178>)
 8004d1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d1e:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <pvPortMalloc+0x178>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <pvPortMalloc+0x180>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d203      	bcs.n	8004d32 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d2a:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <pvPortMalloc+0x178>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <pvPortMalloc+0x180>)
 8004d30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <pvPortMalloc+0x174>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d46:	f7ff fa57 	bl	80041f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <pvPortMalloc+0x164>
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e7fe      	b.n	8004d66 <pvPortMalloc+0x162>
	return pvReturn;
 8004d68:	69fb      	ldr	r3, [r7, #28]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3728      	adds	r7, #40	; 0x28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20004034 	.word	0x20004034
 8004d78:	20004040 	.word	0x20004040
 8004d7c:	20004038 	.word	0x20004038
 8004d80:	2000402c 	.word	0x2000402c
 8004d84:	2000403c 	.word	0x2000403c

08004d88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d046      	beq.n	8004e28 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	425b      	negs	r3, r3
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4413      	add	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <vPortFree+0xa8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <vPortFree+0x42>
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e7fe      	b.n	8004dc8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <vPortFree+0x5e>
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	60bb      	str	r3, [r7, #8]
 8004de4:	e7fe      	b.n	8004de4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <vPortFree+0xa8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d019      	beq.n	8004e28 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d115      	bne.n	8004e28 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <vPortFree+0xa8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	401a      	ands	r2, r3
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e0c:	f7ff f9e6 	bl	80041dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <vPortFree+0xac>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4413      	add	r3, r2
 8004e1a:	4a06      	ldr	r2, [pc, #24]	; (8004e34 <vPortFree+0xac>)
 8004e1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e1e:	6938      	ldr	r0, [r7, #16]
 8004e20:	f000 f86c 	bl	8004efc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e24:	f7ff f9e8 	bl	80041f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e28:	bf00      	nop
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20004040 	.word	0x20004040
 8004e34:	20004038 	.word	0x20004038

08004e38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e44:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <prvHeapInit+0xac>)
 8004e46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00c      	beq.n	8004e6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3307      	adds	r3, #7
 8004e56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0307 	bic.w	r3, r3, #7
 8004e5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <prvHeapInit+0xac>)
 8004e68:	4413      	add	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e70:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <prvHeapInit+0xb0>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e76:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <prvHeapInit+0xb0>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	4413      	add	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e84:	2208      	movs	r2, #8
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0307 	bic.w	r3, r3, #7
 8004e92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4a15      	ldr	r2, [pc, #84]	; (8004eec <prvHeapInit+0xb4>)
 8004e98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e9a:	4b14      	ldr	r3, [pc, #80]	; (8004eec <prvHeapInit+0xb4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ea2:	4b12      	ldr	r3, [pc, #72]	; (8004eec <prvHeapInit+0xb4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	1ad2      	subs	r2, r2, r3
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <prvHeapInit+0xb4>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4a0a      	ldr	r2, [pc, #40]	; (8004ef0 <prvHeapInit+0xb8>)
 8004ec6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4a09      	ldr	r2, [pc, #36]	; (8004ef4 <prvHeapInit+0xbc>)
 8004ece:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ed0:	4b09      	ldr	r3, [pc, #36]	; (8004ef8 <prvHeapInit+0xc0>)
 8004ed2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ed6:	601a      	str	r2, [r3, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	2000042c 	.word	0x2000042c
 8004ee8:	2000402c 	.word	0x2000402c
 8004eec:	20004034 	.word	0x20004034
 8004ef0:	2000403c 	.word	0x2000403c
 8004ef4:	20004038 	.word	0x20004038
 8004ef8:	20004040 	.word	0x20004040

08004efc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f04:	4b28      	ldr	r3, [pc, #160]	; (8004fa8 <prvInsertBlockIntoFreeList+0xac>)
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	e002      	b.n	8004f10 <prvInsertBlockIntoFreeList+0x14>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d8f7      	bhi.n	8004f0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	4413      	add	r3, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d108      	bne.n	8004f3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	441a      	add	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	441a      	add	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d118      	bne.n	8004f84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b15      	ldr	r3, [pc, #84]	; (8004fac <prvInsertBlockIntoFreeList+0xb0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d00d      	beq.n	8004f7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	441a      	add	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	e008      	b.n	8004f8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <prvInsertBlockIntoFreeList+0xb0>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e003      	b.n	8004f8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d002      	beq.n	8004f9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	2000402c 	.word	0x2000402c
 8004fac:	20004034 	.word	0x20004034

08004fb0 <__errno>:
 8004fb0:	4b01      	ldr	r3, [pc, #4]	; (8004fb8 <__errno+0x8>)
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	20000010 	.word	0x20000010

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	4e0d      	ldr	r6, [pc, #52]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc0:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc2:	1ba4      	subs	r4, r4, r6
 8004fc4:	10a4      	asrs	r4, r4, #2
 8004fc6:	2500      	movs	r5, #0
 8004fc8:	42a5      	cmp	r5, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	4e0b      	ldr	r6, [pc, #44]	; (8004ffc <__libc_init_array+0x40>)
 8004fce:	4c0c      	ldr	r4, [pc, #48]	; (8005000 <__libc_init_array+0x44>)
 8004fd0:	f000 fc28 	bl	8005824 <_init>
 8004fd4:	1ba4      	subs	r4, r4, r6
 8004fd6:	10a4      	asrs	r4, r4, #2
 8004fd8:	2500      	movs	r5, #0
 8004fda:	42a5      	cmp	r5, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fe4:	4798      	blx	r3
 8004fe6:	3501      	adds	r5, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fee:	4798      	blx	r3
 8004ff0:	3501      	adds	r5, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	080058cc 	.word	0x080058cc
 8004ff8:	080058cc 	.word	0x080058cc
 8004ffc:	080058cc 	.word	0x080058cc
 8005000:	080058d0 	.word	0x080058d0

08005004 <memcpy>:
 8005004:	b510      	push	{r4, lr}
 8005006:	1e43      	subs	r3, r0, #1
 8005008:	440a      	add	r2, r1
 800500a:	4291      	cmp	r1, r2
 800500c:	d100      	bne.n	8005010 <memcpy+0xc>
 800500e:	bd10      	pop	{r4, pc}
 8005010:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005014:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005018:	e7f7      	b.n	800500a <memcpy+0x6>

0800501a <memset>:
 800501a:	4402      	add	r2, r0
 800501c:	4603      	mov	r3, r0
 800501e:	4293      	cmp	r3, r2
 8005020:	d100      	bne.n	8005024 <memset+0xa>
 8005022:	4770      	bx	lr
 8005024:	f803 1b01 	strb.w	r1, [r3], #1
 8005028:	e7f9      	b.n	800501e <memset+0x4>
	...

0800502c <siprintf>:
 800502c:	b40e      	push	{r1, r2, r3}
 800502e:	b500      	push	{lr}
 8005030:	b09c      	sub	sp, #112	; 0x70
 8005032:	ab1d      	add	r3, sp, #116	; 0x74
 8005034:	9002      	str	r0, [sp, #8]
 8005036:	9006      	str	r0, [sp, #24]
 8005038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800503c:	4809      	ldr	r0, [pc, #36]	; (8005064 <siprintf+0x38>)
 800503e:	9107      	str	r1, [sp, #28]
 8005040:	9104      	str	r1, [sp, #16]
 8005042:	4909      	ldr	r1, [pc, #36]	; (8005068 <siprintf+0x3c>)
 8005044:	f853 2b04 	ldr.w	r2, [r3], #4
 8005048:	9105      	str	r1, [sp, #20]
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	a902      	add	r1, sp, #8
 8005050:	f000 f866 	bl	8005120 <_svfiprintf_r>
 8005054:	9b02      	ldr	r3, [sp, #8]
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	b01c      	add	sp, #112	; 0x70
 800505c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005060:	b003      	add	sp, #12
 8005062:	4770      	bx	lr
 8005064:	20000010 	.word	0x20000010
 8005068:	ffff0208 	.word	0xffff0208

0800506c <__ssputs_r>:
 800506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	688e      	ldr	r6, [r1, #8]
 8005072:	429e      	cmp	r6, r3
 8005074:	4682      	mov	sl, r0
 8005076:	460c      	mov	r4, r1
 8005078:	4690      	mov	r8, r2
 800507a:	4699      	mov	r9, r3
 800507c:	d837      	bhi.n	80050ee <__ssputs_r+0x82>
 800507e:	898a      	ldrh	r2, [r1, #12]
 8005080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005084:	d031      	beq.n	80050ea <__ssputs_r+0x7e>
 8005086:	6825      	ldr	r5, [r4, #0]
 8005088:	6909      	ldr	r1, [r1, #16]
 800508a:	1a6f      	subs	r7, r5, r1
 800508c:	6965      	ldr	r5, [r4, #20]
 800508e:	2302      	movs	r3, #2
 8005090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005094:	fb95 f5f3 	sdiv	r5, r5, r3
 8005098:	f109 0301 	add.w	r3, r9, #1
 800509c:	443b      	add	r3, r7
 800509e:	429d      	cmp	r5, r3
 80050a0:	bf38      	it	cc
 80050a2:	461d      	movcc	r5, r3
 80050a4:	0553      	lsls	r3, r2, #21
 80050a6:	d530      	bpl.n	800510a <__ssputs_r+0x9e>
 80050a8:	4629      	mov	r1, r5
 80050aa:	f000 fb21 	bl	80056f0 <_malloc_r>
 80050ae:	4606      	mov	r6, r0
 80050b0:	b950      	cbnz	r0, 80050c8 <__ssputs_r+0x5c>
 80050b2:	230c      	movs	r3, #12
 80050b4:	f8ca 3000 	str.w	r3, [sl]
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c8:	463a      	mov	r2, r7
 80050ca:	6921      	ldr	r1, [r4, #16]
 80050cc:	f7ff ff9a 	bl	8005004 <memcpy>
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050da:	81a3      	strh	r3, [r4, #12]
 80050dc:	6126      	str	r6, [r4, #16]
 80050de:	6165      	str	r5, [r4, #20]
 80050e0:	443e      	add	r6, r7
 80050e2:	1bed      	subs	r5, r5, r7
 80050e4:	6026      	str	r6, [r4, #0]
 80050e6:	60a5      	str	r5, [r4, #8]
 80050e8:	464e      	mov	r6, r9
 80050ea:	454e      	cmp	r6, r9
 80050ec:	d900      	bls.n	80050f0 <__ssputs_r+0x84>
 80050ee:	464e      	mov	r6, r9
 80050f0:	4632      	mov	r2, r6
 80050f2:	4641      	mov	r1, r8
 80050f4:	6820      	ldr	r0, [r4, #0]
 80050f6:	f000 fa93 	bl	8005620 <memmove>
 80050fa:	68a3      	ldr	r3, [r4, #8]
 80050fc:	1b9b      	subs	r3, r3, r6
 80050fe:	60a3      	str	r3, [r4, #8]
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	441e      	add	r6, r3
 8005104:	6026      	str	r6, [r4, #0]
 8005106:	2000      	movs	r0, #0
 8005108:	e7dc      	b.n	80050c4 <__ssputs_r+0x58>
 800510a:	462a      	mov	r2, r5
 800510c:	f000 fb4a 	bl	80057a4 <_realloc_r>
 8005110:	4606      	mov	r6, r0
 8005112:	2800      	cmp	r0, #0
 8005114:	d1e2      	bne.n	80050dc <__ssputs_r+0x70>
 8005116:	6921      	ldr	r1, [r4, #16]
 8005118:	4650      	mov	r0, sl
 800511a:	f000 fa9b 	bl	8005654 <_free_r>
 800511e:	e7c8      	b.n	80050b2 <__ssputs_r+0x46>

08005120 <_svfiprintf_r>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	461d      	mov	r5, r3
 8005126:	898b      	ldrh	r3, [r1, #12]
 8005128:	061f      	lsls	r7, r3, #24
 800512a:	b09d      	sub	sp, #116	; 0x74
 800512c:	4680      	mov	r8, r0
 800512e:	460c      	mov	r4, r1
 8005130:	4616      	mov	r6, r2
 8005132:	d50f      	bpl.n	8005154 <_svfiprintf_r+0x34>
 8005134:	690b      	ldr	r3, [r1, #16]
 8005136:	b96b      	cbnz	r3, 8005154 <_svfiprintf_r+0x34>
 8005138:	2140      	movs	r1, #64	; 0x40
 800513a:	f000 fad9 	bl	80056f0 <_malloc_r>
 800513e:	6020      	str	r0, [r4, #0]
 8005140:	6120      	str	r0, [r4, #16]
 8005142:	b928      	cbnz	r0, 8005150 <_svfiprintf_r+0x30>
 8005144:	230c      	movs	r3, #12
 8005146:	f8c8 3000 	str.w	r3, [r8]
 800514a:	f04f 30ff 	mov.w	r0, #4294967295
 800514e:	e0c8      	b.n	80052e2 <_svfiprintf_r+0x1c2>
 8005150:	2340      	movs	r3, #64	; 0x40
 8005152:	6163      	str	r3, [r4, #20]
 8005154:	2300      	movs	r3, #0
 8005156:	9309      	str	r3, [sp, #36]	; 0x24
 8005158:	2320      	movs	r3, #32
 800515a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800515e:	2330      	movs	r3, #48	; 0x30
 8005160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005164:	9503      	str	r5, [sp, #12]
 8005166:	f04f 0b01 	mov.w	fp, #1
 800516a:	4637      	mov	r7, r6
 800516c:	463d      	mov	r5, r7
 800516e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005172:	b10b      	cbz	r3, 8005178 <_svfiprintf_r+0x58>
 8005174:	2b25      	cmp	r3, #37	; 0x25
 8005176:	d13e      	bne.n	80051f6 <_svfiprintf_r+0xd6>
 8005178:	ebb7 0a06 	subs.w	sl, r7, r6
 800517c:	d00b      	beq.n	8005196 <_svfiprintf_r+0x76>
 800517e:	4653      	mov	r3, sl
 8005180:	4632      	mov	r2, r6
 8005182:	4621      	mov	r1, r4
 8005184:	4640      	mov	r0, r8
 8005186:	f7ff ff71 	bl	800506c <__ssputs_r>
 800518a:	3001      	adds	r0, #1
 800518c:	f000 80a4 	beq.w	80052d8 <_svfiprintf_r+0x1b8>
 8005190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005192:	4453      	add	r3, sl
 8005194:	9309      	str	r3, [sp, #36]	; 0x24
 8005196:	783b      	ldrb	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 809d 	beq.w	80052d8 <_svfiprintf_r+0x1b8>
 800519e:	2300      	movs	r3, #0
 80051a0:	f04f 32ff 	mov.w	r2, #4294967295
 80051a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051a8:	9304      	str	r3, [sp, #16]
 80051aa:	9307      	str	r3, [sp, #28]
 80051ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051b0:	931a      	str	r3, [sp, #104]	; 0x68
 80051b2:	462f      	mov	r7, r5
 80051b4:	2205      	movs	r2, #5
 80051b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80051ba:	4850      	ldr	r0, [pc, #320]	; (80052fc <_svfiprintf_r+0x1dc>)
 80051bc:	f7fb f830 	bl	8000220 <memchr>
 80051c0:	9b04      	ldr	r3, [sp, #16]
 80051c2:	b9d0      	cbnz	r0, 80051fa <_svfiprintf_r+0xda>
 80051c4:	06d9      	lsls	r1, r3, #27
 80051c6:	bf44      	itt	mi
 80051c8:	2220      	movmi	r2, #32
 80051ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051ce:	071a      	lsls	r2, r3, #28
 80051d0:	bf44      	itt	mi
 80051d2:	222b      	movmi	r2, #43	; 0x2b
 80051d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051d8:	782a      	ldrb	r2, [r5, #0]
 80051da:	2a2a      	cmp	r2, #42	; 0x2a
 80051dc:	d015      	beq.n	800520a <_svfiprintf_r+0xea>
 80051de:	9a07      	ldr	r2, [sp, #28]
 80051e0:	462f      	mov	r7, r5
 80051e2:	2000      	movs	r0, #0
 80051e4:	250a      	movs	r5, #10
 80051e6:	4639      	mov	r1, r7
 80051e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051ec:	3b30      	subs	r3, #48	; 0x30
 80051ee:	2b09      	cmp	r3, #9
 80051f0:	d94d      	bls.n	800528e <_svfiprintf_r+0x16e>
 80051f2:	b1b8      	cbz	r0, 8005224 <_svfiprintf_r+0x104>
 80051f4:	e00f      	b.n	8005216 <_svfiprintf_r+0xf6>
 80051f6:	462f      	mov	r7, r5
 80051f8:	e7b8      	b.n	800516c <_svfiprintf_r+0x4c>
 80051fa:	4a40      	ldr	r2, [pc, #256]	; (80052fc <_svfiprintf_r+0x1dc>)
 80051fc:	1a80      	subs	r0, r0, r2
 80051fe:	fa0b f000 	lsl.w	r0, fp, r0
 8005202:	4318      	orrs	r0, r3
 8005204:	9004      	str	r0, [sp, #16]
 8005206:	463d      	mov	r5, r7
 8005208:	e7d3      	b.n	80051b2 <_svfiprintf_r+0x92>
 800520a:	9a03      	ldr	r2, [sp, #12]
 800520c:	1d11      	adds	r1, r2, #4
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	9103      	str	r1, [sp, #12]
 8005212:	2a00      	cmp	r2, #0
 8005214:	db01      	blt.n	800521a <_svfiprintf_r+0xfa>
 8005216:	9207      	str	r2, [sp, #28]
 8005218:	e004      	b.n	8005224 <_svfiprintf_r+0x104>
 800521a:	4252      	negs	r2, r2
 800521c:	f043 0302 	orr.w	r3, r3, #2
 8005220:	9207      	str	r2, [sp, #28]
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	783b      	ldrb	r3, [r7, #0]
 8005226:	2b2e      	cmp	r3, #46	; 0x2e
 8005228:	d10c      	bne.n	8005244 <_svfiprintf_r+0x124>
 800522a:	787b      	ldrb	r3, [r7, #1]
 800522c:	2b2a      	cmp	r3, #42	; 0x2a
 800522e:	d133      	bne.n	8005298 <_svfiprintf_r+0x178>
 8005230:	9b03      	ldr	r3, [sp, #12]
 8005232:	1d1a      	adds	r2, r3, #4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	9203      	str	r2, [sp, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	bfb8      	it	lt
 800523c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005240:	3702      	adds	r7, #2
 8005242:	9305      	str	r3, [sp, #20]
 8005244:	4d2e      	ldr	r5, [pc, #184]	; (8005300 <_svfiprintf_r+0x1e0>)
 8005246:	7839      	ldrb	r1, [r7, #0]
 8005248:	2203      	movs	r2, #3
 800524a:	4628      	mov	r0, r5
 800524c:	f7fa ffe8 	bl	8000220 <memchr>
 8005250:	b138      	cbz	r0, 8005262 <_svfiprintf_r+0x142>
 8005252:	2340      	movs	r3, #64	; 0x40
 8005254:	1b40      	subs	r0, r0, r5
 8005256:	fa03 f000 	lsl.w	r0, r3, r0
 800525a:	9b04      	ldr	r3, [sp, #16]
 800525c:	4303      	orrs	r3, r0
 800525e:	3701      	adds	r7, #1
 8005260:	9304      	str	r3, [sp, #16]
 8005262:	7839      	ldrb	r1, [r7, #0]
 8005264:	4827      	ldr	r0, [pc, #156]	; (8005304 <_svfiprintf_r+0x1e4>)
 8005266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800526a:	2206      	movs	r2, #6
 800526c:	1c7e      	adds	r6, r7, #1
 800526e:	f7fa ffd7 	bl	8000220 <memchr>
 8005272:	2800      	cmp	r0, #0
 8005274:	d038      	beq.n	80052e8 <_svfiprintf_r+0x1c8>
 8005276:	4b24      	ldr	r3, [pc, #144]	; (8005308 <_svfiprintf_r+0x1e8>)
 8005278:	bb13      	cbnz	r3, 80052c0 <_svfiprintf_r+0x1a0>
 800527a:	9b03      	ldr	r3, [sp, #12]
 800527c:	3307      	adds	r3, #7
 800527e:	f023 0307 	bic.w	r3, r3, #7
 8005282:	3308      	adds	r3, #8
 8005284:	9303      	str	r3, [sp, #12]
 8005286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005288:	444b      	add	r3, r9
 800528a:	9309      	str	r3, [sp, #36]	; 0x24
 800528c:	e76d      	b.n	800516a <_svfiprintf_r+0x4a>
 800528e:	fb05 3202 	mla	r2, r5, r2, r3
 8005292:	2001      	movs	r0, #1
 8005294:	460f      	mov	r7, r1
 8005296:	e7a6      	b.n	80051e6 <_svfiprintf_r+0xc6>
 8005298:	2300      	movs	r3, #0
 800529a:	3701      	adds	r7, #1
 800529c:	9305      	str	r3, [sp, #20]
 800529e:	4619      	mov	r1, r3
 80052a0:	250a      	movs	r5, #10
 80052a2:	4638      	mov	r0, r7
 80052a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052a8:	3a30      	subs	r2, #48	; 0x30
 80052aa:	2a09      	cmp	r2, #9
 80052ac:	d903      	bls.n	80052b6 <_svfiprintf_r+0x196>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0c8      	beq.n	8005244 <_svfiprintf_r+0x124>
 80052b2:	9105      	str	r1, [sp, #20]
 80052b4:	e7c6      	b.n	8005244 <_svfiprintf_r+0x124>
 80052b6:	fb05 2101 	mla	r1, r5, r1, r2
 80052ba:	2301      	movs	r3, #1
 80052bc:	4607      	mov	r7, r0
 80052be:	e7f0      	b.n	80052a2 <_svfiprintf_r+0x182>
 80052c0:	ab03      	add	r3, sp, #12
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	4622      	mov	r2, r4
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <_svfiprintf_r+0x1ec>)
 80052c8:	a904      	add	r1, sp, #16
 80052ca:	4640      	mov	r0, r8
 80052cc:	f3af 8000 	nop.w
 80052d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80052d4:	4681      	mov	r9, r0
 80052d6:	d1d6      	bne.n	8005286 <_svfiprintf_r+0x166>
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	065b      	lsls	r3, r3, #25
 80052dc:	f53f af35 	bmi.w	800514a <_svfiprintf_r+0x2a>
 80052e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052e2:	b01d      	add	sp, #116	; 0x74
 80052e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e8:	ab03      	add	r3, sp, #12
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	4622      	mov	r2, r4
 80052ee:	4b07      	ldr	r3, [pc, #28]	; (800530c <_svfiprintf_r+0x1ec>)
 80052f0:	a904      	add	r1, sp, #16
 80052f2:	4640      	mov	r0, r8
 80052f4:	f000 f882 	bl	80053fc <_printf_i>
 80052f8:	e7ea      	b.n	80052d0 <_svfiprintf_r+0x1b0>
 80052fa:	bf00      	nop
 80052fc:	08005890 	.word	0x08005890
 8005300:	08005896 	.word	0x08005896
 8005304:	0800589a 	.word	0x0800589a
 8005308:	00000000 	.word	0x00000000
 800530c:	0800506d 	.word	0x0800506d

08005310 <_printf_common>:
 8005310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005314:	4691      	mov	r9, r2
 8005316:	461f      	mov	r7, r3
 8005318:	688a      	ldr	r2, [r1, #8]
 800531a:	690b      	ldr	r3, [r1, #16]
 800531c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005320:	4293      	cmp	r3, r2
 8005322:	bfb8      	it	lt
 8005324:	4613      	movlt	r3, r2
 8005326:	f8c9 3000 	str.w	r3, [r9]
 800532a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800532e:	4606      	mov	r6, r0
 8005330:	460c      	mov	r4, r1
 8005332:	b112      	cbz	r2, 800533a <_printf_common+0x2a>
 8005334:	3301      	adds	r3, #1
 8005336:	f8c9 3000 	str.w	r3, [r9]
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	0699      	lsls	r1, r3, #26
 800533e:	bf42      	ittt	mi
 8005340:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005344:	3302      	addmi	r3, #2
 8005346:	f8c9 3000 	strmi.w	r3, [r9]
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	f015 0506 	ands.w	r5, r5, #6
 8005350:	d107      	bne.n	8005362 <_printf_common+0x52>
 8005352:	f104 0a19 	add.w	sl, r4, #25
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	f8d9 2000 	ldr.w	r2, [r9]
 800535c:	1a9b      	subs	r3, r3, r2
 800535e:	42ab      	cmp	r3, r5
 8005360:	dc28      	bgt.n	80053b4 <_printf_common+0xa4>
 8005362:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	3300      	adds	r3, #0
 800536a:	bf18      	it	ne
 800536c:	2301      	movne	r3, #1
 800536e:	0692      	lsls	r2, r2, #26
 8005370:	d42d      	bmi.n	80053ce <_printf_common+0xbe>
 8005372:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005376:	4639      	mov	r1, r7
 8005378:	4630      	mov	r0, r6
 800537a:	47c0      	blx	r8
 800537c:	3001      	adds	r0, #1
 800537e:	d020      	beq.n	80053c2 <_printf_common+0xb2>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	68e5      	ldr	r5, [r4, #12]
 8005384:	f8d9 2000 	ldr.w	r2, [r9]
 8005388:	f003 0306 	and.w	r3, r3, #6
 800538c:	2b04      	cmp	r3, #4
 800538e:	bf08      	it	eq
 8005390:	1aad      	subeq	r5, r5, r2
 8005392:	68a3      	ldr	r3, [r4, #8]
 8005394:	6922      	ldr	r2, [r4, #16]
 8005396:	bf0c      	ite	eq
 8005398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800539c:	2500      	movne	r5, #0
 800539e:	4293      	cmp	r3, r2
 80053a0:	bfc4      	itt	gt
 80053a2:	1a9b      	subgt	r3, r3, r2
 80053a4:	18ed      	addgt	r5, r5, r3
 80053a6:	f04f 0900 	mov.w	r9, #0
 80053aa:	341a      	adds	r4, #26
 80053ac:	454d      	cmp	r5, r9
 80053ae:	d11a      	bne.n	80053e6 <_printf_common+0xd6>
 80053b0:	2000      	movs	r0, #0
 80053b2:	e008      	b.n	80053c6 <_printf_common+0xb6>
 80053b4:	2301      	movs	r3, #1
 80053b6:	4652      	mov	r2, sl
 80053b8:	4639      	mov	r1, r7
 80053ba:	4630      	mov	r0, r6
 80053bc:	47c0      	blx	r8
 80053be:	3001      	adds	r0, #1
 80053c0:	d103      	bne.n	80053ca <_printf_common+0xba>
 80053c2:	f04f 30ff 	mov.w	r0, #4294967295
 80053c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ca:	3501      	adds	r5, #1
 80053cc:	e7c3      	b.n	8005356 <_printf_common+0x46>
 80053ce:	18e1      	adds	r1, r4, r3
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	2030      	movs	r0, #48	; 0x30
 80053d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053d8:	4422      	add	r2, r4
 80053da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053e2:	3302      	adds	r3, #2
 80053e4:	e7c5      	b.n	8005372 <_printf_common+0x62>
 80053e6:	2301      	movs	r3, #1
 80053e8:	4622      	mov	r2, r4
 80053ea:	4639      	mov	r1, r7
 80053ec:	4630      	mov	r0, r6
 80053ee:	47c0      	blx	r8
 80053f0:	3001      	adds	r0, #1
 80053f2:	d0e6      	beq.n	80053c2 <_printf_common+0xb2>
 80053f4:	f109 0901 	add.w	r9, r9, #1
 80053f8:	e7d8      	b.n	80053ac <_printf_common+0x9c>
	...

080053fc <_printf_i>:
 80053fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005400:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005404:	460c      	mov	r4, r1
 8005406:	7e09      	ldrb	r1, [r1, #24]
 8005408:	b085      	sub	sp, #20
 800540a:	296e      	cmp	r1, #110	; 0x6e
 800540c:	4617      	mov	r7, r2
 800540e:	4606      	mov	r6, r0
 8005410:	4698      	mov	r8, r3
 8005412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005414:	f000 80b3 	beq.w	800557e <_printf_i+0x182>
 8005418:	d822      	bhi.n	8005460 <_printf_i+0x64>
 800541a:	2963      	cmp	r1, #99	; 0x63
 800541c:	d036      	beq.n	800548c <_printf_i+0x90>
 800541e:	d80a      	bhi.n	8005436 <_printf_i+0x3a>
 8005420:	2900      	cmp	r1, #0
 8005422:	f000 80b9 	beq.w	8005598 <_printf_i+0x19c>
 8005426:	2958      	cmp	r1, #88	; 0x58
 8005428:	f000 8083 	beq.w	8005532 <_printf_i+0x136>
 800542c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005430:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005434:	e032      	b.n	800549c <_printf_i+0xa0>
 8005436:	2964      	cmp	r1, #100	; 0x64
 8005438:	d001      	beq.n	800543e <_printf_i+0x42>
 800543a:	2969      	cmp	r1, #105	; 0x69
 800543c:	d1f6      	bne.n	800542c <_printf_i+0x30>
 800543e:	6820      	ldr	r0, [r4, #0]
 8005440:	6813      	ldr	r3, [r2, #0]
 8005442:	0605      	lsls	r5, r0, #24
 8005444:	f103 0104 	add.w	r1, r3, #4
 8005448:	d52a      	bpl.n	80054a0 <_printf_i+0xa4>
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6011      	str	r1, [r2, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	da03      	bge.n	800545a <_printf_i+0x5e>
 8005452:	222d      	movs	r2, #45	; 0x2d
 8005454:	425b      	negs	r3, r3
 8005456:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800545a:	486f      	ldr	r0, [pc, #444]	; (8005618 <_printf_i+0x21c>)
 800545c:	220a      	movs	r2, #10
 800545e:	e039      	b.n	80054d4 <_printf_i+0xd8>
 8005460:	2973      	cmp	r1, #115	; 0x73
 8005462:	f000 809d 	beq.w	80055a0 <_printf_i+0x1a4>
 8005466:	d808      	bhi.n	800547a <_printf_i+0x7e>
 8005468:	296f      	cmp	r1, #111	; 0x6f
 800546a:	d020      	beq.n	80054ae <_printf_i+0xb2>
 800546c:	2970      	cmp	r1, #112	; 0x70
 800546e:	d1dd      	bne.n	800542c <_printf_i+0x30>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	f043 0320 	orr.w	r3, r3, #32
 8005476:	6023      	str	r3, [r4, #0]
 8005478:	e003      	b.n	8005482 <_printf_i+0x86>
 800547a:	2975      	cmp	r1, #117	; 0x75
 800547c:	d017      	beq.n	80054ae <_printf_i+0xb2>
 800547e:	2978      	cmp	r1, #120	; 0x78
 8005480:	d1d4      	bne.n	800542c <_printf_i+0x30>
 8005482:	2378      	movs	r3, #120	; 0x78
 8005484:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005488:	4864      	ldr	r0, [pc, #400]	; (800561c <_printf_i+0x220>)
 800548a:	e055      	b.n	8005538 <_printf_i+0x13c>
 800548c:	6813      	ldr	r3, [r2, #0]
 800548e:	1d19      	adds	r1, r3, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6011      	str	r1, [r2, #0]
 8005494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800549c:	2301      	movs	r3, #1
 800549e:	e08c      	b.n	80055ba <_printf_i+0x1be>
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6011      	str	r1, [r2, #0]
 80054a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054a8:	bf18      	it	ne
 80054aa:	b21b      	sxthne	r3, r3
 80054ac:	e7cf      	b.n	800544e <_printf_i+0x52>
 80054ae:	6813      	ldr	r3, [r2, #0]
 80054b0:	6825      	ldr	r5, [r4, #0]
 80054b2:	1d18      	adds	r0, r3, #4
 80054b4:	6010      	str	r0, [r2, #0]
 80054b6:	0628      	lsls	r0, r5, #24
 80054b8:	d501      	bpl.n	80054be <_printf_i+0xc2>
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	e002      	b.n	80054c4 <_printf_i+0xc8>
 80054be:	0668      	lsls	r0, r5, #25
 80054c0:	d5fb      	bpl.n	80054ba <_printf_i+0xbe>
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	4854      	ldr	r0, [pc, #336]	; (8005618 <_printf_i+0x21c>)
 80054c6:	296f      	cmp	r1, #111	; 0x6f
 80054c8:	bf14      	ite	ne
 80054ca:	220a      	movne	r2, #10
 80054cc:	2208      	moveq	r2, #8
 80054ce:	2100      	movs	r1, #0
 80054d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054d4:	6865      	ldr	r5, [r4, #4]
 80054d6:	60a5      	str	r5, [r4, #8]
 80054d8:	2d00      	cmp	r5, #0
 80054da:	f2c0 8095 	blt.w	8005608 <_printf_i+0x20c>
 80054de:	6821      	ldr	r1, [r4, #0]
 80054e0:	f021 0104 	bic.w	r1, r1, #4
 80054e4:	6021      	str	r1, [r4, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d13d      	bne.n	8005566 <_printf_i+0x16a>
 80054ea:	2d00      	cmp	r5, #0
 80054ec:	f040 808e 	bne.w	800560c <_printf_i+0x210>
 80054f0:	4665      	mov	r5, ip
 80054f2:	2a08      	cmp	r2, #8
 80054f4:	d10b      	bne.n	800550e <_printf_i+0x112>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	07db      	lsls	r3, r3, #31
 80054fa:	d508      	bpl.n	800550e <_printf_i+0x112>
 80054fc:	6923      	ldr	r3, [r4, #16]
 80054fe:	6862      	ldr	r2, [r4, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	bfde      	ittt	le
 8005504:	2330      	movle	r3, #48	; 0x30
 8005506:	f805 3c01 	strble.w	r3, [r5, #-1]
 800550a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800550e:	ebac 0305 	sub.w	r3, ip, r5
 8005512:	6123      	str	r3, [r4, #16]
 8005514:	f8cd 8000 	str.w	r8, [sp]
 8005518:	463b      	mov	r3, r7
 800551a:	aa03      	add	r2, sp, #12
 800551c:	4621      	mov	r1, r4
 800551e:	4630      	mov	r0, r6
 8005520:	f7ff fef6 	bl	8005310 <_printf_common>
 8005524:	3001      	adds	r0, #1
 8005526:	d14d      	bne.n	80055c4 <_printf_i+0x1c8>
 8005528:	f04f 30ff 	mov.w	r0, #4294967295
 800552c:	b005      	add	sp, #20
 800552e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005532:	4839      	ldr	r0, [pc, #228]	; (8005618 <_printf_i+0x21c>)
 8005534:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005538:	6813      	ldr	r3, [r2, #0]
 800553a:	6821      	ldr	r1, [r4, #0]
 800553c:	1d1d      	adds	r5, r3, #4
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6015      	str	r5, [r2, #0]
 8005542:	060a      	lsls	r2, r1, #24
 8005544:	d50b      	bpl.n	800555e <_printf_i+0x162>
 8005546:	07ca      	lsls	r2, r1, #31
 8005548:	bf44      	itt	mi
 800554a:	f041 0120 	orrmi.w	r1, r1, #32
 800554e:	6021      	strmi	r1, [r4, #0]
 8005550:	b91b      	cbnz	r3, 800555a <_printf_i+0x15e>
 8005552:	6822      	ldr	r2, [r4, #0]
 8005554:	f022 0220 	bic.w	r2, r2, #32
 8005558:	6022      	str	r2, [r4, #0]
 800555a:	2210      	movs	r2, #16
 800555c:	e7b7      	b.n	80054ce <_printf_i+0xd2>
 800555e:	064d      	lsls	r5, r1, #25
 8005560:	bf48      	it	mi
 8005562:	b29b      	uxthmi	r3, r3
 8005564:	e7ef      	b.n	8005546 <_printf_i+0x14a>
 8005566:	4665      	mov	r5, ip
 8005568:	fbb3 f1f2 	udiv	r1, r3, r2
 800556c:	fb02 3311 	mls	r3, r2, r1, r3
 8005570:	5cc3      	ldrb	r3, [r0, r3]
 8005572:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005576:	460b      	mov	r3, r1
 8005578:	2900      	cmp	r1, #0
 800557a:	d1f5      	bne.n	8005568 <_printf_i+0x16c>
 800557c:	e7b9      	b.n	80054f2 <_printf_i+0xf6>
 800557e:	6813      	ldr	r3, [r2, #0]
 8005580:	6825      	ldr	r5, [r4, #0]
 8005582:	6961      	ldr	r1, [r4, #20]
 8005584:	1d18      	adds	r0, r3, #4
 8005586:	6010      	str	r0, [r2, #0]
 8005588:	0628      	lsls	r0, r5, #24
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	d501      	bpl.n	8005592 <_printf_i+0x196>
 800558e:	6019      	str	r1, [r3, #0]
 8005590:	e002      	b.n	8005598 <_printf_i+0x19c>
 8005592:	066a      	lsls	r2, r5, #25
 8005594:	d5fb      	bpl.n	800558e <_printf_i+0x192>
 8005596:	8019      	strh	r1, [r3, #0]
 8005598:	2300      	movs	r3, #0
 800559a:	6123      	str	r3, [r4, #16]
 800559c:	4665      	mov	r5, ip
 800559e:	e7b9      	b.n	8005514 <_printf_i+0x118>
 80055a0:	6813      	ldr	r3, [r2, #0]
 80055a2:	1d19      	adds	r1, r3, #4
 80055a4:	6011      	str	r1, [r2, #0]
 80055a6:	681d      	ldr	r5, [r3, #0]
 80055a8:	6862      	ldr	r2, [r4, #4]
 80055aa:	2100      	movs	r1, #0
 80055ac:	4628      	mov	r0, r5
 80055ae:	f7fa fe37 	bl	8000220 <memchr>
 80055b2:	b108      	cbz	r0, 80055b8 <_printf_i+0x1bc>
 80055b4:	1b40      	subs	r0, r0, r5
 80055b6:	6060      	str	r0, [r4, #4]
 80055b8:	6863      	ldr	r3, [r4, #4]
 80055ba:	6123      	str	r3, [r4, #16]
 80055bc:	2300      	movs	r3, #0
 80055be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c2:	e7a7      	b.n	8005514 <_printf_i+0x118>
 80055c4:	6923      	ldr	r3, [r4, #16]
 80055c6:	462a      	mov	r2, r5
 80055c8:	4639      	mov	r1, r7
 80055ca:	4630      	mov	r0, r6
 80055cc:	47c0      	blx	r8
 80055ce:	3001      	adds	r0, #1
 80055d0:	d0aa      	beq.n	8005528 <_printf_i+0x12c>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	079b      	lsls	r3, r3, #30
 80055d6:	d413      	bmi.n	8005600 <_printf_i+0x204>
 80055d8:	68e0      	ldr	r0, [r4, #12]
 80055da:	9b03      	ldr	r3, [sp, #12]
 80055dc:	4298      	cmp	r0, r3
 80055de:	bfb8      	it	lt
 80055e0:	4618      	movlt	r0, r3
 80055e2:	e7a3      	b.n	800552c <_printf_i+0x130>
 80055e4:	2301      	movs	r3, #1
 80055e6:	464a      	mov	r2, r9
 80055e8:	4639      	mov	r1, r7
 80055ea:	4630      	mov	r0, r6
 80055ec:	47c0      	blx	r8
 80055ee:	3001      	adds	r0, #1
 80055f0:	d09a      	beq.n	8005528 <_printf_i+0x12c>
 80055f2:	3501      	adds	r5, #1
 80055f4:	68e3      	ldr	r3, [r4, #12]
 80055f6:	9a03      	ldr	r2, [sp, #12]
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	42ab      	cmp	r3, r5
 80055fc:	dcf2      	bgt.n	80055e4 <_printf_i+0x1e8>
 80055fe:	e7eb      	b.n	80055d8 <_printf_i+0x1dc>
 8005600:	2500      	movs	r5, #0
 8005602:	f104 0919 	add.w	r9, r4, #25
 8005606:	e7f5      	b.n	80055f4 <_printf_i+0x1f8>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1ac      	bne.n	8005566 <_printf_i+0x16a>
 800560c:	7803      	ldrb	r3, [r0, #0]
 800560e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005612:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005616:	e76c      	b.n	80054f2 <_printf_i+0xf6>
 8005618:	080058a1 	.word	0x080058a1
 800561c:	080058b2 	.word	0x080058b2

08005620 <memmove>:
 8005620:	4288      	cmp	r0, r1
 8005622:	b510      	push	{r4, lr}
 8005624:	eb01 0302 	add.w	r3, r1, r2
 8005628:	d807      	bhi.n	800563a <memmove+0x1a>
 800562a:	1e42      	subs	r2, r0, #1
 800562c:	4299      	cmp	r1, r3
 800562e:	d00a      	beq.n	8005646 <memmove+0x26>
 8005630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005634:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005638:	e7f8      	b.n	800562c <memmove+0xc>
 800563a:	4283      	cmp	r3, r0
 800563c:	d9f5      	bls.n	800562a <memmove+0xa>
 800563e:	1881      	adds	r1, r0, r2
 8005640:	1ad2      	subs	r2, r2, r3
 8005642:	42d3      	cmn	r3, r2
 8005644:	d100      	bne.n	8005648 <memmove+0x28>
 8005646:	bd10      	pop	{r4, pc}
 8005648:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800564c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005650:	e7f7      	b.n	8005642 <memmove+0x22>
	...

08005654 <_free_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4605      	mov	r5, r0
 8005658:	2900      	cmp	r1, #0
 800565a:	d045      	beq.n	80056e8 <_free_r+0x94>
 800565c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005660:	1f0c      	subs	r4, r1, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	bfb8      	it	lt
 8005666:	18e4      	addlt	r4, r4, r3
 8005668:	f000 f8d2 	bl	8005810 <__malloc_lock>
 800566c:	4a1f      	ldr	r2, [pc, #124]	; (80056ec <_free_r+0x98>)
 800566e:	6813      	ldr	r3, [r2, #0]
 8005670:	4610      	mov	r0, r2
 8005672:	b933      	cbnz	r3, 8005682 <_free_r+0x2e>
 8005674:	6063      	str	r3, [r4, #4]
 8005676:	6014      	str	r4, [r2, #0]
 8005678:	4628      	mov	r0, r5
 800567a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800567e:	f000 b8c8 	b.w	8005812 <__malloc_unlock>
 8005682:	42a3      	cmp	r3, r4
 8005684:	d90c      	bls.n	80056a0 <_free_r+0x4c>
 8005686:	6821      	ldr	r1, [r4, #0]
 8005688:	1862      	adds	r2, r4, r1
 800568a:	4293      	cmp	r3, r2
 800568c:	bf04      	itt	eq
 800568e:	681a      	ldreq	r2, [r3, #0]
 8005690:	685b      	ldreq	r3, [r3, #4]
 8005692:	6063      	str	r3, [r4, #4]
 8005694:	bf04      	itt	eq
 8005696:	1852      	addeq	r2, r2, r1
 8005698:	6022      	streq	r2, [r4, #0]
 800569a:	6004      	str	r4, [r0, #0]
 800569c:	e7ec      	b.n	8005678 <_free_r+0x24>
 800569e:	4613      	mov	r3, r2
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	b10a      	cbz	r2, 80056a8 <_free_r+0x54>
 80056a4:	42a2      	cmp	r2, r4
 80056a6:	d9fa      	bls.n	800569e <_free_r+0x4a>
 80056a8:	6819      	ldr	r1, [r3, #0]
 80056aa:	1858      	adds	r0, r3, r1
 80056ac:	42a0      	cmp	r0, r4
 80056ae:	d10b      	bne.n	80056c8 <_free_r+0x74>
 80056b0:	6820      	ldr	r0, [r4, #0]
 80056b2:	4401      	add	r1, r0
 80056b4:	1858      	adds	r0, r3, r1
 80056b6:	4282      	cmp	r2, r0
 80056b8:	6019      	str	r1, [r3, #0]
 80056ba:	d1dd      	bne.n	8005678 <_free_r+0x24>
 80056bc:	6810      	ldr	r0, [r2, #0]
 80056be:	6852      	ldr	r2, [r2, #4]
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	4401      	add	r1, r0
 80056c4:	6019      	str	r1, [r3, #0]
 80056c6:	e7d7      	b.n	8005678 <_free_r+0x24>
 80056c8:	d902      	bls.n	80056d0 <_free_r+0x7c>
 80056ca:	230c      	movs	r3, #12
 80056cc:	602b      	str	r3, [r5, #0]
 80056ce:	e7d3      	b.n	8005678 <_free_r+0x24>
 80056d0:	6820      	ldr	r0, [r4, #0]
 80056d2:	1821      	adds	r1, r4, r0
 80056d4:	428a      	cmp	r2, r1
 80056d6:	bf04      	itt	eq
 80056d8:	6811      	ldreq	r1, [r2, #0]
 80056da:	6852      	ldreq	r2, [r2, #4]
 80056dc:	6062      	str	r2, [r4, #4]
 80056de:	bf04      	itt	eq
 80056e0:	1809      	addeq	r1, r1, r0
 80056e2:	6021      	streq	r1, [r4, #0]
 80056e4:	605c      	str	r4, [r3, #4]
 80056e6:	e7c7      	b.n	8005678 <_free_r+0x24>
 80056e8:	bd38      	pop	{r3, r4, r5, pc}
 80056ea:	bf00      	nop
 80056ec:	20004044 	.word	0x20004044

080056f0 <_malloc_r>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	1ccd      	adds	r5, r1, #3
 80056f4:	f025 0503 	bic.w	r5, r5, #3
 80056f8:	3508      	adds	r5, #8
 80056fa:	2d0c      	cmp	r5, #12
 80056fc:	bf38      	it	cc
 80056fe:	250c      	movcc	r5, #12
 8005700:	2d00      	cmp	r5, #0
 8005702:	4606      	mov	r6, r0
 8005704:	db01      	blt.n	800570a <_malloc_r+0x1a>
 8005706:	42a9      	cmp	r1, r5
 8005708:	d903      	bls.n	8005712 <_malloc_r+0x22>
 800570a:	230c      	movs	r3, #12
 800570c:	6033      	str	r3, [r6, #0]
 800570e:	2000      	movs	r0, #0
 8005710:	bd70      	pop	{r4, r5, r6, pc}
 8005712:	f000 f87d 	bl	8005810 <__malloc_lock>
 8005716:	4a21      	ldr	r2, [pc, #132]	; (800579c <_malloc_r+0xac>)
 8005718:	6814      	ldr	r4, [r2, #0]
 800571a:	4621      	mov	r1, r4
 800571c:	b991      	cbnz	r1, 8005744 <_malloc_r+0x54>
 800571e:	4c20      	ldr	r4, [pc, #128]	; (80057a0 <_malloc_r+0xb0>)
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	b91b      	cbnz	r3, 800572c <_malloc_r+0x3c>
 8005724:	4630      	mov	r0, r6
 8005726:	f000 f863 	bl	80057f0 <_sbrk_r>
 800572a:	6020      	str	r0, [r4, #0]
 800572c:	4629      	mov	r1, r5
 800572e:	4630      	mov	r0, r6
 8005730:	f000 f85e 	bl	80057f0 <_sbrk_r>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d124      	bne.n	8005782 <_malloc_r+0x92>
 8005738:	230c      	movs	r3, #12
 800573a:	6033      	str	r3, [r6, #0]
 800573c:	4630      	mov	r0, r6
 800573e:	f000 f868 	bl	8005812 <__malloc_unlock>
 8005742:	e7e4      	b.n	800570e <_malloc_r+0x1e>
 8005744:	680b      	ldr	r3, [r1, #0]
 8005746:	1b5b      	subs	r3, r3, r5
 8005748:	d418      	bmi.n	800577c <_malloc_r+0x8c>
 800574a:	2b0b      	cmp	r3, #11
 800574c:	d90f      	bls.n	800576e <_malloc_r+0x7e>
 800574e:	600b      	str	r3, [r1, #0]
 8005750:	50cd      	str	r5, [r1, r3]
 8005752:	18cc      	adds	r4, r1, r3
 8005754:	4630      	mov	r0, r6
 8005756:	f000 f85c 	bl	8005812 <__malloc_unlock>
 800575a:	f104 000b 	add.w	r0, r4, #11
 800575e:	1d23      	adds	r3, r4, #4
 8005760:	f020 0007 	bic.w	r0, r0, #7
 8005764:	1ac3      	subs	r3, r0, r3
 8005766:	d0d3      	beq.n	8005710 <_malloc_r+0x20>
 8005768:	425a      	negs	r2, r3
 800576a:	50e2      	str	r2, [r4, r3]
 800576c:	e7d0      	b.n	8005710 <_malloc_r+0x20>
 800576e:	428c      	cmp	r4, r1
 8005770:	684b      	ldr	r3, [r1, #4]
 8005772:	bf16      	itet	ne
 8005774:	6063      	strne	r3, [r4, #4]
 8005776:	6013      	streq	r3, [r2, #0]
 8005778:	460c      	movne	r4, r1
 800577a:	e7eb      	b.n	8005754 <_malloc_r+0x64>
 800577c:	460c      	mov	r4, r1
 800577e:	6849      	ldr	r1, [r1, #4]
 8005780:	e7cc      	b.n	800571c <_malloc_r+0x2c>
 8005782:	1cc4      	adds	r4, r0, #3
 8005784:	f024 0403 	bic.w	r4, r4, #3
 8005788:	42a0      	cmp	r0, r4
 800578a:	d005      	beq.n	8005798 <_malloc_r+0xa8>
 800578c:	1a21      	subs	r1, r4, r0
 800578e:	4630      	mov	r0, r6
 8005790:	f000 f82e 	bl	80057f0 <_sbrk_r>
 8005794:	3001      	adds	r0, #1
 8005796:	d0cf      	beq.n	8005738 <_malloc_r+0x48>
 8005798:	6025      	str	r5, [r4, #0]
 800579a:	e7db      	b.n	8005754 <_malloc_r+0x64>
 800579c:	20004044 	.word	0x20004044
 80057a0:	20004048 	.word	0x20004048

080057a4 <_realloc_r>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	4607      	mov	r7, r0
 80057a8:	4614      	mov	r4, r2
 80057aa:	460e      	mov	r6, r1
 80057ac:	b921      	cbnz	r1, 80057b8 <_realloc_r+0x14>
 80057ae:	4611      	mov	r1, r2
 80057b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057b4:	f7ff bf9c 	b.w	80056f0 <_malloc_r>
 80057b8:	b922      	cbnz	r2, 80057c4 <_realloc_r+0x20>
 80057ba:	f7ff ff4b 	bl	8005654 <_free_r>
 80057be:	4625      	mov	r5, r4
 80057c0:	4628      	mov	r0, r5
 80057c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057c4:	f000 f826 	bl	8005814 <_malloc_usable_size_r>
 80057c8:	42a0      	cmp	r0, r4
 80057ca:	d20f      	bcs.n	80057ec <_realloc_r+0x48>
 80057cc:	4621      	mov	r1, r4
 80057ce:	4638      	mov	r0, r7
 80057d0:	f7ff ff8e 	bl	80056f0 <_malloc_r>
 80057d4:	4605      	mov	r5, r0
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d0f2      	beq.n	80057c0 <_realloc_r+0x1c>
 80057da:	4631      	mov	r1, r6
 80057dc:	4622      	mov	r2, r4
 80057de:	f7ff fc11 	bl	8005004 <memcpy>
 80057e2:	4631      	mov	r1, r6
 80057e4:	4638      	mov	r0, r7
 80057e6:	f7ff ff35 	bl	8005654 <_free_r>
 80057ea:	e7e9      	b.n	80057c0 <_realloc_r+0x1c>
 80057ec:	4635      	mov	r5, r6
 80057ee:	e7e7      	b.n	80057c0 <_realloc_r+0x1c>

080057f0 <_sbrk_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4c06      	ldr	r4, [pc, #24]	; (800580c <_sbrk_r+0x1c>)
 80057f4:	2300      	movs	r3, #0
 80057f6:	4605      	mov	r5, r0
 80057f8:	4608      	mov	r0, r1
 80057fa:	6023      	str	r3, [r4, #0]
 80057fc:	f7fb ff1a 	bl	8001634 <_sbrk>
 8005800:	1c43      	adds	r3, r0, #1
 8005802:	d102      	bne.n	800580a <_sbrk_r+0x1a>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	b103      	cbz	r3, 800580a <_sbrk_r+0x1a>
 8005808:	602b      	str	r3, [r5, #0]
 800580a:	bd38      	pop	{r3, r4, r5, pc}
 800580c:	20004114 	.word	0x20004114

08005810 <__malloc_lock>:
 8005810:	4770      	bx	lr

08005812 <__malloc_unlock>:
 8005812:	4770      	bx	lr

08005814 <_malloc_usable_size_r>:
 8005814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005818:	1f18      	subs	r0, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	bfbc      	itt	lt
 800581e:	580b      	ldrlt	r3, [r1, r0]
 8005820:	18c0      	addlt	r0, r0, r3
 8005822:	4770      	bx	lr

08005824 <_init>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	bf00      	nop
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr

08005830 <_fini>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr
